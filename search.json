[{"path":[]},{"path":"https://docs.ropensci.org/rgbif/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/rgbif/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/rgbif.git Make sure track progress upstream (.e., version rgbif ropensci/rgbif) git remote add upstream https://github.com/ropensci/rgbif.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/rgbif","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/CONTRIBUTING.html","id":"email","dir":"","previous_headings":"","what":"Email?","title":"CONTRIBUTING","text":"email ’ll get slower response open issue https://github.com/ropensci/rgbif/issues. benefits everyone open discussion issue.","code":""},{"path":"https://docs.ropensci.org/rgbif/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/creating_maps_from_occurrences.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating maps from occurrences","text":"Large datasets millions lat-lon points can difficult plot using ggplot2 base graphics. cases, using GBIF maps API rgbif::map_fetch() can good option. However, like make complex graphic different colors, shapes, legends, using ggplot2::geom_sf() better option. give examples using methods.","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/creating_maps_from_occurrences.html","id":"using-map_fetch","dir":"Articles","previous_headings":"","what":"Using map_fetch()","title":"Creating maps from occurrences","text":"requires >= rgbif 3.7.8 map_fetch() return default GBIF pixel map occurrences map magick::magick-image. save png can use magick::write_image().  also possible make static maps look like default occurrence search maps. See maps api page available styles.  “poly” styles also possible plot set hexPerTile parameter, binned occurrence data essentially shown higher resolution. tile individual png image fetch API order make map. default settings map_fetch() fetch two images, image 400 hexagons across width map.  also option plot polar artic projections. example, penguin records.  also possible get views just global map, zooming selecting certain map tiles z, x, y. Seleting tiles can tricky get right, little trial--error, can usually get close map want . One trick getting right tiles, look demo page, z,x,y values printed center tile. example, can see tile values zoomed map Australia .  aware selecting many tiles create large image, might crash R session. can control resolution final image format, format=\"@4x.png\" highest possible value. areas give idea z,x,y working. suggest using interactive page getting tile numbers. Keep mind GBIF maps API wasn’t designed make high quality static maps, like used map_fetch(). designed interactive use GBIF website, API design reflects reality. making maps, named paramters, taxonKey, datasetKey, country, publishingOrg, publishingCountry, year, basisOfRecord going easiest use. However, also possible make “” map (search filter) using source=adhoc.  map_fetch() can also tell used parameter default parameter automatically switch source=\"adhoc\" . found point style don’t work well source=\"adhoc\", map_fetch() give warning try use point style source=\"adhoc\". examples maps different parameters styles. adhoc needed recordedBy isn’t one named paramters. map_fetch() automatically detects switches source “adhoc”. Occurrences OBIS network. Note squareSize works bin=\"square\". Map Texas using gadm filter. map_fetch() generally forgiving give back least map warnings blank images parameters don’t work. specimen bird records year 2000. Map country centroid locations. general, adhoc maps harder make look nice, usually picking non-point style tuning hexPerTile perhaps also squareSize, make nice map. tip getting un-named adhoc parameters pull occurrence search URL looking via web interface.","code":"map_fetch() map_fetch(taxonKey=212,style=\"scaled.circles\",base_sytle=\"gbif-light\") map_fetch(hexPerTile=200,style=\"green.poly\",base_style=\"gbif-dark\",bin=\"hex\") map_fetch(srs='EPSG:3031',taxonKey=7190978,style='glacier.point', base_style=\"gbif-dark\") map_fetch(z=3,x=13:14,y=4:5) # Europe map_fetch(z=3,x=7:9,y=0:2) # Africa map_fetch(z=3,x=7:10,y=2:5) # Hawaii map_fetch(z=6,x=6:9,y=23:25) # South Africa  map_fetch(z=5,x=34:38,y=19:22) # Ukraine  map_fetch(z=6,x=70:78,y=13:16) # Iceland map_fetch(z=6,x=55:59,y=8:9) # Capri Is.  map_fetch(z=12,x=4419:4420,y=1124:1125) # all occurrences with iucn status critically endangered  map_fetch(z=1,x=0:3,y=0:1,source=\"adhoc\",iucn_red_list_category=\"CR\",           style=\"iNaturalist.poly\",base_style='osm-bright',bin=\"hex\") map_fetch(recordedBy=\"John Waller\") map_fetch(z=1,source=\"adhoc\",style=\"green.poly\",squareSize=64,bin=\"square\",network_key=\"2b7c7b4f-4d4f-40d3-94de-c28b6fa054a6\") map_fetch(z=4,x=6:7,y=4:5,gadm_gid=\"USA.44_1\",style=\"blue.marker\") map_fetch(x=1:5) # no tiles exist past 2, so blank images are returned map_fetch(taxonKey=212, basisOfRecord=\"PRESERVED_SPECIMEN\", year=2000,style=\"classic-noborder.poly\") map_fetch(distanceFromCentroidInMeters=0,base_style=\"osm-bright\") map_fetch(source=\"adhoc\",project_id=\"BID-AF2015-0134-REG\",style=\"green2.poly\",hexPerTile=50) # https://www.gbif.org/occurrence/map?advanced=1&project_id=BID-AF2015-0134-REG map_fetch(source=\"adhoc\",project_id=\"BID-AF2015-0134-REG\")"},{"path":"https://docs.ropensci.org/rgbif/articles/creating_maps_from_occurrences.html","id":"using-geom_sf","dir":"Articles","previous_headings":"","what":"Using geom_sf()","title":"Creating maps from occurrences","text":"GBIF maps API powerful useful, can frustrating plot needs custom styling legends. don’t large dataset, using ggplot::geom_sf() can good option. See ggplot2 docs .","code":"library(ggplot2) library(sf) library(rnaturalearth)  # occ_download(pred_default(),pred(taxonKey,\"1427067\"),format=\"SIMPLE_CSV\")  worldmap <- ne_countries(scale = 'medium', type = 'map_units',returnclass = 'sf')  # a download I made of all Calopteryx splendens occurrences  d <- occ_download_get('0001707-230810091245214') %>%   occ_download_import()  d_sf <- sf::st_as_sf(d, coords = c(\"decimalLongitude\", \"decimalLatitude\"),         crs = \"+proj=longlat +datum=WGS84\")  # color occurrences by basisOfRecord ggplot() +    geom_sf(data = worldmap) +    geom_sf(data = d_sf,aes(color=basisOfRecord))"},{"path":"https://docs.ropensci.org/rgbif/articles/creating_maps_from_occurrences.html","id":"using-leaflet","dir":"Articles","previous_headings":"","what":"Using leaflet","title":"Creating maps from occurrences","text":"Since GBIF maps API designed work interactive map, can used leaflet. See leaflet docs .","code":"library(leaflet)  leaflet() %>%    addTiles() %>%   addTiles(urlTemplate='https://api.gbif.org/v2/map/occurrence/density/{z}/{x}/{y}@1x.png?style=scaled.circles&taxonKey=5219404')"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"basisofrecord","dir":"Articles","previous_headings":"","what":"basisOfRecord","title":"Effectively using occ_search","text":"One useful fields search basisOfRecord, gives roughly origin occurrence record. records GBIF either PRESERVED_SPECIMEN (museum/herbarium records) HUMAN_OBSERVATION (usually citizen science, sometimes research observations). interesting basisOfRecord values FOSSIL_SPECIMEN LIVING_SPECIMEN (zoos botanical gardens), people typically want exclude downloads. Keep mind basisOfRecord values guaranteed filled accurately publisher. Sometimes records misclassified given basisOfRecord expect complicated provenance.","code":"occ_search(basisOfRecord=\"PRESERVED_SPECIMEN\") # museum and herbarium records occ_search(basisOfRecord=\"HUMAN_OBSERVATION\") # citizen science and research observations occ_search(basisOfRecord=\"FOSSIL_SPECIMEN\") # fossil records occ_search(basisOfRecord=\"LIVING_SPECIMEN\") # zoo and botanical garden records occ_search(basisOfRecord=\"PRESERVED_SPECIMEN;HUMAN_OBSERVATION\") # museum/herbarium and citizen science/research observations occ_search(basisOfRecord=\"MACHINE_OBSERVATION\") # machine observations (e.g. camera traps, acoustic recorders, etc.)"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"searching-with-scientificname","dir":"Articles","previous_headings":"","what":"Searching with scientificName","title":"Effectively using occ_search","text":"Users sometimes attracted occ_search() possible supply scientificName rather taxonKey. Note, background call made species match service (similar name_backbone()) order retrieve GBIF taxonKey. , user can sometimes rarely receive back poorly matched occurrences, particularly authorship supplied. equivalent following: name happens homotypic synonym another name, may get back occurrences name results higher-rank match results. Therefore, usually safer use GBIF taxonKey.","code":"occ_search(scientificName=\"Caloptery splendens\") # Or better  occ_search(scientificName=\"Calopteryx splendens (Harris, 1780)\") occ_search(taxonKey=name_backbone(\"Calopteryx splendens\")$usageKey) # OR occ_search(taxonKey=1427067)"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"non-interpreted-fields","dir":"Articles","previous_headings":"","what":"Non-interpreted fields","title":"Effectively using occ_search","text":"fields GBIF mediated data “interpreted” GBIF, meaning standardized way. example, field basisOfRecord standardized controlled vocabulary. Therefore, values returned matter publisher supplied. instance, “pinned insect”, “fish specimen”, “herbarium sheet”, get mapped PRESERVED_SPECIMEN GBIF. fields “non-interpreted”, meaning standardized way. example, field recordedBy free text field. search recordedBy=\"John Smith\", may get back occurrences recordedBy field variant J. Smith, Smith, J., Smith, John, etc. One strategy determining whether search term free text using occ_count(facet=<\"search term\">). See article occ_count() . many unique values returned, likely field free text.","code":"occ_count(facet=\"recordedBy\") occ_count(facet=\"basisOfRecord\")"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"un-intentional-mass-data-removal-from-null-values","dir":"Articles","previous_headings":"","what":"Un-intentional mass data removal from NULL values","title":"Effectively using occ_search","text":"search parameters often NULL supplied publisher. general, occ_search() terms required fields filled GBIF interpretation often NULL. example, even though coordinateUncertaintyInMeters theoretically applies occurrences coordinates, often NULL publishers choose supply information unknown. Similarly, sex might often left NULL expected naively. columns NULLs one might expect : stateProvince elevation establishmentMeans coordinateUncertaintyInMeters Keep mind specifying filter remove records NULL filter.","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"searching-for-locations","dir":"Articles","previous_headings":"","what":"Searching for locations","title":"Effectively using occ_search","text":"Location searching can sometimes challenging new users. Particularly, searching stateProvince can tricky field free text one might expect controlled vocabulary. stateProvince=\"California\" return occurrences publisher supplied values CA, Calif., Cal.. Additionally, records coordinates falling within California may supplied stateProvince value publisher. usually better choice searching stateProvince search gadmGid. term gadmGid GBIF interpreted field filled GBIF coordinates available. Looking gadmGids can done GBIF occurrence search page. Searching country typically straightforward field standardized filled GBIF coordinates available. Two letter country codes used searching occurrences. codes can looked using enumeration_country(). Searching continent also possible, unlike country, value filled coordinates available, instead relies publisher filling field. publisher filled value, field NULL, even obviously lies continent. field however standardized GBIF, values mapped supplied values mapped controlled vocabulary(e.g. “Europa, Euroopa,EUR,Eu” -> EUROPE, “Afrique,”Afr.”,“AF” -> AFRIKA). need get occurrences certain continent, use gadmGid filter supply bounding box WKT polygon geometry. using geometry make sure polygon wound correct order (anti-clockwise). doubt, using GBIF web UI draw debug polygon can good option. POLYGON MULTIPOLYGON accepted WKT types. Sometimes can useful select everything certain region, also known “polygon hole ”. can done formatting WKT enough interpolated points.","code":"occ_search(stateProvince=\"California\") occ_search(stateProvince=\"CA\")) # will return different number of records   occ_search(stateProvince=\"CA;California\")) # search both variants at the same time occ_search(gadmGid=\"USA.5_1\") # search for California  occ_search(gadmGid=\"JPN.12_1\") # search for Hokkaido Japan occ_search(gadmGid=\"USA.5_1;USA.6_1\") # search for California and Colorado  occ_search(gadmGid=\"PHL.10_1\") # Bataan Philippines occ_search(gadmGid=\"USA\") # United States \"just land\" without EEZ area occ_search(country=\"US\") # search for United States occ_search(country=\"JP\") # search for Japan occ_search(country=\"PH\") # search for Philippines occ_search(country=\"SW\") # search for Sweden occ_search(country=\"US;JP\") # search for United States and Japan occ_search(continent=\"EUROPE\") # search for Europe occ_search(continent=\"AFRIKA\") # search for Africa occ_search(continent=\"EUROPE;AFRIKA\") # search for Europe and Africa occ_search(geometry=\"POLYGON((13.42436 69.86167,4.6469 67.01976,-8.26114 67.2205,-19.62021 67.81281,-28.39768 64.25374,-27.88135 53.09437,-17.55493 44.99691,-16.52228 30.81969,3.61426 32.57676,19.62021 30.37524,38.72411 32.14062,54.21375 33.87246,66.60546 43.14228,72.80133 50.54193,70.21972 62.16009,38.20778 72.6752,23.23447 73.42765,13.42436 69.86167))\") # rough polygon around Europe POLYGON( (-180 -90,-90 -90,0 -90,90 -90,180 -90,180 90,90 90,0 90,-90 90,-180 90,-180 -90), (-5 -5,-5 5,5 5,5 -5,-5 -5) )"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"searching-for-dates","dir":"Articles","previous_headings":"","what":"Searching for dates","title":"Effectively using occ_search","text":"records GBIF can quite old (1600s), sometimes useful filter year remove records. Year typically collection event observation event record. Almost occurrences GBIF supply year value. Therefore filtering year typically safe un-intentional mass data filtering NULL values.","code":"occ_search(year=1998) # search for occurrences from 1998 occ_search(year=\"1998,2024\") # search for occurrences from 1998-2024 occ_search(year=\"1900;2000\") # search for occurrences from 1900 and 2000 occ_search(year=\"1950,2024\") # search for somewhat modern records"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"other-record-ids","dir":"Articles","previous_headings":"","what":"Other record ids","title":"Effectively using occ_search","text":"Sometimes users coming GBIF looking specific museum record, don’t know gbifid record. cases, searching occurrenceId, catalogNumber, recordNumber institutionCode can useful. Keep mind many fields may unique across GBIF. example, institutions might use institutionCode, actual different institutions. Usually combining values can get close record looking .","code":"occ_search(institutionCode=\"KU\") occ_search(catalogNumber=\"KU 110\")"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"dwca-extensions","dir":"Articles","previous_headings":"","what":"DWCA extensions","title":"Effectively using occ_search","text":"New users might aware data publishers supply additional data beyond simple “--” data. Richer extra data usually comes form dwcaExtensions. occ_search() return values extensions, possible filter extension type see dataset publishers published extensions interest.","code":"occ_search(dwcaExtension=\"http://rs.gbif.org/terms/1.0/Multimedia\") occ_search(dwcaExtension=\"http://rs.tdwg.org/dwc/terms/MeasurementOrFact\") occ_search(dwcaExtension=\"http://rs.gbif.org/terms/1.0/DNADerivedData\")"},{"path":"https://docs.ropensci.org/rgbif/articles/effectively_using_occ_search.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Effectively using occ_search","text":"GBIF tech docs","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_citations.html","id":"the-best-way-to-cite","dir":"Articles","previous_headings":"","what":"The Best Way to Cite","title":"Citing GBIF Mediated Data","text":"best way get data GBIF rgbif::occ_download(). newest version rgbif give DOI need make good citation. download, use DOI-citation: also get citation using rgbif::gbif_citation() preferred easiest ways create citation GBIF mediated data. describe special cases might want consider.","code":"occ_download(pred(\"taxonKey\",7412043)) <<gbif download>>   Your download is being processed by GBIF:   https://www.gbif.org/occurrence/download/0056004-210914110416597   Most downloads finish within 15 min.   Check status with   occ_download_wait('0056004-210914110416597')   After it finishes, use   d <- occ_download_get('0056004-210914110416597') %>%     occ_download_import()   to retrieve your download. Download Info:   Username: jwaller   E-mail: jwaller@gbif.org   Format: DWCA   Download key: 0056004-210914110416597   Created: 2021-11-17T09:17:21.828+00:00 Citation Info:     Please always cite the download DOI when using this data.   https://www.gbif.org/citation-guidelines   DOI: 10.15468/dl.9hqqbn   Citation:   GBIF Occurrence Download https://doi.org/10.15468/dl.9hqqbn Accessed from R via rgbif (https://github.com/ropensci/rgbif) on 2021-11-17 GBIF Occurrence Download https://doi.org/10.15468/dl.9hqqbn Accessed from R via rgbif (https://github.com/ropensci/rgbif) on 2021-11-17 gbif_citation(\"0056004-210914110416597\") # using the downloadkey"},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_citations.html","id":"register-a-derived-dataset","dir":"Articles","previous_headings":"","what":"Register a Derived Dataset","title":"Citing GBIF Mediated Data","text":"Derived datasets new citation feature GBIF. Derived datasets citable records GBIF-mediated occurrence data. register derived dataset, need create simple text file two columns: GBIF datasetkey (uuid) count number occurrences dataset allows GBIF give credit involved dataset. file register GBIF look like table . Remember also upload filtered GBIF dataset occurrences public repository like Zenodo. 3 main reasons register derived dataset: GBIF download filtered/reduced significantly (e.g. CoordinateCleaner). Data accessed cloud service. Occurrences obtained using occ_search() similar. using option 3, important consider: occ_search() accomplished occ_download()? answer almost always YES!. simple example using rgbif::derived_dataset(). point, stop upload public repository. https://zenodo.org/ finished, can run following, source_url link publicly accessible modified data. need setup GBIF credentials work. Check derived-dataset user page see worked.","code":"library(rgbif) library(dplyr) library(CoordinateCleaner)  gbif_download <- occ_download_get('0056004-210914110416597') %>%     occ_download_import()      gbif_download_cleaned <- gbif_download %>%     setNames(tolower(names(.))) %>%      filter(occurrencestatus  == \"PRESENT\") %>%     filter(year >= 1900) %>%      cc_cen(buffer = 2000) %>% # remove country centroids within 2km      cc_inst(buffer = 2000) %>% # remove zoo and herbaria within 2km      cc_sea() # remove from ocean  readr::write_tsv(gbif_download_cleaned,\"cleaned_data_for_zenodo.tsv\") # https://www.gbif.org/derived-dataset/about)  derived_data <- gbif_download_clean %>% group_by(datasetkey) %>%  count()  derived_dataset_prep( citation_data = derived_data, title = \"Test Derived Dataset\", description = \"This data was filtered using CoordinateCleaner.\", source_url = \"https://zenodo.org/record/4246090#.YPGS2OgzZPY\" )  # If output looks ok, run derived_dataset to register the dataset on GBIF # derived_dataset( # citation_data = data, # title = \"Test Derived Dataset\", # description = \"This data was filtered using CoordinateCleaner.\", # source_url = \"https://zenodo.org/record/4246090#.YPGS2OgzZPY\" # )"},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_citations.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Citing GBIF Mediated Data","text":"https://www.gbif.org/citation-guidelineshttps://data-blog.gbif.org/post/derived-datasets/https://www.gbif.org/derived-dataset/registerhttps://discourse.gbif.org/t/gbif-exports--public-datasets--cloud-environments/1835","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_sql_downloads.html","id":"supported-sql","dir":"Articles","previous_headings":"","what":"Supported SQL","title":"GBIF SQL Downloads","text":"SELECT queries supported, queries single table named occurrence. JOIN queries sub-queries allowed. Selecting * also allowed. One must explicitly select columns needed. GROUP queries supported, basic SQL window functions (PARTITION ). ORDER supported. common SQL operators functions supported, , , , NULL, RAND(), ROUND(…), LOWER(…), etc. Case ignored GBIF SQL parser, column names returned lowercase. can use occ_download_sql_prep() check query valid. need occurrence columns, can use regular download interface occ_download(pred(\"year\", \"2000\")) instead SQL interface. Note GROUP COUNT(*) type queries single dimension, occ_count(facet=\"x\") usually going much faster option. See article Getting Occurrence Counts GBIF. get list +400 columns definitions occurrence table, can use occ_download_describe(\"sql\")$fields.","code":"occ_download_sql_prep(\"SELECT * FROM occurrence WHERE year = 2000\")  # Should return an ERROR since \"*\" is not allowed"},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_sql_downloads.html","id":"sql-examples---multi-dimension-counts","dir":"Articles","previous_headings":"","what":"SQL examples - Multi-dimension Counts","title":"GBIF SQL Downloads","text":"One common query difficult traditional downloads interface get occurrence counts species multiple dimensions. query gets table countries species occurrences published GBIF without download large table aggregation locally. Keep mind need counts one dimension, occ_count(facet=\"x\") usually going much faster option. Countries species occurrences published GBIF.","code":"sql <- \" SELECT publishingcountry, specieskey, COUNT(*) as occurrence_count FROM occurrence WHERE publishingcountry IS NOT NULL AND specieskey IS NOT NULL GROUP BY publishingcountry, specieskey ORDER BY occurrence_count DESC; \" occ_download_sql(sql)"},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_sql_downloads.html","id":"sql-examples---time-series","dir":"Articles","previous_headings":"","what":"SQL examples - Time series","title":"GBIF SQL Downloads","text":"example retrieves number species published GBIF grouped year basis record. Keep mind year context collection/event date publication date GBIF. Note \"year\" needs double quoted reserve word. true also reserve words like \"month\", \"day\" etc.","code":"library(rgbif) library(ggplot2)  sql <- 'SELECT \"year\", basisofrecord, COUNT(DISTINCT specieskey) as unique_species_count FROM occurrence GROUP BY basisofrecord, \"year\"'  occ_download_sql(sql)  d <- occ_download_get('0001697-240626123714530') %>%   occ_download_import() %>%   filter(!year == 2024) %>%   mutate(date = as.Date(paste0(year, \"-01-01\")))  ggplot(d, aes(x = date, y = unique_species_count, fill = basisofrecord)) +   geom_bar(stat = \"identity\") +   labs(x = \"Year\", y = \"Unique Species Count\", fill = \"Basis of Record\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 90, hjust = 1))"},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_sql_downloads.html","id":"sql-examples---grid-functions","dir":"Articles","previous_headings":"","what":"SQL examples - Grid Functions","title":"GBIF SQL Downloads","text":"Making global map unique species counts per grid cell common task, requires spatial join chosen spatial grid, can difficult without working sometimes extremely large amounts occurrences. reason GBIF’s SQL downloads provide support pre-defined grid functions. functions return grid cell code occurrence, can used aggregate plot data. EEA Reference Grid, GBIF_EEARGCode Military Grid Reference System, GBIF_MGRSCode Quarter degree cell code, GBIF_QDGCCode ISEA3H Grid cell code GBIF_ISEA3HCode, GBIF_ISEA3HCode example working Military Grid Reference System (MGRS) grid. example uses shapefiles repository. example shows produce simple map species counts per grid cell, using occ_download_sql() custom sql function GBIF_MGRSCode(). sql grid functions originally designed used creating species occurrence cubes. Therefore randomization parameter supported 0. set 0 want use grid functions randomization. can download combined shapefile used example : https://github.com/jhnwllr/mgrs-grid Note, open issue grid MGRS certain codes missing shapefile near Austrailia. https://github.com/ngageoint/mgrs-java/issues/4  another example working EEA Reference Grid, covers continental Europe. EEA reference shapefile example can found : https://sdi.eea.europa.eu/data/93315b78-089d-43a5-ac76-b3df627b2e4cf","code":"library(sf) library(dplyr) library(rgbif) library(ggplot2) library(purrr)  sql <- \" SELECT    GBIF_MGRSCode(     100000,      decimalLatitude,     decimalLongitude,     0    ) AS mgrs,   COUNT(DISTINCT speciesKey) AS unique_species_count FROM   occurrence GROUP BY   mgrs \"  # uncomment to run  # occ_download_sql(sql)   # change id 0029823-240906103802322 to your download id d <- occ_download_get('0029823-240906103802322') %>%   occ_download_import() %>%   filter(!mgrs == \"\") %>%   rename(MGRS = mgrs)   path <- \"mgrs-grid/\"  mgrs_grid <- st_layers(path)$name %>% map(~ st_read(path, layer = .) %>% st_transform(4326)) %>% dplyr::bind_rows() %>%  left_join(d, by = \"MGRS\")  p <- ggplot(mgrs_grid) + geom_sf(aes(fill = log(unique_species_count))) + scale_fill_viridis_c() + theme_minimal() library(sf) library(dplyr) library(rgbif) library(ggplot2) library(purrr)  sql <- \" SELECT    GBIF_EEARGCode(     10000,      decimalLatitude,     decimalLongitude,     0   ) AS cellcode,   COUNT(DISTINCT speciesKey) AS unique_species_count FROM   occurrence GROUP BY   cellcode \"  # uncomment to run # occ_download_sql(sql)  # change id 0030075-240906103802322 to your download id d <- occ_download_get('0030075-240906103802322') %>%     occ_download_import() %>%      filter(!cellcode == \"\")   eea_grid <- st_read(\"eea_v_3035_10_km_eea-ref-grid-gb_p_2013_v02_r00\") %>% mutate(cellcode = CELLCODE) %>% left_join(d, by = \"cellcode\")  p <- ggplot(eea_grid) + geom_sf(aes(fill = log(unique_species_count))) + scale_fill_viridis_c() + theme_minimal()"},{"path":"https://docs.ropensci.org/rgbif/articles/gbif_sql_downloads.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"GBIF SQL Downloads","text":"https://data-blog.gbif.org/post/2024-06-24-gbif-sql-downloads/ https://techdocs.gbif.org/en/data-use/api-sql-downloads https://github.com/gbif/occurrence/tree/dev/occurrence-download/example-jobs","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/getting_dataset_info.html","id":"dataset_search-and-dataset_export","dir":"Articles","previous_headings":"","what":"dataset_search() and dataset_export()","title":"Getting Dataset Metadata From GBIF","text":"dataset_search() : Use function want meta-data, counts, facets, necessarily results. dataset_export() : Use function want meta-data results table. want just (non-random) sample datasets registry, can run dataset_search() arguments, return 100 datasets various types. However, running dataset_export() filters, download dataset meta-data registry. types datasets GBIF supports. well known occurrence dataset. can search occurrence type datasets using type filter. Checklists also another common type dataset mediated GBIF. can use multiple values separator “;”, order get checklist occurrence types. might wondering possible types datasets called. facets interface, possible get group-counts dataset_search() filters. Use facetLimit control number results returned facets interface. Facets can also used filters. example get top countries publishing occurrence datasets. examples using dataset_search() filters: haven’t yet mentioned dataset_suggest(), return less data dataset_search(), practically function. time wanting use dataset_search() dataset_export() rather dataset_suggest(). endpoint dataset_suggest() designed allowing GBIF website function efficiently, isn’t really interesting rgbif users, might edge cases useful.","code":"dataset_search() # dataset_export() # beware this will download 93K datasets! dataset_search(type = \"OCCURRENCE\")  # dataset_export(type = \"OCCURRENCE\") # download all of the meta-data dataset_search(type = \"OCCURRENCE;CHECKLIST\")  # dataset_export(type = \"OCCURRENCE;CHECKLIST\") # download both types dataset_search(facet=\"type\",limit=0)$facets $type    name count  1 CHECKLIST 49628  2 OCCURRENCE 38523  3 SAMPLING_EVENT 3036  4 METADATA 386 dataset_search(facet=\"publishingCountry\",facetLimit=200,limit=0)$facets name count 1     CH 47107 2     FR 15559 3     DE  9012 4     CO  2812  <...>  136   RS     1 137   SO     1 138   SS     1 139   TR     1 140   WF     1 dataset_search(facet=\"publishingCountry\",type=\"OCCURRENCE\",facetLimit=200,limit=0)$facets # datasets published by Ukraine dataset_search(publishingCountry = \"UA\")   # checklist datasets with a CC0 license  dataset_export(type=\"CHECKLIST\", license = \"CC0_1_0\")   # Be aware that not all publishers fill in a subType   dataset_search(subType=\"TAXONOMIC_AUTHORITY\")  # Get datasets hosted by Norway  dataset_search(hostingCountry = \"NO\") # counts of datasets hosted by Norway but published by other countries dataset_search(facet=\"publishingCountry\",hostingCountry = \"NO\",limit=0,facetLimit=100)$facets  # get all datasets within the GRIIS porject  dataset_export(projectId = \"GRIIS\")  # keywords used by the GRIIS project dataset_search(facet=\"keyword\",projectId=\"GRIIS\",limit=0,facetLimit=100)$facets  # datasets with data collected between 1600 and 1800 dataset_search(decade = \"1600,1800\")  # group-by license counts of occurrence type datasets dataset_search(facet=\"license\",type=\"OCCURRENCE\",limit=0,facetLimit=10)$facets  # search for dataset by doi of the dataset  dataset_search(doi=\"10.15468/aomfnb\")  # datasets hosted by Scandinavia  dataset_search(hostingCountry = \"IS;FI;DK;NO;SE\") dataset_search(facet=\"hostingCountry\",hostingCountry = \"IS;FI;DK;NO;SE\",limit=0,facetLimit=5)$facets  # all datasests in the VertNet network  dataset_export(networkKey = \"99d66b6c-9087-452f-a9d4-f15f2c2d0e7e\")   # all datasets with the keyword \"DEPOBIO\" hosted by France dataset_export(keyword=\"DEPOBIO\",hostingCountry=\"FR\") # number of occurrences dataset_export(keyword=\"DEPOBIO\",hostingCountry=\"FR\")$occurrenceRecordsCount |> sum()  # datasets published by Cornell Lab of Ornithology dataset_search(publishingOrg = \"e2e717bf-551a-4917-bdc9-4fa0f342c530\")"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_dataset_info.html","id":"dataset","dir":"Articles","previous_headings":"","what":"dataset","title":"Getting Dataset Metadata From GBIF","text":"dataset() returns meta-data necessarily found dataset_search(). time want use dataset_search(), times use dataset(). example, want search machine tag.","code":"# return all datasets tagged as \"citizen science\" dataset(machineTagNamespace=\"citizenScience.gbif.org\")"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_dataset_info.html","id":"other-functions","dir":"Articles","previous_headings":"","what":"Other functions","title":"Getting Dataset Metadata From GBIF","text":"various dataset functions might find useful. Particularly know datasetKey uuid, group functions can used.","code":"# get details of a single dataset  dataset_get(\"38b4c89f-584c-41bb-bd8f-cd1def33e92f\")  # get the details of how the dataset is being ingested by GBIF dataset_process(\"38b4c89f-584c-41bb-bd8f-cd1def33e92f\",limit=3)  # what networks does the dataset belong to?  dataset_networks(\"3dab037f-a520-4bc3-b888-508755c2eb52\")  # what datasets compose the dataset? Not many datasets have constituents.  dataset_constituents(\"7ddf754f-d193-4cc9-b351-99906754a03b\",limit=3)  # what contacts did the publishers give for the dataset?  dataset_contact(\"7ddf754f-d193-4cc9-b351-99906754a03b\")  # only works for CHECKLIST type datasets dataset_metrics(\"7ddf754f-d193-4cc9-b351-99906754a03b\")"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"occ_download","dir":"Articles","previous_headings":"","what":"occ_download()","title":"Getting Occurrence Data From GBIF","text":"occ_download() best way get GBIF mediated occurrences. main functions related downloads : occ_download(): start download GBIF servers. occ_download_prep(): preview download request sending GBIF. occ_download_get(): retrieve download GBIF computer. occ_download_import(): load download computer R. make download request, occ_download() uses helper functions starting pred. functions define filters large GBIF occurrence table, usable subset returned. predicate functions named ‘type’ operation , following terminology used GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"a-very-simple-download","dir":"Articles","previous_headings":"","what":"A Very Simple Download","title":"Getting Occurrence Data From GBIF","text":"required set GBIF credentials make downloads GBIF. suggest follow short tutorial continuing. following download occurrences Lepus saxatilis. can use name_backbone(\"Lepus saxatilis\") find taxonKey (usageKey). print tells us can wait download finish occ_download_wait(). downloads 100K records run quickly. can also check status download GBIF user page. print tells can get download using occ_download_get() occ_download_import(). also possible save download object pass occ_download_get(). Note citation appears print . use used download research paper. Please also see GBIF’s citation guidelines using GBIF mediated data. also get citation running gbif_citation() checking user page.","code":"# remember to set up your GBIF credentials occ_download(pred(\"taxonKey\", 2436775),format = \"SIMPLE_CSV\") <<gbif download>>   Your download is being processed by GBIF:   https://www.gbif.org/occurrence/download/0079311-210914110416597   Most downloads finish within 15 min.   Check status with   occ_download_wait('0079311-210914110416597')   After it finishes, use   d <- occ_download_get('0079311-210914110416597') %>%     occ_download_import()   to retrieve your download. Download Info:   Username: jwaller   E-mail: jwaller@gbif.org   Format: SIMPLE_CSV   Download key: 0079311-210914110416597   Created: 2021-12-14T13:02:09.610+00:00 Citation Info:     Please always cite the download DOI when using this data.   https://www.gbif.org/citation-guidelines   DOI: 10.15468/dl.dqp6a3   Citation:   GBIF Occurrence Download https://doi.org/10.15468/dl.dqp6a3 Accessed from R via rgbif (https://github.com/ropensci/rgbif) on 2021-12-14 occ_download_wait('0079311-210914110416597') # checks if download is finished d <- occ_download_get('0079311-210914110416597') %>%   occ_download_import() gbif_download <- occ_download(pred(\"taxonKey\", 2436775),format = \"SIMPLE_CSV\")  occ_download_wait(gbif_download)  d <- occ_download_get(gbif_download) %>%   occ_download_import() GBIF Occurrence Download https://doi.org/10.15468/dl.dqp6a3 Accessed from R via rgbif (https://github.com/ropensci/rgbif) on 2021-12-14 gbif_citation('0078589-210914110416597') # or # gbif_citation(gbif_download)"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"a-more-realistic-download","dir":"Articles","previous_headings":"","what":"A More Realistic Download","title":"Getting Occurrence Data From GBIF","text":"Typically GBIF downloads follow particular pattern, filters used . common filters probably using. download … Remove default geospatial issues. Keep records coordinates. Remove absent records. Remove fossils living specimens Retrieve Lepus saxatilis. code commonly used, pretty long. pred_default() created.","code":"occ_download( pred(\"hasGeospatialIssue\", FALSE), pred(\"hasCoordinate\", TRUE), pred(\"occurrenceStatus\",\"PRESENT\"),  pred_not(pred_in(\"basisOfRecord\",c(\"FOSSIL_SPECIMEN\",\"LIVING_SPECIMEN\"))), pred(\"taxonKey\", 2436775), format = \"SIMPLE_CSV\" ) # shorter equivalent to download above occ_download( pred_default(),  pred(\"taxonKey\", 2436775),  format = \"SIMPLE_CSV\" )"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"long-species-list-downloads","dir":"Articles","previous_headings":"","what":"Long species list downloads","title":"Getting Occurrence Data From GBIF","text":"Another common download pattern long species list downloads. tutorial downloading long list species .","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"a-complex-download-for-illustration","dir":"Articles","previous_headings":"","what":"A Complex Download For Illustration","title":"Getting Occurrence Data From GBIF","text":"make overly complex download highlight capabilities occ_download(). useful downloads much simpler. download … pred(\"taxonKey\", 2436775) : Lepus saxatilis records pred(\"hasGeospatialIssue\", FALSE) : remove default geospatial issues. pred(\"hasCoordinate\", TRUE) : keep records coordinates. pred(\"occurrenceStatus\",\"PRESENT\") : remove absent records. pred_not(pred_in(\"basisOfRecord\",c(\"FOSSIL_SPECIMEN\",\"LIVING_SPECIMEN\"))): Remove fossils living specimens pred_gte(\"year\", 1900) : /year 1900 pred_or(pred(\"country\",\"ZA\"),pred(\"gadm\",\"ETH\")) South Africa Ethiopia, using separate polygon systems. See enumeration_country() country codes. pred_or(pred_not(pred_in(\"establishmentMeans\",c(\"MANAGED\",\"INTRODUCED\"))),pred_isnull(\"establishmentMeans\")) : establishmentMeans column contain managed introduced species, can left blank. pred_or(pred_lt(\"coordinateUncertaintyInMeters\",10000),pred_isnull(\"coordinateUncertaintyInMeters\")) : coordinateUncertaintyInMeters less 10K meter left blank. format = \"SIMPLE_CSV\" : return just tsv file occurrences.","code":"occ_download( type=\"and\",     pred(\"taxonKey\", 2436775),     pred(\"hasGeospatialIssue\", FALSE),     pred(\"hasCoordinate\", TRUE),     pred(\"occurrenceStatus\",\"PRESENT\"),      pred_gte(\"year\", 1900),     pred_not(pred_in(\"basisOfRecord\",c(\"FOSSIL_SPECIMEN\",\"LIVING_SPECIMEN\"))),   pred_or(     pred(\"country\",\"ZA\"),     pred(\"gadm\",\"ETH\")     ),   pred_or(     pred_not(pred_in(\"establishmentMeans\",c(\"MANAGED\",\"INTRODUCED\"))),     pred_isnull(\"establishmentMeans\")     ),   pred_or(       pred_lt(\"coordinateUncertaintyInMeters\",10000),     pred_isnull(\"coordinateUncertaintyInMeters\")     ), format = \"SIMPLE_CSV\" )"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"not-downloads","dir":"Articles","previous_headings":"","what":"Not Downloads","title":"Getting Occurrence Data From GBIF","text":"Another sometimes useful pattern downloading occurrences except group. Birds make large portion GBIF occurrences. wanted download everything birds, use pred_not().","code":"# name_backbone(\"Aves\") occ_download(pred_not(\"taxonKey\", 212),format = \"SIMPLE_CSV\")"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"big-polygon-downloads","dir":"Articles","previous_headings":"","what":"Big Polygon Downloads","title":"Getting Occurrence Data From GBIF","text":"Sometimes users want download records using large polygon. worth noting many land-based polygons can captured using GADM filter, land+sea polygons using ISO country/area filter. download using filters faster accurate one custom polygon. download occurrences within biodiversity hotspot known Wallacea. polygon may contain maximum 10,000 points, practice number might less depending complexity polygon. also make sure polygons “anticlockwise” ordering points. See downloads documentation. Due changes GBIF’s polygon interpretation, might get error using polygons wound “wrong direction” (clockwise). example, R package sf returns WKT polygons clockwise default. One solution use wk package reorient polygon prior feeding pred_within(). generating polygons public data sources, check WKT want using site like WKT Geometry Plotter. common mistake requesting polygon United Kingdom, finding includes UK’s territories Bermuda, Pitcairn . (pred(\"country\", \"GB\") pred_in(\"country\", c(\"GB\", \"IM\", \"GG\", \"JE\")) much faster anyway.)","code":"# Simple code to go from shapefile to WKT # large_wkt <- sf::st_read(\"large_shapefile\") %>%  # sf::st_geometry() %>%  # sf::st_as_text()  large_wkt <- \"POLYGON ((127.0171 4.9391, 124.5973 4.7960, 121.7968 3.7617, 119.0816 3.0776, 119.1999 0.5229, 117.3936 -5.1010, 116.4971 -6.7425, 115.9096 -8.2031, 115.5687 -9.9150, 117.2358 -10.0975, 120.9361 -11.4096, 122.5775 -11.8123, 123.5516 -11.8544, 125.5775 -11.2832, 128.6224 -9.7196, 131.1873 -9.1914, 132.1547 -8.3925, 133.4920 -6.4151, 133.6129 -5.8375, 133.5079 -5.1369, 133.1861 -4.7011, 131.4894 -3.3231, 129.8271 -2.4649,  129.3679 -2.0044, 129.1699 -1.1486, 129.7026 -0.2859, 129.7691 0.2902,  129.4364 2.4420, 128.9881 3.3626, 128.3585 4.1683, 127.7041 4.6918, 127.0171 4.9391))\"   occ_download(pred_within(large_wkt),format = \"SIMPLE_CSV\")) wkt %>%   wk::wkt() %>%    wk::wk_orient()"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"filter-country-centroids","dir":"Articles","previous_headings":"","what":"Filter Country Centroids","title":"Getting Occurrence Data From GBIF","text":"Sometimes GBIF data publishers know exact lat-lon location record enter lat-long center country instead. data issue users might unaware observation pinned country center assume precise location. possible filter country/area centroids download using distanceFromCentroidInMeters filter. GBIF currently uses PCLI level centroids catalogue centroids.","code":"# download occurrences that are at least 2km from a centroid in Sweden occ_download( pred_gte(\"distanceFromCentroidInMeters\",\"2000\"), pred(\"country\",\"SE\"), format = \"SIMPLE_CSV\")"},{"path":"https://docs.ropensci.org/rgbif/articles/getting_occurrence_data.html","id":"data-quality","dir":"Articles","previous_headings":"","what":"Data Quality","title":"Getting Occurrence Data From GBIF","text":"GBIF large data aggregator. mediates occurrences records large variety sources: Museums eDNA Citizen Science Apps Ecological Surveys Camera Traps Satellite Tracking Herbaria Paleontology Research Projects reason, occurrences GBIF “fit use”, meaning suitable particular purpose project. data-quality issues well understood automated ways detect remove dataset. Country Centroids Living Specimens Fossils Uncertain Records Country Coordinate Mismatch Zero-Zero Coordinate -Zero Coordinates Gridded Datasets Since rgbif data cleaning package, please see following resources post-processing occurrence downloads: Common things look post-processing GBIF downloads CoordinateCleaner Data Quality Webinar","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/occ_counts.html","id":"getting-counts-using-facets","dir":"Articles","previous_headings":"","what":"Getting counts using facets","title":"Getting Occurrence Counts From GBIF","text":"occ_count() also supports querying via facets interface. Using occ_count(facet=\"x\") return data.frame. get table occurrence counts year. Counts facets sorted count. Use facetLimit control number rows returned. facets interface uses occ_search() internally, table can also fetched using occ_search(facet=\"year\",occurrenceStatus=\"PRESENT\",limit=0)$facets$year. particular count also available via custom function occ_count_year() (see ). Almost occ_search() parameter can used via facets interface. Facets can combined search filters produce custom result. parameters “lastInterpreted”, “eventDate”, “geometry” faceted. Multiple values facets supported occ_count(), use occ_search() instead.","code":"occ_count(facet=\"year\") occ_count(facet=\"year\",facetLimit=400) occ_count_year() # top scientificNames from Japan occ_count(facet=\"scientificName\",country=\"JP\") # top countries publishing specimen bird records between 1850 and 1880 occ_count(facet=\"scientificName\",taxonKey=212,basisOfRecord=\"PRESERVED_SPECIMEN\",year=\"1850,1880\")  # Number of present or absence records of Elephants occ_count(facet=\"occurrenceStatus\",scientificName=\"Elephantidae\")  # top 100 datasets publishing occurrences to GBIF occ_count(facet=\"datasetKey\",facetLimit=100) # top datasets publishing country centroids on GBIF occ_count(facet=\"datasetKey\",distanceFromCentroidInMeters=\"0\")  # common values for coordinateUncertaintyInMeters for museum specimens occ_count(facet=\"coordinateUncertaintyInMeters\",basisOfRecord=\"PRESERVED_SPECIMEN\")  # number of iucn listed bird and insect occurrences in Mexico occ_count(facet=\"iucnRedListCategory\",taxonKey=\"212;216\",country=\"MX\")  # most common latitude values mediated by GBIF occ_count(facet=\"decimalLatitude\")  # top iNaturalist users publishing research-grade obs to GBIF occ_count(facet=\"recordedBy\",datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\") # top 100 iNaturalist users from Ukraine occ_count(facet=\"recordedBy\",datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\",country=\"UA\",facetLimit=100)  # top institutions publishing specimen occurrences to GBIF occ_count(facet=\"institutionCode\",basisOfRecord=\"PRESERVED_SPECIMEN\")"},{"path":"https://docs.ropensci.org/rgbif/articles/occ_counts.html","id":"using-facets-to-get-species-counts","dir":"Articles","previous_headings":"","what":"Using facets to get species counts","title":"Getting Occurrence Counts From GBIF","text":"Facets can also quick way getting unique counts certain queries, species counts. Note query returns many rows, may exceed facetLimit max value. tested facetLimit=500000, larger values may fail.","code":"# unique number of species in Sweden occ_count(facet=\"speciesKey\",facetLimit=200000,country=\"SE\") %>% nrow()  # unique number of iucn endangered species recently in Sweden without common geospatial issues occ_count(facet=\"speciesKey\",iucnRedListCategory=\"CR\",country=\"SE\",hasGeospatialIssue = FALSE,year=\"2000,2023\",facetLimit=200000) %>% nrow()  # unique number of species in this WKT polygon occ_count(facet=\"speciesKey\",geometry=\"POLYGON((24.70938 48.9221,24.71056 48.92175,24.71107 48.92296,24.71002 48.92318,24.70938 48.9221))\",facetLimit=200000) %>% nrow()  # Will not work since the query returns too many results # occ_count(facet=\"speciesKey\",facetLimit=500000) %>% nrow()"},{"path":"https://docs.ropensci.org/rgbif/articles/occ_counts.html","id":"using-occ_count_-functions","dir":"Articles","previous_headings":"","what":"Using occ_count_* functions","title":"Getting Occurrence Counts From GBIF","text":"facets powerful quite useful, can slow. reason, GBIF also custom API endpoints getting table useful occurrence counts. can accessed via occ_count_* family functions. occ_count_country() give back table total occurrence counts country area. occ_count_country(publishingCountry=\"MX\") return table counts countries Mexico publishes occurrences records. occ_count_pub_country(country=\"MX\") return table occurrence counts publishing country Mexico. Note value Mexico table one . See examples clarification: occ_count_year() return table total occurrence counts year occurrence recorded collected (published GBIF). occ_count_basis_of_record() return table occurrences counts basis record type.","code":"# the occurrences Mexico has published in other countries  occ_count_country(\"MX\")  # the occurrences Denmark has published in other countries  occ_count_country(\"DK\")   # the occurrences other countries have published in Denmark occ_count_pub_country(\"DK\") # the occurrences other countries have published in Mexico occ_count_pub_country(\"MX\")"},{"path":"https://docs.ropensci.org/rgbif/articles/rgbif.html","id":"about-the-package","dir":"Articles","previous_headings":"","what":"About the package","title":"Introduction to rgbif","text":"rgbif R package search retrieve data GBIF. rgbif wraps R code around GBIF API allow use GBIF R.","code":""},{"path":"https://docs.ropensci.org/rgbif/articles/rgbif.html","id":"install-rgbif","dir":"Articles","previous_headings":"","what":"Install rgbif","title":"Introduction to rgbif","text":"","code":"install.packages(\"rgbif\") # Or install the development version from GitHub # remotes::install_github(\"ropensci/rgbif\") library(\"rgbif\")"},{"path":"https://docs.ropensci.org/rgbif/articles/rgbif.html","id":"get-occurrence-data-from-gbif","dir":"Articles","previous_headings":"","what":"Get occurrence data from GBIF","title":"Introduction to rgbif","text":"Users GBIF usually primarily interested getting occurrence data. occ_search fast way get data, necessarily best. occ_search, limited 100,000 records per query. occ_download usually much better way get occurrences GBIF requires GBIF account. need set GBIF account credentials work. Follow instructions . following download occurrences Lepus saxatilis. can use name_backbone(\"Lepus saxatilis\") find taxonKey (usageKey). See article Getting Occurrence Data GBIF.","code":"# get some occurrences using the search API occ_search(scientificName = \"Calopteryx splendens\") occ_search(scientificName = \"Calopteryx splendens\",country = \"DK\") occ_search(scientificName = \"Calopteryx splendens\",country = \"DK\",year=\"1999,2005\")  # look up a single occurrence record occ_get(key=855998194) # not many reasons to do this but it exists # name_backbone(\"Lepus saxatilis\")$usageKey gbif_download <- occ_download(pred(\"taxonKey\", 2436775),format = \"SIMPLE_CSV\")  occ_download_wait(gbif_download)  d <- occ_download_get(gbif_download) %>%   occ_download_import()"},{"path":"https://docs.ropensci.org/rgbif/articles/rgbif.html","id":"look-up-taxonomic-names","dir":"Articles","previous_headings":"","what":"Look up taxonomic names","title":"Introduction to rgbif","text":"order use GBIF mediated data effectively, often need match scientific name GBIF Backbone Taxonomy. goal name matching get back unambiguous taxonomic key (number) scientific name interested . key makes easy GBIF know mean. See article Working Taxonomic Names.","code":"name_backbone(\"Calopteryx\") # get best match in the GBIF backbone name_backbone_checklist(c(\"Calopteryx splendens\",\"Fake species Waller 2022\")) # look up multiple names name_suggest(\"Calopteryx splendens\") # can be useful if you aren't sure which name to use name_lookup(\"mammalia\") # look outside of the GBIF backbone too"},{"path":"https://docs.ropensci.org/rgbif/articles/rgbif.html","id":"number-of-occurrences","dir":"Articles","previous_headings":"","what":"Number of occurrences","title":"Introduction to rgbif","text":"Get occurrence counts GBIF.","code":"occ_count() # total number in GBIF occ_count(georeferenced=TRUE) # all with coordinates occ_count(basisOfRecord='OBSERVATION') # with this basis of record occ_count(taxonKey=2435099, georeferenced=TRUE) # with coordinates occ_count(country=\"DK\") # from Denmark  occ_count(datasetKey='9e7ea106-0bf8-4087-bb61-dfe4f29e0f17') # from a dataset occ_count(year=2012)"},{"path":"https://docs.ropensci.org/rgbif/articles/rgbif.html","id":"parse-taxonomic-names","dir":"Articles","previous_headings":"","what":"Parse taxonomic names","title":"Introduction to rgbif","text":"Interpret break scientific name parts.","code":"name_parse(\"Fake name John Waller 2022\") name_parse(c(\"Calopteryx splendens\",\"Auricularia auricula-judae (Fr.) J.Schröt.\"))"},{"path":"https://docs.ropensci.org/rgbif/articles/taxonomic_names.html","id":"too-many-choices-problem","dir":"Articles","previous_headings":"","what":"Too many choices problem","title":"Working With Taxonomic Names","text":"two names exist GBIF Backbone Taxonomy name different authorship (homotypic synonyms), supplying just binomial name result matchType : \"HIGHERRANK\". example, binomial name “Glocianus punctiger” two entries backbone taxonomy. Using verbose=TRUE return names. However, giving just binomial name return genus Glocianus, since GBIF doesn’t know one choose. Since name_backbone designed give back best match, ’s possible response choose two names.","code":"name_backbone(\"Glocianus punctiger\",verbose=TRUE) # returns more names # \"Glocianus punctiger (C.R.Sahlberg, 1835)\" # \"Glocianus punctiger (Gyllenhal, 1837)\" name_backbone(\"Glocianus punctiger\") # matchType : \"HIGHERRANK\""},{"path":"https://docs.ropensci.org/rgbif/articles/taxonomic_names.html","id":"other-name_-functions","dir":"Articles","previous_headings":"","what":"Other name_* functions","title":"Working With Taxonomic Names","text":"several functions finding taxonomic information. Typically, function want use name_backbone name_backbone_checklist, functions can also useful certain situations. name_suggest can useful looking subspecies partial names. service lets gbif.org guess name typing occurrence search. name_lookup can sometimes useful seeing available checklists. name_usage catch function lot. ?name_usage examples. example, name_usage can used looking order, families, genera higher-rank group. name_usage can used looking common names vernacular names.","code":"name_suggest(\"Calopteryx splendens\") name_lookup(\"Calopteryx splendens\")$data library(dplyr) # all bird genera, families, and orders name_usage(212,data=\"children\",limit=200)$data %>%  filter(!is.na(nubKey)) %>% # only things with a GBIF backbone nubKey glimpse() name_usage(key=212, data=\"vernacularNames\")$data # the common names for birds"},{"path":"https://docs.ropensci.org/rgbif/articles/taxonomic_names.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Working With Taxonomic Names","text":"Read GBIF backbone made .","code":""},{"path":"https://docs.ropensci.org/rgbif/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Damiano Oldoni. Author. Vijay Barve. Contributor. Peter Desmet. Contributor. Laurens Geffert. Contributor. Dan Mcglinn. Contributor. Karthik Ram. Contributor. . Funder.           https://ropensci.org/ John Waller. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/rgbif/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2024). rgbif: Interface Global Biodiversity Information Facility API. R package version 3.8.1.1, https://CRAN.R-project.org/package=rgbif. Chamberlain S, Boettiger C (2017). “R Python, Ruby clients GBIF species occurrence data.” PeerJ PrePrints. https://doi.org/10.7287/peerj.preprints.3304v1.","code":"@Manual{,   title = {rgbif: Interface to the Global Biodiversity Information Facility API},   author = {Scott Chamberlain and Vijay Barve and Dan Mcglinn and Damiano Oldoni and Peter Desmet and Laurens Geffert and Karthik Ram},   year = {2024},   note = {R package version 3.8.1.1},   url = {https://CRAN.R-project.org/package=rgbif}, } @Article{,   title = {R Python, and Ruby clients for GBIF species occurrence data},   author = {Scott Chamberlain and Carl Boettiger},   journal = {PeerJ PrePrints},   year = {2017},   publisher = {PeerJ, Inc.},   url = {https://doi.org/10.7287/peerj.preprints.3304v1}, }"},{"path":"https://docs.ropensci.org/rgbif/index.html","id":"rgbif-","dir":"","previous_headings":"","what":"Interface to the Global Biodiversity Information Facility API","title":"Interface to the Global Biodiversity Information Facility API","text":"rgbif R package gives access GBIF mediated data via REST API. GBIF (Global Biodiversity Information Facility) international network data infrastructure funded world’s governments aimed providing anyone, anywhere, open access data types life Earth.","code":""},{"path":"https://docs.ropensci.org/rgbif/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to the Global Biodiversity Information Facility API","text":"","code":"install.packages(\"rgbif\") # CRAN version pak::pkg_install(\"ropensci/rgbif\") # dev version install.packages(\"rgbif\", repos=\"https://dev.ropensci.org\") # dev version"},{"path":"https://docs.ropensci.org/rgbif/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Interface to the Global Biodiversity Information Facility API","text":"several long-form articles can help get started: Getting Started Getting Occurrence Data GBIF Working Taxonomic Names GBIF users interested getting lat-lon occurrence records. usually better get occurrence records using taxonKey. See article Working Taxonomic Names. GBIF strongly recommends use occ_download() rather occ_search() serious research projects. See article Getting Occurrence Data GBIF. required set GBIF credentials make downloads GBIF.","code":"occ_search(scientificName = \"Pan troglodytes\") occ_data(scientificName = \"Pan troglodytes\") taxonKey <- name_backbone(\"Pan troglodytes\")$usageKey occ_search(taxonKey = taxonKey) occ_download(pred(\"taxonKey\", 5219534)) # 5219534 is the taxonKey for Pan troglodytes"},{"path":"https://docs.ropensci.org/rgbif/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Interface to the Global Biodiversity Information Facility API","text":"terms GBIF data user agreement, users download data agree cite DOI. Please see GBIF’s citation guidelines Citing GBIF Mediated Data. Please also cite rgbif running citation(package = \"rgbif\").","code":""},{"path":"https://docs.ropensci.org/rgbif/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Interface to the Global Biodiversity Information Facility API","text":"list honors contributors alphabetical order. Code contributors bold. adamdsmith - AgustinCamacho - AldoCompagnoni - AlexPeap - andzandz11 - AshleyWoods - AugustT - barthoekstra - benmarwick - cathynewman - cboettig - coyotree - damianooldoni - dandaman - djokester - dlebauer - dmcglinn - dmi3kno - dnoesgaard - DupontCai - ecology-data-science - EDiLD - elgabbas - emhart - fxi - ghost - gkburada - hadley - Huasheng12306 - ibartomeus - JanLauGe - jarioksa - jeroen - jhnwllr - jhpoelen - jivelasquezt - jkmccarthy - johnbaums - jtgiermakowski - jwhalennds - karthik - kgturner - Kim1801 - ljuliusson - ljvillanueva - luisDVA - martinpfannkuchen - MattBlissett - MattOates - maxhenschell - mdsumner - -la-ngo - Octoberweather - omahs - Pakillo - peterdesmet - PhillRob - PietrH - poldham - qgroom - raymondben - rossmounce - sacrevert - sagitaninta - sckott - scottsfarley93 - simon-tarr - SriramRamesh - stevenpbachman - stevensotelo - stevenysw - TomaszSuchan - tphilippi - vandit15 - vervis - vijaybarve - willgearty - Xuletajr - yvanlebras - zixuan75","code":""},{"path":"https://docs.ropensci.org/rgbif/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Interface to the Global Biodiversity Information Facility API","text":"Please report issues bugs. License: MIT Get citation information rgbif R citation(package = 'rgbif') Please note package released Contributor Code Conduct. contributing project, agree abide terms. similar GBIF clients languages : Python Ruby PHP package part spocc, along several packages, provide access occurrence records multiple data sources.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":null,"dir":"Reference","previous_headings":"","what":"DownReq — DownReq","title":"DownReq — DownReq","text":"handles single requests GbifQueue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DownReq — DownReq","text":"req (list) internal holder request type (list) type, one \"lazy\" (lazy evaluated) \"pre\" (run occ_download_exec internal fxn) result (list) holds result http request","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DownReq — DownReq","text":"DownReq$new() DownReq$print() DownReq$run() DownReq$status() DownReq$clone()","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DownReq — DownReq","text":"Create new DownReq object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DownReq — DownReq","text":"","code":"DownReq$new(x)"},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DownReq — DownReq","text":"x either lazy object object class occ_download, object class occ_download_prep","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DownReq — DownReq","text":"new DownReq object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"DownReq — DownReq","text":"print method DownReq class","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DownReq — DownReq","text":"","code":"DownReq$print(x, ...)"},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DownReq — DownReq","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"DownReq — DownReq","text":"execute http request","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DownReq — DownReq","text":"","code":"DownReq$run()"},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DownReq — DownReq","text":"nothing, puts http response $result","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"method-status-","dir":"Reference","previous_headings":"","what":"Method status()","title":"DownReq — DownReq","text":"check http request status","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DownReq — DownReq","text":"","code":"DownReq$status()"},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DownReq — DownReq","text":"output occ_download_meta()","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DownReq — DownReq","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DownReq — DownReq","text":"","code":"DownReq$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DownReq — DownReq","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/DownReq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DownReq — DownReq","text":"","code":"if (FALSE) { # \\dontrun{ res <- DownReq$new(occ_download_prep(pred(\"basisOfRecord\", \"LITERATURE\"),    pred(\"year\", \"1956\") )) res # res$run() # res # res$status() # res$result } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":null,"dir":"Reference","previous_headings":"","what":"GbifQueue — GbifQueue","title":"GbifQueue — GbifQueue","text":"GBIF download queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"GbifQueue — GbifQueue","text":"reqs (list) named list objects class occ_download() queue (list) holds queued jobs","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GbifQueue — GbifQueue","text":"GbifQueue$print() GbifQueue$new() GbifQueue$add() GbifQueue$add_all() GbifQueue$remove() GbifQueue$next_() GbifQueue$last_() GbifQueue$jobs() GbifQueue$clone()","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"GbifQueue — GbifQueue","text":"print method GbifQueue class","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$print(x, ...)"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GbifQueue — GbifQueue","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GbifQueue — GbifQueue","text":"Create new GbifQueue object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$new(..., .list = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GbifQueue — GbifQueue","text":"... number occ_download() requests .list number occ_download() requests lazy objects, called e.g., lazyeval::lazy()","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"new GbifQueue object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"GbifQueue — GbifQueue","text":"Add single jobs queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$add(x)"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"GbifQueue — GbifQueue","text":"x occ_download() object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"nothing returned; adds job (x) queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-add-all-","dir":"Reference","previous_headings":"","what":"Method add_all()","title":"GbifQueue — GbifQueue","text":"Add jobs queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$add_all()"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-remove-","dir":"Reference","previous_headings":"","what":"Method remove()","title":"GbifQueue — GbifQueue","text":"Remove job queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$remove(x)"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"GbifQueue — GbifQueue","text":"x occ_download() object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-next-","dir":"Reference","previous_headings":"","what":"Method next_()","title":"GbifQueue — GbifQueue","text":"Get next job queue. jobs, returns empty list","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$next_()"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"next job empty list","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-last-","dir":"Reference","previous_headings":"","what":"Method last_()","title":"GbifQueue — GbifQueue","text":"Get last job queue. jobs, returns empty list","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$last_()"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"last job empty list","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-jobs-","dir":"Reference","previous_headings":"","what":"Method jobs()","title":"GbifQueue — GbifQueue","text":"Get number jobs queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$jobs()"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"GbifQueue — GbifQueue","text":"(integer) number jobs","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GbifQueue — GbifQueue","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"GbifQueue — GbifQueue","text":"","code":"GbifQueue$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"GbifQueue — GbifQueue","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/GbifQueue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GbifQueue — GbifQueue","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) { # dont run in automated example runs, too costly x <- GbifQueue$new(   occ_download(pred('taxonKey', 3119195), pred(\"year\", 1976)),   occ_download(pred('taxonKey', 3119195), pred(\"year\", 2001)),   occ_download(pred('taxonKey', 3119195), pred(\"year\", 2001), pred_lte(\"month\", 8)),   occ_download(pred('taxonKey', 3119195), pred(\"year\", 2004)),   occ_download(pred('taxonKey', 3119195), pred(\"year\", 2005)) ) x x$reqs x$add_all() x x$jobs() x x$remove(x$reqs[[1]]) x x$reqs[[1]]$run() x$reqs[[1]]$result  # pre-prepared download request z <- occ_download_prep(   pred_in(\"basisOfRecord\", c(\"HUMAN_OBSERVATION\",\"OBSERVATION\")),   pred(\"hasCoordinate\", TRUE),   pred(\"hasGeospatialIssue\", FALSE),   pred(\"year\", 1993),   user = \"foo\", pwd = \"bar\", email = \"foo@bar.com\" ) out <- GbifQueue$new(.list = list(z)) out out$reqs }} # }"},{"path":"https://docs.ropensci.org/rgbif/reference/blanktheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 theme — blanktheme","title":"Custom ggplot2 theme — blanktheme","text":"Custom ggplot2 theme","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/blanktheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 theme — blanktheme","text":"","code":"blanktheme()"},{"path":"https://docs.ropensci.org/rgbif/reference/check_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Check input WKT — check_wkt","title":"Check input WKT — check_wkt","text":"Check input WKT","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/check_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check input WKT — check_wkt","text":"","code":"check_wkt(wkt = NULL, skip_validate = FALSE)"},{"path":"https://docs.ropensci.org/rgbif/reference/check_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check input WKT — check_wkt","text":"wkt (character) one Well Known Text objects skip_validate (logical) whether skip wk::wk_problems call . Default: FALSE","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/check_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check input WKT — check_wkt","text":"","code":"if (FALSE) { # \\dontrun{ check_wkt('POLYGON((30.1 10.1, 10 20, 20 60, 60 60, 30.1 10.1))') check_wkt('POINT(30.1 10.1)') check_wkt('LINESTRING(3 4,10 50,20 25)')  # check many passed in at once check_wkt(c('POLYGON((30.1 10.1, 10 20, 20 60, 60 60, 30.1 10.1))',   'POINT(30.1 10.1)'))  # bad WKT # wkt <- 'POLYGON((30.1 10.1, 10 20, 20 60, 60 60, 30.1 a))' # check_wkt(wkt)  # many wkt's, semi-colon separated, for many repeated \"geometry\" args wkt <- \"POLYGON((-102.2 46.0,-93.9 46.0,-93.9 43.7,-102.2 43.7,-102.2 46.0)) ;POLYGON((30.1 10.1, 10 20, 20 40, 40 40, 30.1 10.1))\" check_wkt(gsub(\"\\n\", '', wkt)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/count_facet.html","id":null,"dir":"Reference","previous_headings":"","what":"Facetted count occurrence search. — count_facet","title":"Facetted count occurrence search. — count_facet","text":"Facetted count occurrence search.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/count_facet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facetted count occurrence search. — count_facet","text":"","code":"count_facet(keys = NULL, by = \"country\", countries = 10, removezeros = FALSE)"},{"path":"https://docs.ropensci.org/rgbif/reference/count_facet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facetted count occurrence search. — count_facet","text":"keys (numeric) GBIF keys, vector. optional (character) One georeferenced, basisOfRecord, country, publishingCountry. default: country countries (numeric) Number countries facet , vector country names. default: 10 removezeros (logical) remove zeros ? default: FALSE","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/count_facet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facetted count occurrence search. — count_facet","text":"","code":"if (FALSE) { # \\dontrun{ # Select number of countries to facet on count_facet(by='country', countries=3, removezeros = TRUE) # Or, pass in country names count_facet(by='country', countries='AR', removezeros = TRUE)  spplist <- c('Geothlypis trichas','Tiaris olivacea','Pterodroma axillaris',              'Calidris ferruginea','Pterodroma macroptera',              'Gallirallus australis',              'Falco cenchroides','Telespiza cantans','Oreomystis bairdi',              'Cistothorus palustris') keys <- sapply(spplist,   function(x) name_backbone(x, rank=\"species\")$usageKey) count_facet(keys, by='country', countries=3, removezeros = TRUE) count_facet(keys, by='country', countries=3, removezeros = FALSE) count_facet(by='country', countries=20, removezeros = TRUE) count_facet(keys, by='basisOfRecord', countries=5, removezeros = TRUE)  # get occurrences by georeferenced state ## across all records count_facet(by='georeferenced')  ## by keys count_facet(keys, by='georeferenced')  # by basisOfRecord count_facet(by=\"basisOfRecord\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/create_gist.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that takes a list of files and creates payload for API — create_gist","title":"Function that takes a list of files and creates payload for API — create_gist","text":"function defunct.  See package gistr similar functionality.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/create_gist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that takes a list of files and creates payload for API — create_gist","text":"","code":"create_gist(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for more obscure dataset metadata. — dataset","title":"Search for more obscure dataset metadata. — dataset","text":"Search obscure dataset metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for more obscure dataset metadata. — dataset","text":"","code":"dataset(   country = NULL,   type = NULL,   identifierType = NULL,   identifier = NULL,   machineTagNamespace = NULL,   machineTagName = NULL,   machineTagValue = NULL,   modified = NULL,   query = NULL,   deleted = FALSE,   limit = NULL,   start = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for more obscure dataset metadata. — dataset","text":"country 2-letter country code (per ISO-3166-1) country publishing dataset. type primary type dataset. Available values : OCCURRENCE, CHECKLIST, METADATA, SAMPLING_EVENT, MATERIAL_ENTITY. identifierType identifier type identifier parameter. Available values : URL, LSID, HANDLER, DOI, UUID, FTP, URI, UNKNOWN, GBIF_PORTAL, GBIF_NODE, GBIF_PARTICIPANT, GRSCICOLL_ID, GRSCICOLL_URI, IH_IRN, ROR, GRID, CITES, SYMBIOTA_UUID, WIKIDATA, NCBI_BIOCOLLECTION. identifier identifier type given identifierType parameter. machineTagNamespace Filters entities machine tag specified namespace. machineTagName Filters entities machine tag specified name (use combination machineTagNamespace parameter). machineTagValue Filters entities machine tag specified value (use combination machineTagNamespace machineTagName parameters). modified modified date dataset. Accepts ranges ” can used wildcard, e.g.:modified=2023-04-01, query Simple full text search parameter. value parameter can simple word phrase. Wildcards supported. deleted Logical specifying whether return deleted datasets. limit Controls number results page. start Determines start search results. curlopts options passed crul::HttpClient.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for more obscure dataset metadata. — dataset","text":"list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for more obscure dataset metadata. — dataset","text":"function allows search obscure dataset metadata might possible dataset_search(). example, searching registry machinetags.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for more obscure dataset metadata. — dataset","text":"","code":"if (FALSE) { # \\dontrun{ dataset(limit=3) dataset(country=\"US\",limit=3) dataset(type=\"CHECKLIST\",limit=3) dataset(identifierType = \"URL\",limit=3) dataset(identifier = 168,limit=3) dataset(machineTagNamespace = \"metasync.gbif.org\",limit=3) dataset(machineTagName = \"datasetTitle\",limit=3) dataset(machineTagValue = \"Borkhart\",limit=3) dataset(modified = \"2023-04-01\", limit=3)  dataset(q = \"dog\", limit=3)  dataset(deleted=TRUE,limit=3) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a GBIF dataset from a doi — dataset_doi","title":"Get a GBIF dataset from a doi — dataset_doi","text":"Get GBIF dataset doi","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a GBIF dataset from a doi — dataset_doi","text":"","code":"dataset_doi(doi = NULL, limit = 20, start = NULL, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a GBIF dataset from a doi — dataset_doi","text":"doi doi dataset wish lookup. limit Controls number results page. start Determines offset search results. curlopts options passed crul::HttpClient.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a GBIF dataset from a doi — dataset_doi","text":"list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a GBIF dataset from a doi — dataset_doi","text":"function allows dataset lookup using doi. aware doi one dataset associated .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a GBIF dataset from a doi — dataset_doi","text":"","code":"if (FALSE) { # \\dontrun{ dataset_doi('10.15468/igasai') } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_gridded.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a dataset is gridded — dataset_gridded","title":"Check if a dataset is gridded — dataset_gridded","text":"Check dataset gridded","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_gridded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a dataset is gridded — dataset_gridded","text":"","code":"dataset_gridded(   uuid = NULL,   min_dis = 0.05,   min_per = 50,   min_dis_count = 30,   return = \"logical\",   warn = TRUE )"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_gridded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a dataset is gridded — dataset_gridded","text":"uuid (vector) character vector GBIF datasetkey uuids. min_dis (numeric) (default 0.02) Minimum distance degrees accept gridded. min_per (integer)(default 50%) Minimum percentage points nearest neighbor distance considered gridded. min_dis_count (default 30) Minimum number unique points accept assessment 'griddyness'. return (character) (default \"logical\"). Choice \"data\" return data.frame information \"logical\" return just TRUE FALSE indicating whether dataset considered 'gridded\". warn (logical) indicates whether warn missing values bad values.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_gridded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a dataset is gridded — dataset_gridded","text":"logical vector indicating whether dataset considered gridded. return=\"data\", data.frame information.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_gridded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a dataset is gridded — dataset_gridded","text":"Gridded datasets known problem GBIF. Many datasets equally-spaced points regular pattern. datasets usually systematic national surveys data taken atlas (“-called rasterized collection designs”). function uses percentage unique lat-long points common nearest neighbor distance identify gridded datasets. https://data-blog.gbif.org/post/finding-gridded-datasets/ recommend keeping default values parameters.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_gridded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a dataset is gridded — dataset_gridded","text":"","code":"if (FALSE) { # \\dontrun{  dataset_gridded(\"9070a460-0c6e-11dd-84d2-b8a03c50a862\") dataset_gridded(c(\"9070a460-0c6e-11dd-84d2-b8a03c50a862\",                \"13b70480-bd69-11dd-b15f-b8a03c50a862\"))   } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_list_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"List datasets that are deleted or have no endpoint. — dataset_list_funs","title":"List datasets that are deleted or have no endpoint. — dataset_list_funs","text":"List datasets deleted endpoint.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_list_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List datasets that are deleted or have no endpoint. — dataset_list_funs","text":"","code":"dataset_duplicate(limit = 20, start = NULL, curlopts = list())  dataset_noendpoint(limit = 20, start = NULL, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_list_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List datasets that are deleted or have no endpoint. — dataset_list_funs","text":"limit Controls number results page. start Determines start search results. curlopts options passed crul::HttpClient.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_list_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List datasets that are deleted or have no endpoint. — dataset_list_funs","text":"list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_list_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List datasets that are deleted or have no endpoint. — dataset_list_funs","text":"Get list deleted datasets datasets endpoint. get full parameters aside limit start accepted.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_list_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List datasets that are deleted or have no endpoint. — dataset_list_funs","text":"","code":"if (FALSE) { # \\dontrun{ dataset_noendpoint(limit=3) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for dataset metadata. — dataset_search","title":"Search for dataset metadata. — dataset_search","text":"Search dataset metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for dataset metadata. — dataset_search","text":"","code":"dataset_export(   query = NULL,   type = NULL,   publishingCountry = NULL,   subtype = NULL,   license = NULL,   keyword = NULL,   publishingOrg = NULL,   hostingOrg = NULL,   endorsingNodeKey = NULL,   decade = NULL,   projectId = NULL,   hostingCountry = NULL,   networkKey = NULL,   doi = NULL )  dataset_search(   query = NULL,   type = NULL,   publishingCountry = NULL,   subtype = NULL,   license = NULL,   keyword = NULL,   publishingOrg = NULL,   hostingOrg = NULL,   endorsingNodeKey = NULL,   decade = NULL,   projectId = NULL,   hostingCountry = NULL,   networkKey = NULL,   doi = NULL,   facet = NULL,   facetLimit = NULL,   facetOffset = NULL,   facetMincount = NULL,   facetMultiselect = NULL,   limit = 100,   start = NULL,   description = FALSE,   curlopts = list() )  dataset_suggest(   query = NULL,   type = NULL,   publishingCountry = NULL,   subtype = NULL,   license = NULL,   keyword = NULL,   publishingOrg = NULL,   hostingOrg = NULL,   endorsingNodeKey = NULL,   decade = NULL,   projectId = NULL,   hostingCountry = NULL,   networkKey = NULL,   doi = NULL,   limit = 100,   start = NULL,   description = FALSE,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for dataset metadata. — dataset_search","text":"query Simple full text search parameter. value parameter can simple word phrase. Wildcards supported. type primary type dataset. Available values: \"OCCURRENCE\", \"CHECKLIST\", \"METADATA\", \"SAMPLING_EVENT\", \"MATERIAL_ENTITY\". publishingCountry Filters datasets owning organization's country given ISO 639-1 (2 letter) country code. subtype sub-type dataset.sub-type dataset. Available values: \"TAXONOMIC_AUTHORITY\", \"NOMENCLATOR_AUTHORITY\", \"INVENTORY_THEMATIC\", \"INVENTORY_REGIONAL\", \"GLOBAL_SPECIES_DATASET\", \"DERIVED_FROM_OCCURRENCE\", \"SPECIMEN\", \"OBSERVATION\". license dataset's licence. Available values: \"CC0_1_0\", \"CC_BY_4_0\", \"CC_BY_NC_4_0\", \"UNSPECIFIED\", \"UNSUPPORTED\". keyword Filters datasets case insensitive plain text keyword. search done merged collection tags, dataset keywordCollections temporalCoverages. publishingOrg Filters datasets publishing organization UUID key. hostingOrg Filters datasets hosting organization UUID key endorsingNodeKey Node UUID key endorsed dataset's publisher. decade Filters datasets temporal coverage broken decades. Decades given full year, e.g. 1880, 1960, 2000, etc, return datasets wholly contained decade well cover entire decade . Ranges can used like \"1800,1900\". projectId Filter facet based project ID given dataset. dataset can project id result project. Multiple datasets can project id. hostingCountry Filters datasets hosting organization's country given ISO 639-1 (2 letter) country code. networkKey Filters network UUID associated dataset. doi DOI dataset. facet facet name used retrieve frequent values field. facetLimit Facet parameters allow paging requests using parameters facetOffset facetLimit. facetOffset Facet parameters allow paging requests using parameters facetOffset facetLimit facetMincount Used combination facet parameter. facetMultiselect Used combination facet parameter. limit Controls number results page. Using high value overwritten default maximum threshold, depending service. Sensible defaults used may omitted. start Determines offset search results. limit 20 offset 40 get third page 20 results. services maximum offset. description Logical whether return descriptions. curlopts options passed crul::HttpClient.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for dataset metadata. — dataset_search","text":"list dataset_search(). tibble dataset_export().","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for dataset metadata. — dataset_search","text":"dataset_search() searches returns metadata GBIF datasets registry. function search occurrence data, metadata datasets contain may contain occurrence data. also searches dataset types, checklist metadata datasets. sample results returned. dataset_export()  function download tibble results dataset_search(). function primarily useful want full results dataset_search(). Use dataset_search(facet=\"x\",limit=0)$facets get simple group counts different parameters.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for dataset metadata. — dataset_search","text":"https://techdocs.gbif.org/en/openapi/v1/registry#/Datasets/searchDatasets","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for dataset metadata. — dataset_search","text":"","code":"if (FALSE) { # \\dontrun{ # search metadata on all datasets and return a sample dataset_search() # dataset_export() # download info on all +90K datasets   dataset_search(publishingCountry = \"US\") dataset_search(type = \"OCCURRENCE\")  dataset_search(keyword = \"bird\") dataset_search(subtype = \"TAXONOMIC_AUTHORITY\")  dataset_search(license = \"CC0_1_0\")  dataset_search(query = \"frog\")  dataset_search(publishingCountry = \"UA\")  dataset_search(publishingOrg = \"e2e717bf-551a-4917-bdc9-4fa0f342c530\")  dataset_search(hostingOrg = \"7ce8aef0-9e92-11dc-8738-b8a03c50a862\")  dataset_search(decade=\"1890,1990\",limit=5) dataset_search(projectId = \"GRIIS\")  dataset_search(hostingCountry = \"NO\")  dataset_search(networkKey = \"99d66b6c-9087-452f-a9d4-f15f2c2d0e7e\")  dataset_search(doi='10.15468/aomfnb')   # search multiple values  dataset_search(projectId = \"GRIIS;BID-AF2020-140-REG\")  dataset_search(hostingCountry = \"NO;SE\") dataset_search(doi=\"10.15468/aomfnb;10.15468/igasai\")  # multiple filters dataset_search(license = \"CC0_1_0\",subtype = \"TAXONOMIC_AUTHORITY\") # dataset_export(license = \"CC0_1_0\",subtype = \"TAXONOMIC_AUTHORITY\")  # using dataset export to get all datasets  dataset_export(decade=\"1800,1900\") dataset_export(projectId=\"GRIIS\")  # get simple group by counts  dataset_search(facet=\"type\",limit=0,facetLimit=5)$facets  dataset_search(facet=\"publishingCountry\",limit=0,facetLimit=5)$facets dataset_search(facet=\"license\",limit=0,facetLimit=5, facetMincount=10000)  } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataset metadata using a datasetkey — dataset_uuid_funs","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"Get dataset metadata using datasetkey","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"","code":"dataset_get(uuid = NULL, curlopts = list())  dataset_process(uuid = NULL, limit = 20, start = NULL, curlopts = list())  dataset_networks(uuid = NULL, limit = 20, start = NULL, curlopts = list())  dataset_constituents(uuid = NULL, limit = 20, start = NULL, curlopts = list())  dataset_comment(uuid = NULL, curlopts = list())  dataset_contact(uuid = NULL, curlopts = list())  dataset_endpoint(uuid = NULL, curlopts = list())  dataset_identifier(uuid = NULL, curlopts = list())  dataset_machinetag(uuid = NULL, curlopts = list())  dataset_tag(uuid = NULL, curlopts = list())  dataset_metrics(uuid = NULL, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"uuid GBIF datasetkey uuid. curlopts options passed crul::HttpClient. limit Number records return. start Record number start .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"tibble list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"dataset_metrics() can used checklist type datasets.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"https://techdocs.gbif.org/en/openapi/v1/registry","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/dataset_uuid_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dataset metadata using a datasetkey — dataset_uuid_funs","text":"","code":"if (FALSE) { # \\dontrun{ dataset_get(\"38b4c89f-584c-41bb-bd8f-cd1def33e92f\") dataset_process(\"38b4c89f-584c-41bb-bd8f-cd1def33e92f\",limit=3) dataset_networks(\"3dab037f-a520-4bc3-b888-508755c2eb52\") dataset_constituents(\"7ddf754f-d193-4cc9-b351-99906754a03b\",limit=3) dataset_comment(\"2e4cc37b-302e-4f1b-bbbb-1f674ff90e14\") dataset_contact(\"7ddf754f-d193-4cc9-b351-99906754a03b\") dataset_endpoint(\"7ddf754f-d193-4cc9-b351-99906754a03b\") dataset_identifier(\"7ddf754f-d193-4cc9-b351-99906754a03b\") dataset_machinetag(\"7ddf754f-d193-4cc9-b351-99906754a03b\") dataset_tag(\"c47f13c1-7427-45a0-9f12-237aad351040\") dataset_metrics(\"7ddf754f-d193-4cc9-b351-99906754a03b\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for datasets and dataset metadata. — datasets","title":"Search for datasets and dataset metadata. — datasets","text":"Search datasets dataset metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for datasets and dataset metadata. — datasets","text":"","code":"datasets(   data = \"all\",   type = NULL,   uuid = NULL,   query = NULL,   id = NULL,   limit = 100,   start = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for datasets and dataset metadata. — datasets","text":"data type data get. One : 'organization', 'contact', 'endpoint', 'identifier', 'tag', 'machinetag', 'comment', 'constituents', 'document', 'metadata', 'deleted', 'duplicate', 'subDataset', 'withNoEndpoint', special ''. Default: type Type dataset. Options: include occurrence, checklist, metadata, sampling_event. uuid UUID data node provider. must specified data anything query Query term(s). used data=id metadata document id. limit Number records return. Default: 100. Maximum: 1000. start Record number start . Default: 0. Use combination limit page results. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for datasets and dataset metadata. — datasets","text":"list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/datasets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for datasets and dataset metadata. — datasets","text":"https://www.gbif.org/developer/registry#datasets","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for datasets and dataset metadata. — datasets","text":"","code":"if (FALSE) { # \\dontrun{ datasets(limit=5) datasets(type=\"occurrence\", limit=10) datasets(uuid=\"a6998220-7e3a-485d-9cd6-73076bd85657\") datasets(data='contact', uuid=\"a6998220-7e3a-485d-9cd6-73076bd85657\") datasets(data='metadata', uuid=\"a6998220-7e3a-485d-9cd6-73076bd85657\") datasets(data='metadata', uuid=\"a6998220-7e3a-485d-9cd6-73076bd85657\",   id=598) datasets(data=c('deleted','duplicate')) datasets(data=c('deleted','duplicate'), limit=1)  # curl options datasets(data=c('deleted','duplicate'), curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/density_spplist.html","id":null,"dir":"Reference","previous_headings":"","what":"The density web service provides access to records showing the density of occurrence records from the GBIF Network by one-degree cell. — density_spplist","title":"The density web service provides access to records showing the density of occurrence records from the GBIF Network by one-degree cell. — density_spplist","text":"function defunct","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/density_spplist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density web service provides access to records showing the density of occurrence records from the GBIF Network by one-degree cell. — density_spplist","text":"","code":"density_spplist(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/densitylist.html","id":null,"dir":"Reference","previous_headings":"","what":"The density web service provides access to records showing the density of occurrence records from the GBIF Network by one-degree cell. — densitylist","title":"The density web service provides access to records showing the density of occurrence records from the GBIF Network by one-degree cell. — densitylist","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/densitylist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density web service provides access to records showing the density of occurrence records from the GBIF Network by one-degree cell. — densitylist","text":"","code":"densitylist(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a derived dataset for citation. — derived_dataset","title":"Register a derived dataset for citation. — derived_dataset","text":"Register derived dataset citation.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a derived dataset for citation. — derived_dataset","text":"","code":"derived_dataset(   citation_data = NULL,   title = NULL,   description = NULL,   source_url = NULL,   gbif_download_doi = NULL,   user = NULL,   pwd = NULL,   curlopts = list() )  derived_dataset_prep(   citation_data = NULL,   title = NULL,   description = NULL,   source_url = NULL,   gbif_download_doi = NULL,   user = NULL,   pwd = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a derived dataset for citation. — derived_dataset","text":"citation_data (required) data.frame two columns. first column GBIF datasetkey uuids second column occurrence counts datasets, representing contribution dataset final derived dataset. title (required) title derived dataset. description (required) description dataset. Perhaps describing created. source_url (required) link dataset stored. gbif_download_doi (optional) DOI original GBIF download. user (required) GBIF username. pwd (required) GBIF password. curlopts list arguments pass curl.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a derived dataset for citation. — derived_dataset","text":"list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a derived dataset for citation. — derived_dataset","text":"Create citable DOI dataset derived GBIF mediated occurrences. Use-case (1) dataset obtained occ_search() never returned citable DOI, want cite data research paper. Use-case (2) dataset obtained using occ_download() got DOI, data underwent extensive filtering using CoordinateCleaner cleaning pipeline. case sure fill original gbif_download_doi. Use-case (3) dataset generated using GBIF cloud export want DOI cite research paper. Use derived_dataset create custom citable meta-data description importantly DOI link external archive (e.g. Zenodo) datasets involved research analysis. fields (except gbif_download_doi) required registration work. recommend run derived_dataset_prep() check registration details making final derived_dataset().","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Register a derived dataset for citation. — derived_dataset","text":"rgbif functions require GBIF credentials. user pwd parameters, can set one three ways: Set .Renviron/.bash_profile (similar) file names GBIF_USER, GBIF_PWD, GBIF_EMAIL Set .Rprofile file names gbif_user gbif_pwd. Simply pass strings parameters function call. strongly recommend first option - storing details environment variables - widely used way store secrets. can edit .Renviron usethis::edit_r_environ(). editing, .Renviron file look something like ... GBIF_USER=\"jwaller\" GBIF_PWD=\"fakepassword123\" GBIF_EMAIL=\"jwaller@gbif.org\" See ?Startup help.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Register a derived dataset for citation. — derived_dataset","text":"https://data-blog.gbif.org/post/derived-datasets/ https://www.gbif.org/derived-dataset/","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/derived_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a derived dataset for citation. — derived_dataset","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(  datasetKey = c(  \"3ea36590-9b79-46a8-9300-c9ef0bfed7b8\",  \"630eb55d-5169-4473-99d6-a93396aeae38\",  \"806bf7d4-f762-11e1-a439-00145eb45e9a\"),  count = c(3, 1, 2781)  )  ## If output looks ok, run derived_dataset to register the dataset  derived_dataset_prep(  citation_data = data,  title = \"Test for derived dataset\",  description = \"This data was filtered using a fake protocol\",  source_url = \"https://zenodo.org/record/4246090#.YPGS2OgzZPY\"  )  #  derived_dataset( #  citation_data = data, #  title = \"Test for derived dataset\", #  description = \"This data was filtered using a fake protocol\", #  source_url = \"https://zenodo.org/record/4246090#.YPGS2OgzZPY\" #  )  ## Example with occ_search and dplyr # library(dplyr)  # citation_data <- occ_search(taxonKey=212, limit=20)$data %>% #   group_by(datasetKey) %>%  #   count()  # # You would still need to upload your data to Zenodo or something similar  # derived_dataset_prep( #   citation_data = citation_data, #   title=\"Bird data downloaded for test\", #   description=\"This data was downloaded using rgbif::occ_search and was  #   later uploaded to Zenodo.\", #   source_url=\"https://zenodo.org/record/4246090#.YPGS2OgzZPY\", #   gbif_download_doi = NULL, # ) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Download predicate DSL (domain specific language) — download_predicate_dsl","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"Download predicate DSL (domain specific language)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"","code":"pred(key, value)  pred_gt(key, value)  pred_gte(key, value)  pred_lt(key, value)  pred_lte(key, value)  pred_not(...)  pred_like(key, value)  pred_within(value)  pred_isnull(key)  pred_notnull(key)  pred_or(..., .list = list())  pred_and(..., .list = list())  pred_in(key, value)  pred_default()"},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"key (character) key predicate. See \"Keys\" value (various) value predicate ..., .list pred_or() pred_and(), one objects class occ_predicate, created pred* function","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"predicate-methods-and-their-equivalent-types","dir":"Reference","previous_headings":"","what":"predicate methods and their equivalent types","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"pred* functions named 'type' operation , following terminology used GBIF, see https://www.gbif.org/developer/occurrence#predicates Function names given, equivalent GBIF type value (e.g., pred_gt greaterThan) following functions take one key one value: pred: equals pred_lt: lessThan pred_lte: lessThanOrEquals pred_gt: greaterThan pred_gte: greaterThanOrEquals pred_like: like following function geospatial queries, accepts WKT string: pred_within: within following function stating want key null, accepts one key: pred_notnull: isNotNull following function stating want key null. pred_isnull : isNull following two functions accept multiple individual predicates, separating either \"\" \"\": pred_and: pred_or: predicate accepts one predicate; , negates whatever predicate passed , e.g., taxonKey 12345: pred_not: following function special accepts single key many values; stating want search values: pred_in: following function apply commonly used defaults. pred_default Using pred_default() equivalent running:","code":"pred_and(    pred(\"HAS_GEOSPATIAL_ISSUE\",FALSE),    pred(\"HAS_COORDINATE\",TRUE),    pred(\"OCCURRENCE_STATUS\",\"PRESENT\"),    pred_not(pred_in(\"BASIS_OF_RECORD\",     c(\"FOSSIL_SPECIMEN\",\"LIVING_SPECIMEN\")))   )"},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"what-happens-internally","dir":"Reference","previous_headings":"","what":"What happens internally","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"Internally, input pred* functions turns JSON sent GBIF. example ... pred_in(\"taxonKey\", c(2480946, 5229208)) gives:   pred_gt(\"elevation\", 5000) gives:   pred_or(pred(\"taxonKey\", 2977832), pred(\"taxonKey\", 2977901)) gives:","code":"{    \"type\": \"in\",    \"key\": \"TAXON_KEY\",    \"values\": [\"2480946\", \"5229208\"]  } {    \"type\": \"greaterThan\",    \"key\": \"ELEVATION\",    \"value\": \"5000\" } {   \"type\": \"or\",   \"predicates\": [      {        \"type\": \"equals\",        \"key\": \"TAXON_KEY\",        \"value\": \"2977832\"      },      {        \"type\": \"equals\",        \"key\": \"TAXON_KEY\",        \"value\": \"2977901\"      }   ] }"},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"keys","dir":"Reference","previous_headings":"","what":"Keys","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"Acceptable arguments key parameter (version key parens must sent pass query via body parameter; see examples). can also use 'ALL_CAPS' version key prefer. Open issue GitHub repository package know key supported yet. taxonKey (TAXON_KEY) acceptedTaxonKey (ACCEPTED_TAXON_KEY) kingdomKey (KINGDOM_KEY) phylumKey (PHYLUM_KEY) classKey (CLASS_KEY) orderKey (ORDER_KEY) familyKey (FAMILY_KEY) genusKey (GENUS_KEY) subgenusKey (SUBGENUS_KEY) speciesKey (SPECIES_KEY) scientificName (SCIENTIFIC_NAME) country (COUNTRY) publishingCountry (PUBLISHING_COUNTRY) hasCoordinate (HAS_COORDINATE) hasGeospatialIssue (HAS_GEOSPATIAL_ISSUE) typeStatus (TYPE_STATUS) recordNumber (RECORD_NUMBER) lastInterpreted (LAST_INTERPRETED) modified (MODIFIED) continent (CONTINENT) geometry (GEOMETRY) basisOfRecord (BASIS_OF_RECORD) datasetKey (DATASET_KEY) datasetID/datasetId (DATASET_ID) eventDate (EVENT_DATE) catalogNumber (CATALOG_NUMBER) otherCatalogNumbers (OTHER_CATALOG_NUMBERS) year (YEAR) month (MONTH) decimalLatitude (DECIMAL_LATITUDE) decimalLongitude (DECIMAL_LONGITUDE) elevation (ELEVATION) depth (DEPTH) institutionCode (INSTITUTION_CODE) collectionCode (COLLECTION_CODE) issue (ISSUE) mediatype (MEDIA_TYPE) recordedBy (RECORDED_BY) recordedById/recordedByID (RECORDED_BY_ID) establishmentMeans (ESTABLISHMENT_MEANS) coordinateUncertaintyInMeters (COORDINATE_UNCERTAINTY_IN_METERS) gadm (GADM_GID) (Database Global Administrative Areas) level0Gid (GADM_LEVEL_0_GID) level1Gid (GADM_LEVEL_1_GID) level2Gid (GADM_LEVEL_2_GID) level3Gid (GADM_LEVEL_3_GID) stateProvince (STATE_PROVINCE) occurrenceStatus (OCCURRENCE_STATUS) publishingOrg (PUBLISHING_ORG) occurrenceId/occurrenceID (OCCURRENCE_ID) eventId/eventID (EVENT_ID) parentEventId/parentEventID (PARENT_EVENT_ID) identifiedBy (IDENTIFIED_BY) identifiedById/identifiedByID (IDENTIFIED_BY_ID) license (LICENSE) locality(LOCALITY) pathway (PATHWAY) preparations (PREPARATIONS) networkKey (NETWORK_KEY) organismId/organismID (ORGANISM_ID) organismQuantity (ORGANISM_QUANTITY) organismQuantityType (ORGANISM_QUANTITY_TYPE) protocol (PROTOCOL) relativeOrganismQuantity (RELATIVE_ORGANISM_QUANTITY) repatriated (REPATRIATED) sampleSizeUnit (SAMPLE_SIZE_UNIT) sampleSizeValue (SAMPLE_SIZE_VALUE) samplingProtocol (SAMPLING_PROTOCOL) verbatimScientificName (VERBATIM_SCIENTIFIC_NAME) taxonID/taxonId (TAXON_ID) taxonomicStatus (TAXONOMIC_STATUS) waterBody (WATER_BODY) iucnRedListCategory (IUCN_RED_LIST_CATEGORY) degreeOfEstablishment (DEGREE_OF_ESTABLISHMENT) isInCluster (IS_IN_CLUSTER) lifeStage (LIFE_STAGE) distanceFromCentroidInMeters (DISTANCE_FROM_CENTROID_IN_METERS) gbifId (GBIF_ID)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"Download predicates docs: https://www.gbif.org/developer/occurrence#predicates","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/download_predicate_dsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download predicate DSL (domain specific language) — download_predicate_dsl","text":"","code":"pred(\"taxonKey\", 3119195) #> <<gbif download - predicate>> #>   > type: equals, key: TAXON_KEY, value: 3119195 pred_gt(\"elevation\", 5000) #> <<gbif download - predicate>> #>   > type: greaterThan, key: ELEVATION, value: 5000 pred_gte(\"elevation\", 5000) #> <<gbif download - predicate>> #>   > type: greaterThanOrEquals, key: ELEVATION, value: 5000 pred_lt(\"elevation\", 1000) #> <<gbif download - predicate>> #>   > type: lessThan, key: ELEVATION, value: 1000 pred_lte(\"elevation\", 1000) #> <<gbif download - predicate>> #>   > type: lessThanOrEquals, key: ELEVATION, value: 1000 pred_within(\"POLYGON((-14 42, 9 38, -7 26, -14 42))\") #> <<gbif download - predicate>> #>   > type: within, key: geometry, value: POLYGON((-14 42, 9 38, -7 26, -14 42)) pred_and(pred_within(\"POLYGON((-14 42, 9 38, -7 26, -14 42))\"),   pred_gte(\"elevation\", 5000)) #> <<gbif download - predicate list>> #>   type: and #>   > type: within, key: geometry, value: POLYGON((-14 42, 9 38, -7 26, -14 42)) #>   > type: greaterThanOrEquals, key: ELEVATION, value: 5000 pred_or(pred_lte(\"year\", 1989), pred(\"year\", 2000)) #> <<gbif download - predicate list>> #>   type: or #>   > type: lessThanOrEquals, key: YEAR, value: 1989 #>   > type: equals, key: YEAR, value: 2000 pred_and(pred_lte(\"year\", 1989), pred(\"year\", 2000)) #> <<gbif download - predicate list>> #>   type: and #>   > type: lessThanOrEquals, key: YEAR, value: 1989 #>   > type: equals, key: YEAR, value: 2000 pred_in(\"taxonKey\", c(2977832, 2977901, 2977966, 2977835)) #> <<gbif download - predicate>> #>   > type: in, key: TAXON_KEY, value: 2977832,2977901,2977966,2977835 pred_in(\"basisOfRecord\", c(\"MACHINE_OBSERVATION\", \"HUMAN_OBSERVATION\")) #> <<gbif download - predicate>> #>   > type: in, key: BASIS_OF_RECORD, value: MACHINE_OBSERVATION,HUMAN_OBSERVATION pred_not(pred(\"taxonKey\", 729)) #> <<gbif download - predicate list>> #>   type: not #>   > type: equals, key: TAXON_KEY, value: 729 pred_like(\"catalogNumber\", \"PAPS5-560%\") #> <<gbif download - predicate>> #>   > type: like, key: CATALOG_NUMBER, value: PAPS5-560% pred_notnull(\"issue\") #> <<gbif download - predicate>> #>   > type: isNotNull, parameter: ISSUE pred(\"basisOfRecord\", \"LITERATURE\") #> <<gbif download - predicate>> #>   > type: equals, key: BASIS_OF_RECORD, value: LITERATURE pred(\"hasCoordinate\", TRUE) #> <<gbif download - predicate>> #>   > type: equals, key: HAS_COORDINATE, value: true pred(\"stateProvince\", \"California\") #> <<gbif download - predicate>> #>   > type: equals, key: STATE_PROVINCE, value: California pred(\"hasGeospatialIssue\", FALSE) #> <<gbif download - predicate>> #>   > type: equals, key: HAS_GEOSPATIAL_ISSUE, value: false pred_within(\"POLYGON((-14 42, 9 38, -7 26, -14 42))\") #> <<gbif download - predicate>> #>   > type: within, key: geometry, value: POLYGON((-14 42, 9 38, -7 26, -14 42)) pred_or(pred(\"taxonKey\", 2977832), pred(\"taxonKey\", 2977901),   pred(\"taxonKey\", 2977966)) #> <<gbif download - predicate list>> #>   type: or #>   > type: equals, key: TAXON_KEY, value: 2977832 #>   > type: equals, key: TAXON_KEY, value: 2977901 #>   > type: equals, key: TAXON_KEY, value: 2977966 pred_in(\"taxonKey\", c(2977832, 2977901, 2977966, 2977835)) #> <<gbif download - predicate>> #>   > type: in, key: TAXON_KEY, value: 2977832,2977901,2977966,2977835"},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads interface — downloads","title":"Downloads interface — downloads","text":"GBIF provides two ways get occurrence data: /occurrence/search route (see occ_search()), via /occurrence/download route (many functions, see ). occ_search() appropriate smaller data, occ_download*() functions appropriate larger data requests.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":"settings","dir":"Reference","previous_headings":"","what":"Settings","title":"Downloads interface — downloads","text":"use occ_download() kick download. need give function settings GBIF profile: user name, password, email. three settings required use function. can specify one three ways: Pass occ_download parameters Use R options: options either current R session using options() function, setting .Rprofile file, point read automatically Use environment variables: env vars either current R session using Sys.setenv() function, setting .Renviron/.bash_profile similar files, point read automatically","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":"beware","dir":"Reference","previous_headings":"","what":"BEWARE","title":"Downloads interface — downloads","text":"can perform many downloads, plan wisely. See Rate limiting .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":"rate-limiting","dir":"Reference","previous_headings":"","what":"Rate limiting","title":"Downloads interface — downloads","text":"try launch many downloads, receive 420 \"Enhance Calm\" response. less 100 total across GBIF users, can 3 running time. , user limited 1 . numbers subject change.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Downloads interface — downloads","text":"occ_download() - Start download occ_download_prep() - Prepare download request occ_download_queue() - Start many downloads queue occ_download_cached() - Check downloads already GBIF account occ_download_wait() - Re-run occ_download_meta() ready occ_download_meta() - Get metadata progress single download occ_download_list() - List downloads occ_download_cancel() - Cancel download occ_download_cancel_staged() - Cancels jobs status RUNNING PREPARING occ_download_get() - Retrieve download occ_download_import() - Import download local file system occ_download_datasets() - List datasets download occ_download_dataset_activity() - Lists downloads activity dataset Download query composer methods: See download_predicate_dsl","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":"query-length","dir":"Reference","previous_headings":"","what":"Query length","title":"Downloads interface — downloads","text":"GBIF limit 12,000 characters download query. means can pretty long query, point may lead error GBIF's side split query .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/downloads.html","id":"download-status","dir":"Reference","previous_headings":"","what":"Download status","title":"Downloads interface — downloads","text":"following statuses can found download: PREPARING: just submitted user awaiting processing (typically seconds) RUNNING: created (takes typically 1-15 minutes) FAILED: something unexpected went wrong KILLED: user decided abort job PREPARING RUNNING phase SUCCEEDED: download created user informed FILE_ERASED: download deleted according retention policy, see https://www.gbif.org/faq?question=--long---gbif-store-downloads","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get elevation for lat/long points from a data.frame or list of points. — elevation","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"Uses GeoNames web service","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"","code":"elevation(   input = NULL,   latitude = NULL,   longitude = NULL,   latlong = NULL,   elevation_model = \"srtm3\",   username = Sys.getenv(\"GEONAMES_USER\"),   key,   curlopts,   ... )"},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"input data.frame lat/long data. must columns decimalLatitude decimalLongitude. latitude vector latitude's. Must length longitude vector. longitude vector longitude's. Must length latitude vector. latlong vector lat/long pairs. See examples. elevation_model (character) one srtm3 (default), srtm1, astergdem, gtopo30. See \"Elevation models\" username (character) Required. GeoNames user name. See Details. key, curlopts defunct. see docs ... curl options passed crul::verb-GET see curl::curl_options() curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"new column named elevation_geonames supplied data.frame vector elevation location meters. Note data GBIF can already column named elevation, thus column add named differently.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"geonames-user-name","dir":"Reference","previous_headings":"","what":"GeoNames user name","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"get GeoNames user name, register account http://www.geonames.org/login - can enable account GeoNames webservice account page (http://www.geonames.org/manageaccount). enabled use webservice, can pass username username parameter. Better yet, store username .Renviron file, similar (e.g., .zshrc .bash_profile files) read via Sys.getenv() examples . default Sys.getenv(\"GEONAMES_USER\") username parameter.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"elevation-models","dir":"Reference","previous_headings":"","what":"Elevation models","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"srtm3: sample area: ca 90m x 90m result: single number giving elevation meters according srtm3, ocean areas masked \"data\" assigned value -32768 srtm1: sample area: ca 30m x 30m result: single number giving elevation meters according srtm1, ocean areas masked \"data\" assigned value -32768 astergdem (Aster Global Digital Elevation Model V2 2011): sample area: ca 30m x 30m, 83N 65S latitude result: single number giving elevation meters according aster gdem, ocean areas masked \"data\" assigned value -32768 gtopo30: sample area: ca 1km x 1km result: single number giving elevation meters according gtopo30, ocean areas masked \"data\" assigned value -9999","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"GeoNames http://www.geonames.org/export/web-services.html","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/elevation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get elevation for lat/long points from a data.frame or list of points. — elevation","text":"","code":"if (FALSE) { # \\dontrun{ user <- Sys.getenv(\"GEONAMES_USER\")  occ_key <- name_suggest('Puma concolor')$key[1] dat <- occ_search(taxonKey = occ_key, limit = 300, hasCoordinate = TRUE) head( elevation(dat$data, username = user) )  # Pass in a vector of lat's and a vector of long's elevation(latitude = dat$data$decimalLatitude[1:10],   longitude = dat$data$decimalLongitude[1:10],   username = user, verbose = TRUE)  # Pass in lat/long pairs in a single vector pairs <- list(c(31.8496,-110.576060), c(29.15503,-103.59828)) elevation(latlong=pairs, username = user)  # Pass on curl options pairs <- list(c(31.8496,-110.576060), c(29.15503,-103.59828)) elevation(latlong=pairs, username = user, verbose = TRUE)  # different elevation models lats <- dat$data$decimalLatitude[1:5] lons <- dat$data$decimalLongitude[1:5] elevation(latitude = lats, longitude = lons, elevation_model = \"srtm3\") elevation(latitude = lats, longitude = lons, elevation_model = \"srtm1\") elevation(latitude = lats, longitude = lons, elevation_model = \"astergdem\") elevation(latitude = lats, longitude = lons, elevation_model = \"gtopo30\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/enumeration.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerations. — enumeration","title":"Enumerations. — enumeration","text":"Many parts GBIF API make use enumerations, .e. controlled vocabularies specific topics - available via functions","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/enumeration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerations. — enumeration","text":"","code":"enumeration(x = NULL, curlopts = list())  enumeration_country(curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/enumeration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerations. — enumeration","text":"x given enumeration. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/enumeration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerations. — enumeration","text":"enumeration returns character vector, enumeration_country returns data.frame.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/enumeration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerations. — enumeration","text":"","code":"if (FALSE) { # \\dontrun{ # basic enumeration enumeration() enumeration(\"NameType\") enumeration(\"MetadataType\") enumeration(\"TypeStatus\")  # country enumeration enumeration_country()  # curl options enumeration(curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_bbox2wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to a Well Known Text polygon, and a WKT to a bounding box — gbif_bbox2wkt","title":"Convert a bounding box to a Well Known Text polygon, and a WKT to a bounding box — gbif_bbox2wkt","text":"Convert bounding box Well Known Text polygon, WKT bounding box","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_bbox2wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to a Well Known Text polygon, and a WKT to a bounding box — gbif_bbox2wkt","text":"","code":"gbif_bbox2wkt(minx = NA, miny = NA, maxx = NA, maxy = NA, bbox = NULL)  gbif_wkt2bbox(wkt = NULL)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_bbox2wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to a Well Known Text polygon, and a WKT to a bounding box — gbif_bbox2wkt","text":"minx (numeric) Minimum x value, western longitude miny (numeric) Minimum y value, southern latitude maxx (numeric) Maximum x value, eastern longitude maxy (numeric) Maximum y value, northern latitude bbox (numeric) vector length 4, elements: minx, miny, maxx, maxy wkt (character) Well Known Text object.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_bbox2wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box to a Well Known Text polygon, and a WKT to a bounding box — gbif_bbox2wkt","text":"gbif_bbox2wkt returns object class charactere, Well Known Text string form 'POLYGON((minx miny, maxx miny, maxx maxy, minx maxy, minx miny))'. gbif_wkt2bbox returns numeric vector length 4, like c(minx, miny, maxx, maxy)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_bbox2wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a bounding box to a Well Known Text polygon, and a WKT to a bounding box — gbif_bbox2wkt","text":"","code":"if (FALSE) { # \\dontrun{ # Convert a bounding box to a WKT ## Pass in a vector of length 4 with all values gbif_bbox2wkt(bbox=c(-125.0,38.4,-121.8,40.9))  ## Or pass in each value separately gbif_bbox2wkt(minx=-125.0, miny=38.4, maxx=-121.8, maxy=40.9)  # Convert a WKT object to a bounding box wkt <- \"POLYGON((-125 38.4,-125 40.9,-121.8 40.9,-121.8 38.4,-125 38.4))\" gbif_wkt2bbox(wkt) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get citation for datasets used — gbif_citation","title":"Get citation for datasets used — gbif_citation","text":"Get citation datasets used","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get citation for datasets used — gbif_citation","text":"","code":"gbif_citation(x)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get citation for datasets used — gbif_citation","text":"x (character) Result call occ_download_get(), occ_download_meta().","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get citation for datasets used — gbif_citation","text":"list S3 class assigned, used print method pretty print citation information. Though can unclass output just index named items needed.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_citation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get citation for datasets used — gbif_citation","text":"function deprecated use occ_search() occ_data() results, deprecated use datasetKeys gbifids. Instead, encourage use derived_dataset() instead. occ_download_get() occ_download_meta() results still supported.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_citation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get citation for datasets used — gbif_citation","text":"","code":"if (FALSE) { # \\dontrun{ # Downloads ## occ_download_get() # d1 <- occ_download(pred(\"country\", \"BG\"), pred_gte(\"year\", 2020)) # occ_download_meta(d1) # wait until status = succeeded # d1 <- occ_download_get(d1, overwrite = TRUE) # gbif_citation(d1)  ## occ_download_meta() # key <- \"0000122-171020152545675\" # res <- occ_download_meta(key) # gbif_citation(res) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","title":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","text":"Geocode lat-lon point(s) GBIF's set geo-polygons (experimental)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","text":"","code":"gbif_geocode(latitude = NULL, longitude = NULL)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","text":"latitude vector numeric latitude values -90 90. longitude vector numeric longitude values -180 180.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","text":"data.frame results GBIF gecoding service. latitude : input latitude longitude : input longitude index : original input rownumber id : polygon id geocode comes type : One following : \"Political\" (county codes), \"IHO\" (marine regions), \"SeaVox\" (marine regions), \"WGSRPD\" (tdwg regions), \"EEZ\", (national waters) \"GADM0\",\"GADM1\",\"GADM2\",\"GADM2\"(http://gadm.org/) title : name source polygon distance : distance polygon boarder function uses GBIF geocoder API guaranteed stable undocumented. , may return different data time, may rate-limited may stop working GBIF change service. Use function caution.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_geocode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","text":"http://gadm.org/ http://marineregions.org/ http://www.tdwg.org/standards/ http://api.gbif.org/v1/geocode/reverse?lat=0&lng=0","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode lat-lon point(s) with GBIF's set of geo-polygons (experimental) — gbif_geocode","text":"","code":"if (FALSE) { # \\dontrun{ # one pair  gbif_geocode(0,0) # or multiple pairs of points gbif_geocode(c(0,50),c(0,20))  } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues.html","id":null,"dir":"Reference","previous_headings":"","what":"List all GBIF issues and their codes. — gbif_issues","title":"List all GBIF issues and their codes. — gbif_issues","text":"Returns data.frame GBIF issues following columns: code: issue short code, e.g. gass84 code: issue full name, e.g. GEODETIC_DATUM_ASSUMED_WGS84 description: issue description type: issue type, either related occurrence name","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all GBIF issues and their codes. — gbif_issues","text":"","code":"gbif_issues()"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List all GBIF issues and their codes. — gbif_issues","text":"https://gbif.github.io/gbif-api/apidocs/org/gbif/api/vocabulary/OccurrenceIssue.html https://gbif.github.io/gbif-api/apidocs/org/gbif/api/vocabulary/NameUsageIssue.html","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup issue definitions and short codes — gbif_issues_lookup","title":"Lookup issue definitions and short codes — gbif_issues_lookup","text":"Lookup issue definitions short codes","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup issue definitions and short codes — gbif_issues_lookup","text":"","code":"gbif_issues_lookup(issue = NULL, code = NULL)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup issue definitions and short codes — gbif_issues_lookup","text":"issue Full name issue, e.g, CONTINENT_COUNTRY_MISMATCH code issue short code, e.g. 'ccm'","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_issues_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup issue definitions and short codes — gbif_issues_lookup","text":"","code":"gbif_issues_lookup(issue = 'CONTINENT_COUNTRY_MISMATCH') #>   code                      issue #> 2  ccm CONTINENT_COUNTRY_MISMATCH #>                                              description       type #> 2 The interpreted continent and country do not match up. occurrence gbif_issues_lookup(code = 'ccm') #>   code                      issue #> 2  ccm CONTINENT_COUNTRY_MISMATCH #>                                              description       type #> 2 The interpreted continent and country do not match up. occurrence gbif_issues_lookup(issue = 'COORDINATE_INVALID') #>   code              issue #> 5 cdiv COORDINATE_INVALID #>                                                               description #> 5 Coordinate value given in some form but GBIF is unable to interpret it. #>         type #> 5 occurrence gbif_issues_lookup(code = 'cdiv') #>   code              issue #> 5 cdiv COORDINATE_INVALID #>                                                               description #> 5 Coordinate value given in some form but GBIF is unable to interpret it. #>         type #> 5 occurrence"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_names.html","id":null,"dir":"Reference","previous_headings":"","what":"View highlighted terms in name results from GBIF. — gbif_names","title":"View highlighted terms in name results from GBIF. — gbif_names","text":"View highlighted terms name results GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View highlighted terms in name results from GBIF. — gbif_names","text":"","code":"gbif_names(input, output = NULL, browse = TRUE)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View highlighted terms in name results from GBIF. — gbif_names","text":"input Input output occ_search output Output folder path. given uses temporary folder. browse (logical) Browse output (default: TRUE)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View highlighted terms in name results from GBIF. — gbif_names","text":"","code":"if (FALSE) { # \\dontrun{ # browse=FALSE returns path to file gbif_names(name_lookup(query='snake', hl=TRUE), browse=FALSE)  (out <- name_lookup(query='canada', hl=TRUE, limit=5)) gbif_names(out) gbif_names(name_lookup(query='snake', hl=TRUE)) gbif_names(name_lookup(query='bird', hl=TRUE))  # or not highlight gbif_names(name_lookup(query='bird', limit=200)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_oai.html","id":null,"dir":"Reference","previous_headings":"","what":"GBIF registry data via OAI-PMH — gbif_oai","title":"GBIF registry data via OAI-PMH — gbif_oai","text":"GBIF registry data via OAI-PMH","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_oai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GBIF registry data via OAI-PMH — gbif_oai","text":"","code":"gbif_oai_identify(...)  gbif_oai_list_identifiers(   prefix = \"oai_dc\",   from = NULL,   until = NULL,   set = NULL,   token = NULL,   as = \"df\",   ... )  gbif_oai_list_records(   prefix = \"oai_dc\",   from = NULL,   until = NULL,   set = NULL,   token = NULL,   as = \"df\",   ... )  gbif_oai_list_metadataformats(id = NULL, ...)  gbif_oai_list_sets(token = NULL, as = \"df\", ...)  gbif_oai_get_records(ids, prefix = \"oai_dc\", as = \"parsed\", ...)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_oai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GBIF registry data via OAI-PMH — gbif_oai","text":"... Curl options passed httr::GET prefix (character) string specify metadata format OAI-PMH requests issued repository. default (\"oai_dc\") corresponds mandatory OAI unqualified Dublin Core metadata schema. (character) string giving datestamp used lower bound datestamp-based selective harvesting (.e., harvest records datestamps given range). Dates times must encoded using ISO 8601. trailing Z must used including time. OAI-PMH implies UTC data/time specifications. (character) Datestamp used upper bound, datestamp-based selective harvesting (.e., harvest records datestamps given range). set (character) set used selective harvesting (.e., harvest records given set). token (character) token previously provided server resume request last left . 50 max number records returned. loop internally get records asked . (character) return. One \"df\" (data.frame; default), \"list\" (get list), \"raw\" (raw text). gbif_oai_get_records, one \"parsed\" \"raw\" id, ids (character) OAI-PMH identifier record. Optional.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_oai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GBIF registry data via OAI-PMH — gbif_oai","text":"raw text, list data.frame, depending requested output via parameter","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_oai.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GBIF registry data via OAI-PMH — gbif_oai","text":"functions work GBIF registry data, via OAI-PMH protocol (https://www.openarchives.org/OAI/openarchivesprotocol.html)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_oai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GBIF registry data via OAI-PMH — gbif_oai","text":"","code":"if (FALSE) { # \\dontrun{ gbif_oai_identify()  today <- format(Sys.Date(), \"%Y-%m-%d\") gbif_oai_list_identifiers(from = today) gbif_oai_list_identifiers(set = \"country:NL\")  gbif_oai_list_records(from = today) gbif_oai_list_records(set = \"country:NL\")  gbif_oai_list_metadataformats() gbif_oai_list_metadataformats(id = \"9c4e36c1-d3f9-49ce-8ec1-8c434fa9e6eb\")  gbif_oai_list_sets() gbif_oai_list_sets(as = \"list\")  gbif_oai_get_records(\"9c4e36c1-d3f9-49ce-8ec1-8c434fa9e6eb\") ids <- c(\"9c4e36c1-d3f9-49ce-8ec1-8c434fa9e6eb\",          \"e0f1bb8a-2d81-4b2a-9194-d92848d3b82e\") gbif_oai_get_records(ids) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_photos.html","id":null,"dir":"Reference","previous_headings":"","what":"View photos from GBIF. — gbif_photos","title":"View photos from GBIF. — gbif_photos","text":"View photos GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_photos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View photos from GBIF. — gbif_photos","text":"","code":"gbif_photos(input, output = NULL, which = \"table\", browse = TRUE)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_photos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View photos from GBIF. — gbif_photos","text":"input Input output occ_search output Output folder path. given uses temporary folder. One map table (default). browse (logical) Browse output (default: TRUE)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_photos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View photos from GBIF. — gbif_photos","text":"max number photos can see =\"map\" ~160, cycle .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_photos.html","id":"beware","dir":"Reference","previous_headings":"","what":"BEWARE","title":"View photos from GBIF. — gbif_photos","text":"maps table view may show correctly using RStudio","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbif_photos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View photos from GBIF. — gbif_photos","text":"","code":"if (FALSE) { # \\dontrun{ res <- occ_search(mediaType = 'StillImage', limit = 100) gbif_photos(res) gbif_photos(res, which='map')  res <- occ_search(scientificName = \"Aves\", mediaType = 'StillImage',   limit=150) gbif_photos(res) gbif_photos(res, output = '~/barfoo') } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/gbifdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data.frame from occurrencelist, occurrencelist_many, or densitylist. — gbifdata","title":"Get data.frame from occurrencelist, occurrencelist_many, or densitylist. — gbifdata","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbifdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data.frame from occurrencelist, occurrencelist_many, or densitylist. — gbifdata","text":"","code":"gbifdata(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbifmap-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Github credentials from use in console — gbifmap","title":"Get Github credentials from use in console — gbifmap","text":"function defunct.  See package gistr similar functionality.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbifmap-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Github credentials from use in console — gbifmap","text":"","code":"gbifmap(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/gbifmap_dens.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a simple map to visualize GBIF data density data — gbifmap_dens","title":"Make a simple map to visualize GBIF data density data — gbifmap_dens","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbifmap_dens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a simple map to visualize GBIF data density data — gbifmap_dens","text":"","code":"gbifmap_dens(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/gbifmap_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a simple map to visualize GBIF point data. — gbifmap_list","title":"Make a simple map to visualize GBIF point data. — gbifmap_list","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gbifmap_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a simple map to visualize GBIF point data. — gbifmap_list","text":"","code":"gbifmap_list(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/get_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Github credentials from use in console — get_credentials","title":"Get Github credentials from use in console — get_credentials","text":"function defunct.  See package gistr similar functionality.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/get_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Github credentials from use in console — get_credentials","text":"","code":"get_credentials(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/gist.html","id":null,"dir":"Reference","previous_headings":"","what":"Post a file as a Github gist — gist","title":"Post a file as a Github gist — gist","text":"function defunct.  See package gistr similar functionality.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/gist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post a file as a Github gist — gist","text":"","code":"gist(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/installations.html","id":null,"dir":"Reference","previous_headings":"","what":"Installations metadata. — installations","title":"Installations metadata. — installations","text":"Installations metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/installations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Installations metadata. — installations","text":"","code":"installations(   data = \"all\",   uuid = NULL,   query = NULL,   identifier = NULL,   identifierType = NULL,   limit = 100,   start = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/installations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Installations metadata. — installations","text":"data type data get. One : 'contact', 'endpoint', 'dataset', 'comment', 'deleted', 'nonPublishing', special ''. Default: '' uuid UUID data node provider. must specified data anything ''. query Query nodes. used data=''. Ignored otherwise. identifier value parameter can simple string integer, e.g. identifier=120. parameter seem work right now. identifierType Used combination identifier parameter filter identifiers identifier type. See details. parameter seem work right now. limit Number records return. Default: 100. Maximum: 1000. start Record number start . Default: 0. Use combination limit page results. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/installations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Installations metadata. — installations","text":"identifierType options: DOI description. FTP description. GBIF_NODE Identifies node (e.g: DK Denmark, sp2000 Species 2000). GBIF_PARTICIPANT Participant identifier GBIF IMS Filemaker system. GBIF_PORTAL Indicates identifier originated auto_increment column portal.data_provider portal.data_resource table respectively. HANDLER description. LSID Reference controlled separate system, used example DOI. SOURCE_ID description. UNKNOWN description. URI description. URL description. UUID description.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/installations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Installations metadata. — installations","text":"https://www.gbif.org/developer/registry#installations","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/installations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Installations metadata. — installations","text":"","code":"if (FALSE) { # \\dontrun{ installations(limit=5) installations(query=\"france\", limit = 25) installations(uuid=\"b77901f9-d9b0-47fa-94e0-dd96450aa2b4\") installations(data='contact', uuid=\"2e029a0c-87af-42e6-87d7-f38a50b78201\") installations(data='endpoint', uuid=\"b77901f9-d9b0-47fa-94e0-dd96450aa2b4\") installations(data='dataset', uuid=\"b77901f9-d9b0-47fa-94e0-dd96450aa2b4\") installations(data='deleted', limit = 25) installations(data='deleted', limit=2) installations(data=c('deleted','nonPublishing'), limit=2) installations(identifierType='DOI', limit=2)  # Pass on curl options installations(data='deleted', curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/lit_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for literature that cites GBIF mediated data — lit_search","title":"Search for literature that cites GBIF mediated data — lit_search","text":"Search literature cites GBIF mediated data","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/lit_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for literature that cites GBIF mediated data — lit_search","text":"","code":"lit_search(   q = NULL,   countriesOfResearcher = NULL,   countriesOfCoverage = NULL,   literatureType = NULL,   relevance = NULL,   year = NULL,   topics = NULL,   datasetKey = NULL,   publishingOrg = NULL,   peerReview = NULL,   openAccess = NULL,   downloadKey = NULL,   doi = NULL,   journalSource = NULL,   journalPublisher = NULL,   flatten = TRUE,   limit = NULL,   curlopts = list() )  lit_count(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/lit_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for literature that cites GBIF mediated data — lit_search","text":"q (character) Simple full text search parameter. value parameter can simple word phrase. Wildcards supported. countriesOfResearcher (character) Country institution author affiliated, e.g. DK (Denmark). Country codes listed enumeration_country(). countriesOfCoverage (character) Country focus study, e.g. BR (Brazil). Country codes listed enumeration_country(). literatureType (character) Type literature (\"JOURNAL\", \"BOOK_SECTION\", \"WORKING_PAPER\", \"REPORT\", \"GENERIC\", \"THESIS\", \"CONFERENCE_PROCEEDINGS\", \"WEB_PAGE\"). relevance (character) publication relate GBIF. See details (\"GBIF_USED\", \"GBIF_MENTIONED\", \"GBIF_PUBLISHED\", \"GBIF_CITED\", \"GBIF_CITED\", \"GBIF_PUBLISHED\", \"GBIF_ACKNOWLEDGED\", \"GBIF_AUTHOR\"). year (integer) Year publication. topics (character) Topic publication. datasetKey (character) GBIF dataset uuid referenced publication. publishingOrg (character) Publisher uuid whose dataset referenced publication. peerReview (logical) publication undergone peer-review? openAccess (logical) publication Open Access? downloadKey (character) Download referenced publication. doi (character) Digital Object Identifier (DOI). journalSource (character) Journal publication. journalPublisher (character) Publisher journal. flatten (logical) lists resulting data flattened comma-seperated strings? limit many records return. limit=NULL fetch 10,000. curlopts list named curl options passed HttpClient. see curl::curl_options curl options. ... additional parameters passed lit_search","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/lit_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for literature that cites GBIF mediated data — lit_search","text":"named list two values: $data $meta. $data data.frame literature references.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/lit_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for literature that cites GBIF mediated data — lit_search","text":"function enables search literature indexed GBIF, including peer-reviewed papers, citing GBIF datasets downloads. literature API powers literature search GBIF. GBIF Secretariat maintains ongoing literature tracking programme, identifies research uses citations biodiversity information accessed GBIF’s global infrastructure. literature database, relevance refers publications relate GBIF following definitions: GBIF_USED : makes substantive use data quantitative analysis (e.g. ecological niche modelling) GBIF_CITED : cites qualitative fact derived data (e.g. given species found given country) GBIF_DISCUSSED : discusses GBIF infrastructure use data GBIF_PRIMARY : GBIF primary source data (longer applied) GBIF_ACKNOWLEDGED : acknowledges GBIF (use cite data) GBIF_PUBLISHED : describes talks data published GBIF GBIF_AUTHOR : authored GBIF staff GBIF_MENTIONED : unspecifically mentions GBIF GBIF portal GBIF_FUNDED : funded GBIF GBIF-managed funding programme following arguments can take multiple values: relevance countriesOfResearcher countriesOfCoverage literatureType topics datasetKey publishingOrg downloadKey doi journalSource journalPublisher flatten=TRUE, data returned flat data.frame complex column types (.e. lists data.frames). limit=NULL return 10,000 records. maximum value limit 10,000. filters used, first 1,000 records returned, limit must explicitly set limit=10000, get first 10,000 records case. lit_count() convenience wrapper, return number literature references certain lit_search() query. running lit_search()$meta$count.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/lit_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for literature that cites GBIF mediated data — lit_search","text":"","code":"if (FALSE) { # \\dontrun{ lit_search(q=\"bats\")$data  lit_search(datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\") lit_search(year=2020) lit_search(year=\"2011,2020\") # year ranges lit_search(relevance=c(\"GBIF_CITED\",\"GBIF_USED\")) # multiple values lit_search(relevance=c(\"GBIF_USED\",\"GBIF_CITED\"),  topics=c(\"EVOLUTION\",\"PHYLOGENETICS\")) lit_count() # total number of literature referencing GBIF lit_count(peerReview=TRUE) # number of citations of iNaturalist  lit_count(datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\") # number of peer-reviewed articles used GBIF mediated data lit_count(peerReview=TRUE,literatureType=\"JOURNAL\",relevance=\"GBIF_USED\")   # Typically what is meant by \"literature that uses GBIF\"  lit_search(peerReview=TRUE,literatureType=\"JOURNAL\",relevance=\"GBIF_USED\") lit_count(peerReview=TRUE,literatureType=\"JOURNAL\",relevance=\"GBIF_USED\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch maps of GBIF occurrences — map_fetch","title":"Fetch maps of GBIF occurrences — map_fetch","text":"function wrapper GBIF mapping api version 2.0. mapping API web map tile service making straightforward visualize GBIF content interactive maps, overlay content sources. returns tile maps number GBIF records per area unit can used variety ways, example interactive leaflet web maps. Map details specified number query parameters, optional. Full documentation GBIF mapping api can found https://www.gbif.org/developer/maps","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch maps of GBIF occurrences — map_fetch","text":"","code":"map_fetch(   source = \"density\",   x = 0:1,   y = 0,   z = 0,   format = \"@1x.png\",   srs = \"EPSG:4326\",   bin = NULL,   hexPerTile = NULL,   squareSize = NULL,   style = NULL,   taxonKey = NULL,   datasetKey = NULL,   country = NULL,   publishingOrg = NULL,   publishingCountry = NULL,   year = NULL,   basisOfRecord = NULL,   return = \"png\",   base_style = NULL,   plot_terra = TRUE,   curlopts = list(http_version = 2),   ... )"},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch maps of GBIF occurrences — map_fetch","text":"source (character) Either density fast, precalculated tiles, adhoc search. Default: density x (integer sequence) column. Default: 0:1 y (integer sequence) row. Default: 0 z (integer) zoom. Default: 0 format (character) data format, one : @Hx.png 256px raster tile @1x.png 512px raster tile (default) @2x.png 1024px raster tile @3x.png 2048px raster tile @4x.png 4096px raster tile srs (character) Spatial reference system. One : EPSG:3857 (Web Mercator) EPSG:4326 (WGS84 plate care?) EPSG:3575 (Arctic LAEA 10 degrees E) EPSG:3031 (Antarctic stereographic) bin (character) square hex aggregate occurrence counts squares hexagons. Points default. hexPerTile (integer) sets size hexagons (number horizontally across tile). squareSize (integer) sets size squares. Choose factor 4096 tessalate correctly: probably 8, 16, 32, 64, 128, 256, 512. style (character) raster tiles, choose available styles. Defaults classic.point source=\"density\" \"scaled.circle\" source=\"adhoc\". taxonKey (integer/numeric/character) search taxon key, can supply 1. datasetKey (character) search taxon key, can supply 1. country (character) search taxon key, can supply 1. publishingOrg (character) search taxon key, can supply 1. publishingCountry (character) search taxon key, can supply 1. year (integer) integer limits search certain year , passing vector integers, multiple years, example 1984 c(2016, 2017, 2018) 2010:2015 (years 2010 2015). optional basisOfRecord (character) one basis record states include records basis record. full list : c(\"OBSERVATION\", \"HUMAN_OBSERVATION\", \"MACHINE_OBSERVATION\", \"MATERIAL_SAMPLE\", \"PRESERVED_SPECIMEN\", \"FOSSIL_SPECIMEN\", \"LIVING_SPECIMEN\", \"LITERATURE\", \"UNKNOWN\"). return (character) Either \"png\" \"terra\". base_style (character)  style base map. plot_terra (logical) Set whether terra map default plotted. curlopts options passed crul::HttpClient ... additional arguments passed adhoc interface.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch maps of GBIF occurrences — map_fetch","text":"magick-image terra::SpatRaster  object.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch maps of GBIF occurrences — map_fetch","text":"default settings, return='png', return magick-image png. image composite image occurrence tiles fetched base map. map primarily useful high quality image occurrence records. args x y can integer sequences. example, x=0:3 y=0:1. Note tile index starts 0. Higher values z, produce tiles can fetched stitched together. Selecting high value x y produce blank image. Setting return='terra' return terra::SpatRaster  object. primarily useful interested underlying aggregated occurrence density data. See article","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fetch maps of GBIF occurrences — map_fetch","text":"https://www.gbif.org/developer/maps https://api.gbif.org/v2/map/demo.html https://api.gbif.org/v2/map/demo13.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch maps of GBIF occurrences — map_fetch","text":"John Waller Laurens Geffert laurensgeffert@gmail.com","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/map_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch maps of GBIF occurrences — map_fetch","text":"","code":"if (FALSE) { # \\dontrun{  # all occurrences map_fetch() # get artic map map_fetch(srs='EPSG:3031')  # only preserved specimens map_fetch(basisOfRecord=\"PRESERVED_SPECIMEN\")  # Map of occ in Great Britain map_fetch(z=3,y=1,x=7:8,country=\"GB\") # Peguins with artic projection map_fetch(srs='EPSG:3031',taxonKey=2481660,style='glacier.point',  base_style=\"gbif-dark\")  # occ from a long time ago map_fetch(year=1600)  # polygon style  map_fetch(style=\"iNaturalist.poly\",bin=\"hex\") # iNaturalist dataset plotted  map_fetch(datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\",   style=\"iNaturalist.poly\")   # use source=\"adhoc\" for more filters map_fetch(z=1,   source=\"adhoc\",   iucn_red_list_category=\"CR\",   style=\"scaled.circles\",   base_style='gbif-light')  # cropped map of Hawaii map_fetch(z=5,x=3:4,y=12,source=\"adhoc\",gadmGid=\"USA.12_1\")   } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Map Vector Tiles (MVT) — mvt_fetch","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"function wrapper GBIF mapping api version 2.0. mapping API web map tile service making straightforward visualize GBIF content interactive maps, overlay content sources. returns maps vector tiles number GBIF records per area unit can used variety ways, example interactive leaflet web maps. Map details specified number query parameters, optional. Full documentation GBIF mapping api can found https://www.gbif.org/developer/maps","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"","code":"mvt_fetch(   source = \"density\",   x = 0,   y = 0,   z = 0,   srs = \"EPSG:4326\",   bin = NULL,   hexPerTile = NULL,   squareSize = NULL,   style = \"classic.point\",   taxonKey = NULL,   datasetKey = NULL,   country = NULL,   publishingOrg = NULL,   publishingCountry = NULL,   year = NULL,   basisOfRecord = NULL,   ... )"},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"source (character) Either density fast, precalculated tiles, adhoc search. Default: density x (integer) column. Default: 0 y (integer) row. Default: 0 z (integer) zoom. Default: 0 srs (character) Spatial reference system output (input srs mvt GBIF always EPSG:3857). One : EPSG:3857 (Web Mercator) EPSG:4326 (WGS84 plate care?) EPSG:3575 (Arctic LAEA 10 degrees E) EPSG:3031 (Antarctic stereographic) bin (character) square hex aggregate occurrence counts squares hexagons. Points default. optional hexPerTile (integer) sets size hexagons (number horizontally across tile). optional squareSize (integer) sets size squares. Choose factor 4096 tessalate correctly: probably 8, 16, 32, 64, 128, 256, 512. optional style (character) raster tiles, choose available styles. Defaults classic.point. optional. WORK YET. taxonKey (integer/numeric/character) search taxon key, can supply 1. optional datasetKey (character) search taxon key, can supply 1. optional country (character) search taxon key, can supply 1. optional publishingOrg (character) search taxon key, can supply 1. optional publishingCountry (character) search taxon key, can supply 1. optional year (integer) integer limits search certain year , passing vector integers, multiple years, example 1984 c(2016, 2017, 2018) 2010:2015 (years 2010 2015). optional basisOfRecord (character) one basis record states include records basis record. full list : c(\"OBSERVATION\", \"HUMAN_OBSERVATION\", \"MACHINE_OBSERVATION\", \"MATERIAL_SAMPLE\", \"PRESERVED_SPECIMEN\", \"FOSSIL_SPECIMEN\", \"LIVING_SPECIMEN\", \"LITERATURE\", \"UNKNOWN\"). optional ... curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"sf object","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"function uses arguments passed generate query GBIF web map API. API returns web tile object png read converted R raster object. break values nbreaks generate custom colour palette web tile, bin corresponding one grey value. retrieval, raster reclassified actual break values. somewhat hacky nonetheless functional solution absence GBIF raster API implementation. add extent set projection output. can reproject retrieving output.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"https://www.gbif.org/developer/maps","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/mvt_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Map Vector Tiles (MVT) — mvt_fetch","text":"","code":"if (FALSE) { # \\dontrun{ if (  requireNamespace(\"sf\", quietly = TRUE) &&  requireNamespace(\"protolite\", quietly = TRUE) ) {   x <- mvt_fetch(taxonKey = 2480498, year = 2007:2011)   x      # gives an sf object   class(x)      # different srs   ## 3857   y <- mvt_fetch(taxonKey = 2480498, year = 2010, srs = \"EPSG:3857\")   y   ## 3031   z <- mvt_fetch(taxonKey = 2480498, year = 2010, srs = \"EPSG:3031\", verbose = TRUE)   z   # 3575   z <- mvt_fetch(taxonKey = 2480498, year = 2010, srs = \"EPSG:3575\")   z    # bin   x <- mvt_fetch(taxonKey = 212, year = 1998, bin = \"hex\",      hexPerTile = 30, style = \"classic-noborder.poly\")   x    # query with basisOfRecord   mvt_fetch(taxonKey = 2480498, year = 2010,     basisOfRecord = \"HUMAN_OBSERVATION\")   mvt_fetch(taxonKey = 2480498, year = 2010,     basisOfRecord = c(\"HUMAN_OBSERVATION\", \"LIVING_SPECIMEN\"))  } } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup names in the GBIF backbone taxonomy. — name_backbone","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"Lookup names GBIF backbone taxonomy.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"","code":"name_backbone(   name,   rank = NULL,   kingdom = NULL,   phylum = NULL,   class = NULL,   order = NULL,   family = NULL,   genus = NULL,   strict = FALSE,   verbose = FALSE,   start = NULL,   limit = 100,   curlopts = list() )  name_backbone_verbose(   name,   rank = NULL,   kingdom = NULL,   phylum = NULL,   class = NULL,   order = NULL,   family = NULL,   genus = NULL,   strict = FALSE,   start = NULL,   limit = 100,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"name (character) Full scientific name potentially authorship (required) rank (character) rank given rank enum. (optional) kingdom (character) provided default matching also try match direct match found name alone. (optional) phylum (character) provided default matching also try match direct match found name alone. (optional) class (character) provided default matching also try match direct match found name alone. (optional) order (character) provided default matching also try match direct match found name alone. (optional) family (character) provided default matching also try match direct match found name alone. (optional) genus (character) provided default matching also try match direct match found name alone. (optional) strict (logical) TRUE (fuzzy) matches given name, never taxon upper classification (optional) verbose (logical) function give back (less reliable) results. See function name_backbone_verbose() start Record number start . Default: 0. Use combination limit page results. limit Number records return. Default: 100. Maximum: 1000. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"name_backbone, data.frame single taxon many columns. name_backbone_verbose, larger number results data.frame results resulting fuzzy matching. also get back input name, rank, kingdom, phylum ect. columns input_name, input_rank, input_kingdom ect. can check results.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"get match, GBIF gives back data.frame columns synonym, confidence, matchType='NONE'.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"https://www.gbif.org/developer/species#searching","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup names in the GBIF backbone taxonomy. — name_backbone","text":"","code":"if (FALSE) { # \\dontrun{ name_backbone(name='Helianthus annuus', kingdom='plants') name_backbone(name='Helianthus', rank='genus', kingdom='plants') name_backbone(name='Poa', rank='genus', family='Poaceae')  # Verbose - gives back alternatives ## Strictness name_backbone_verbose(name='Poa', kingdom='plants',   strict=FALSE) name_backbone_verbose(name='Helianthus annuus', kingdom='plants',   strict=TRUE)  # Non-existent name - returns list of lenght 3 stating no match name_backbone(name='Aso') name_backbone(name='Oenante')  # Pass on curl options name_backbone(name='Oenante', curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone_checklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","title":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","text":"Lookup names GBIF backbone taxonomy checklist.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone_checklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","text":"","code":"name_backbone_checklist(   name_data = NULL,   rank = NULL,   kingdom = NULL,   phylum = NULL,   class = NULL,   order = NULL,   family = NULL,   genus = NULL,   strict = FALSE,   verbose = FALSE,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone_checklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","text":"name_data (data.frame vector) see details. rank (character) default value (optional). kingdom (character) default value (optional). phylum (character) default value (optional). class (character) default value (optional). order (character) default value (optional). family (character) default value (optional). genus (character) default value (optional). strict (logical) strict=TRUE attempt fuzzy match return higherrankmatches. verbose (logical) true shows alternative matches considered rejected. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone_checklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","text":"data.frame matched names.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone_checklist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","text":"function alternative  name_backbone(), work list names (vector data.frame). data.frame following column names, 'name' column required. one column present, column assumed 'name' column. name : (required) rank : (optional) kingdom : (optional) phylum : (optional) class : (optional) order : (optional) family : (optional) genus : (optional) input columns returned \"verbatim_name\",\"verbatim_rank\", \"verbatim_phylum\" ect. column \"verbatim_index\" also returned giving index input. following aliases 'name' column work (case '_' work) : \"scientificName\", \"ScientificName\", \"scientific_name\" ... \"sci_name\", \"sciname\", \"SCI_NAME\" ... \"names\", \"NAMES\" ... \"species\", \"SPECIES\" ... \"species_name\", \"speciesname\" ... \"sp_name\", \"SP_NAME\", \"spname\" ... \"taxon_name\", \"taxonname\", \"TAXON NAME\" ... one aliases present column named 'name', left-column acceptable aliased name used. verbose=TRUE, column called is_alternative returned, species name originally first choice . is_alternative=TRUE means name considered best match GBIF. Default values rank, kingdom, phylum, class, order, family, genus can can supplied. default value supplied, values fields ignored name_data, default value used instead. useful list names know plants, insects, birds, ect. can also input multiple values, length list names trying match. function can also used character vector names. case column names needed course. function similar GBIF species-lookup tool. https://www.gbif.org/tools/species-lookup. 1000s names match, can take minutes get back matches. tested 60K names. Scientific names author details usually get better matches. See also article Working Taxonomic Names.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_backbone_checklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup names in the GBIF backbone taxonomy in a checklist. — name_backbone_checklist","text":"","code":"if (FALSE) { # \\dontrun{  library(rgbif)  name_data <- data.frame(  scientificName = c(    \"Cirsium arvense (L.) Scop.\", # a plant    \"Calopteryx splendens (Harris, 1780)\", # an insect    \"Puma concolor (Linnaeus, 1771)\", # a big cat    \"Ceylonosticta alwisi (Priyadarshana & Wijewardhane, 2016)\", # newly discovered insect     \"Puma concuolor (Linnaeus, 1771)\", # a mis-spelled big cat    \"Fake species (John Waller 2021)\", # a fake species    \"Calopteryx\" # Just a Genus     ), description = c(    \"a plant\",    \"an insect\",    \"a big cat\",    \"newly discovered insect\",    \"a mis-spelled big cat\",    \"a fake species\",    \"just a GENUS\"  ),   kingdom = c(    \"Plantae\",    \"Animalia\",    \"Animalia\",    \"Animalia\",    \"Animalia\",    \"Johnlia\",    \"Animalia\"  ))  name_backbone_checklist(name_data)  # return more than 1 result per name name_backbone_checklist(name_data,verbose=TRUE)   # works with just vectors too  name_list <- c( \"Cirsium arvense (L.) Scop.\",  \"Calopteryx splendens (Harris, 1780)\",  \"Puma concolor (Linnaeus, 1771)\",  \"Ceylonosticta alwisi (Priyadarshana & Wijewardhane, 2016)\",  \"Puma concuolor\",  \"Fake species (John Waller 2021)\",  \"Calopteryx\")  name_backbone_checklist(name_list) name_backbone_checklist(name_list,verbose=TRUE) name_backbone_checklist(name_list,strict=TRUE)   # default values name_backbone_checklist(c(\"Aloe arborecens Mill.\", \"Cirsium arvense (L.) Scop.\"),kingdom=\"Plantae\") name_backbone_checklist(c(\"Aloe arborecens Mill.\", \"Calopteryx splendens (Harris, 1780)\"),kingdom=c(\"Plantae\",\"Animalia\"))  } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_issues.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and examine further GBIF name issues on a dataset. — name_issues","title":"Parse and examine further GBIF name issues on a dataset. — name_issues","text":"Parse examine GBIF name issues dataset.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_issues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and examine further GBIF name issues on a dataset. — name_issues","text":"","code":"name_issues(.data, ..., mutate = NULL)"},{"path":"https://docs.ropensci.org/rgbif/reference/name_issues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and examine further GBIF name issues on a dataset. — name_issues","text":".data Output call name_usage() ... Named parameters get back (e.g. bbmn), remove (e.g. -bbmn). mutate (character) One : split Split issues new columns. expand Expand issue abbreviated codes descriptive names. downloads datasets, super useful since issues come expanded already. split_expand Split new columns, expand issue names. split split_expand, values cells become y (\"yes\") n (\"\")","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_issues.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse and examine further GBIF name issues on a dataset. — name_issues","text":"https://gbif.github.io/gbif-api/apidocs/org/gbif/api/vocabulary/NameUsageIssue.html","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_issues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse and examine further GBIF name issues on a dataset. — name_issues","text":"","code":"if (FALSE) { # \\dontrun{ # what do issues mean, can print whole table head(gbif_issues()) # or just name related issues gbif_issues()[which(gbif_issues()$type %in% c(\"name\")),] # or search for matches gbif_issues()[gbif_issues()$code %in% c('bbmn','clasna','scina'),] # compare out data to after name_issues use (aa <- name_usage(name = \"Lupus\")) aa %>% name_issues(\"clasna\")  ## or parse issues in various ways ### remove data rows with certain issue classes aa %>% name_issues(-clasna, -scina)  ### expand issues to more descriptive names aa %>% name_issues(mutate = \"expand\")  ### split and expand aa %>% name_issues(mutate = \"split_expand\")  ### split, expand, and remove an issue class aa %>% name_issues(-bbmn, mutate = \"split_expand\")  ## Or you can use name_issues without %>% name_issues(aa, -bbmn, mutate = \"split_expand\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup names in all taxonomies in GBIF. — name_lookup","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"service uses fuzzy lookup can put partial names get back things match. See examples . Faceting: facet=FALSE left default (NULL), faceting done. therefore, parameters facet name ignored (facetOnly, facetMincount, facetMultiselect).","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"","code":"name_lookup(   query = NULL,   rank = NULL,   higherTaxonKey = NULL,   status = NULL,   isExtinct = NULL,   habitat = NULL,   nameType = NULL,   datasetKey = NULL,   origin = NULL,   nomenclaturalStatus = NULL,   limit = 100,   start = 0,   facet = NULL,   facetMincount = NULL,   facetMultiselect = NULL,   type = NULL,   hl = NULL,   issue = NULL,   constituentKey = NULL,   verbose = FALSE,   return = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"query Query term(s) full text search. rank CLASS, CULTIVAR, CULTIVAR_GROUP, DOMAIN, FAMILY, FORM, GENUS, INFORMAL, INFRAGENERIC_NAME, INFRAORDER, INFRASPECIFIC_NAME, INFRASUBSPECIFIC_NAME, KINGDOM, ORDER, PHYLUM, SECTION, SERIES, SPECIES, STRAIN, SUBCLASS, SUBFAMILY, SUBFORM, SUBGENUS, SUBKINGDOM, SUBORDER, SUBPHYLUM, SUBSECTION, SUBSERIES, SUBSPECIES, SUBTRIBE, SUBVARIETY, SUPERCLASS, SUPERFAMILY, SUPERORDER, SUPERPHYLUM, SUPRAGENERIC_NAME, TRIBE, UNRANKED, VARIETY higherTaxonKey Filters higher Linnean rank keys. Note within respective checklist searching nub keys across checklists. parameter accepts many inputs vector ( passed request). status Filters taxonomic status one : ACCEPTED DETERMINATION_SYNONYM Used unknown child taxa referred via spec, ssp, ... DOUBTFUL Treated accepted, doubtful whether correct. HETEROTYPIC_SYNONYM specific subclass SYNONYM. HOMOTYPIC_SYNONYM specific subclass SYNONYM. INTERMEDIATE_RANK_SYNONYM Used nub . MISAPPLIED specific subclass SYNONYM. PROPARTE_SYNONYM specific subclass SYNONYM. SYNONYM general synonym, exact type unknown. isExtinct (logical) Filters extinction status (e.g. isExtinct=TRUE) habitat (character) Filters habitat. One : marine, freshwater, terrestrial nameType Filters name type one : BLACKLISTED surely scientific name. CANDIDATUS Candidatus component taxonomic name bacterium maintained Bacteriology Culture Collection. CULTIVAR cultivated plant name. DOUBTFUL doubtful whether scientific name . HYBRID hybrid formula (hybrid name). INFORMAL scientific name informal addition like \"cf.\" indetermined like Abies spec. SCINAME scientific name well formed. VIRUS virus name. WELLFORMED well formed scientific name according present nomenclatural rules. datasetKey Filters dataset's key (uuid) origin (character) Filters origin. One : SOURCE DENORMED_CLASSIFICATION VERBATIM_ACCEPTED EX_AUTHOR_SYNONYM AUTONYM BASIONYM_PLACEHOLDER MISSING_ACCEPTED IMPLICIT_NAME PROPARTE VERBATIM_BASIONYM nomenclaturalStatus yet implemented, eventually allow filtering nomenclatural status enum. limit Number records return. Hard maximum limit set GBIF API: 99999. start Record number start . Default: 0. facet vector/list facet names used retrieve 100 frequent values field. Allowed facets : datasetKey, higherTaxonKey, rank, status, isExtinct, habitat, nameType. Additionally threat nomenclaturalStatus legal values yet implemented, data yet returned . facetMincount Used combination facet parameter. Set facetMincount exclude facets count less x, e.g. http://bit.ly/2osAUQB shows type values 'CHECKLIST' 'OCCURRENCE' types counts less 10000 facetMultiselect (logical) Used combination facet parameter. Set facetMultiselect=TRUE still return counts values currently filtered, e.g. http://bit.ly/2JAymaC still shows type values even though type filtered type=CHECKLIST. type Type name. One occurrence, checklist, metadata. hl (logical) Set hl=TRUE highlight terms matching query fulltext search fields. highlight emphasis tag class gbifH1 e.g. query='plant', hl=TRUE. Fulltext search fields include: title, keyword, country, publishing country, publishing organization title, hosting organization title, description. One additional full text field searched includes information metadata documents, text field returned response. issue Filters issue. Issue related names. Type gbif_issues() get complete list issues. constituentKey Filters dataset's constituent key (uuid). verbose (logical) TRUE, data returned list element. FALSE (default) subset data thought essential organized data.frame. return Defunct. components returned; index one(s) want curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"object class gbif, S3 class list, slots metadata (meta), data (data), taxonomic hierarchy data (hierarchies), vernacular names (names). addition, object attributes listing user supplied arguments type search, , differently occurrence data, always equals 'single' even multiple values parameters given. meta list length four offset, limit, endOfRecords count fields. data tibble (aka data.frame) containing information found taxa. hierarchies list data.frame's, one per GBIF key (taxon), containing taxonomic classification. data.frame contains two columns: rankkey name. names returns list data.frame's, one per GBIF key (taxon), containing vernacular names. data.frame contains two columns: vernacularName language. list length five: metadata data: either data.frame (verbose=FALSE, default) list (verbose=TRUE). facets hierarchies names","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":"repeat-parameter-inputs","dir":"Reference","previous_headings":"","what":"Repeat parameter inputs","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"parameters can take many inputs, treated '' (e.g., b c). following take many inputs: rank higherTaxonKey status habitat nameType datasetKey origin","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"https://www.gbif.org/developer/species#searching","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup names in all taxonomies in GBIF. — name_lookup","text":"","code":"if (FALSE) { # \\dontrun{ # Look up names like mammalia name_lookup(query='mammalia', limit = 20)  # Start with an offset name_lookup(query='mammalia', limit=1) name_lookup(query='mammalia', limit=1, start=2)  # large requests (paging is internally implemented). # hard maximum limit set by GBIF API: 99999 # name_lookup(query = \"Carnivora\", limit = 10000)  # Get all data and parse it, removing descriptions which can be quite long out <- name_lookup('Helianthus annuus', rank=\"species\", verbose=TRUE) lapply(out$data, function(x) {   x[!names(x) %in% c(\"descriptions\",\"descriptionsSerialized\")] })  # Search for a genus name_lookup(query=\"Cnaemidophorus\", rank=\"genus\") # Limit records to certain number name_lookup('Helianthus annuus', rank=\"species\", limit=2)  # Query by habitat name_lookup(habitat = \"terrestrial\", limit=2) name_lookup(habitat = \"marine\", limit=2) name_lookup(habitat = \"freshwater\", limit=2)  # Using faceting name_lookup(facet='status', limit=0, facetMincount='70000') name_lookup(facet=c('status','higherTaxonKey'), limit=0,   facetMincount='700000')  name_lookup(facet='nameType', limit=0) name_lookup(facet='habitat', limit=0) name_lookup(facet='datasetKey', limit=0) name_lookup(facet='rank', limit=0) name_lookup(facet='isExtinct', limit=0)  name_lookup(isExtinct=TRUE, limit=0)  # text highlighting ## turn on highlighting res <- name_lookup(query='canada', hl=TRUE, limit=5) res$data name_lookup(query='canada', hl=TRUE, limit=45) ## and you can pass the output to gbif_names() function res <- name_lookup(query='canada', hl=TRUE, limit=5) gbif_names(res)  # Lookup by datasetKey (set up sufficient high limit, API maximum: 99999) # name_lookup(datasetKey='3f8a1297-3259-4700-91fc-acc4170b27ce', #   limit = 50000)  # Some parameters accept many inputs, treated as OR name_lookup(rank = c(\"family\", \"genus\")) name_lookup(higherTaxonKey = c(\"119\", \"120\", \"121\", \"204\")) name_lookup(status = c(\"misapplied\", \"synonym\"))$data name_lookup(habitat = c(\"marine\", \"terrestrial\")) name_lookup(nameType = c(\"cultivar\", \"doubtful\")) name_lookup(datasetKey = c(\"73605f3a-af85-4ade-bbc5-522bfb90d847\",   \"d7c60346-44b6-400d-ba27-8d3fbeffc8a5\")) name_lookup(datasetKey = \"289244ee-e1c1-49aa-b2d7-d379391ce265\",   origin = c(\"SOURCE\", \"DENORMED_CLASSIFICATION\"))  # Pass on curl options name_lookup(query='Cnaemidophorus', rank=\"genus\",   curlopts = list(verbose = TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse taxon names using the GBIF name parser. — name_parse","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"Parse taxon names using GBIF name parser.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"","code":"name_parse(scientificname, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"scientificname character vector scientific names. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"data.frame containing fields extracted parsed taxon names. Fields returned union fields extracted species names scientificname.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"https://www.gbif.org/developer/species#parser","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"John Baumgartner (johnbb@student.unimelb.edu.au)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse taxon names using the GBIF name parser. — name_parse","text":"","code":"if (FALSE) { # \\dontrun{ name_parse(scientificname='x Agropogon littoralis') name_parse(c('Arrhenatherum elatius var. elatius',              'Secale cereale subsp. cereale', 'Secale cereale ssp. cereale',              'Vanessa atalanta (Linnaeus, 1758)')) name_parse(\"Ajuga pyramidata\") name_parse(\"Ajuga pyramidata x reptans\")  # Pass on curl options # res <- name_parse(c('Arrhenatherum elatius var. elatius', #          'Secale cereale subsp. cereale', 'Secale cereale ssp. cereale', #          'Vanessa atalanta (Linnaeus, 1758)'), curlopts=list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest up to 20 name usages. — name_suggest","title":"Suggest up to 20 name usages. — name_suggest","text":"quick simple autocomplete service returns 20 name usages prefix matching scientific name. Results ordered relevance.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest up to 20 name usages. — name_suggest","text":"","code":"name_suggest(   q = NULL,   datasetKey = NULL,   rank = NULL,   fields = NULL,   start = NULL,   limit = 100,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest up to 20 name usages. — name_suggest","text":"q (character, required) Simple search parameter. value parameter can simple word phrase. Wildcards can added simple word parameters , e.g. q=puma datasetKey (character) Filters checklist dataset key (uuid, see examples) rank (character) taxonomic rank. One class, cultivar, cultivar_group, domain, family, form, genus, informal, infrageneric_name, infraorder, infraspecific_name, infrasubspecific_name, kingdom, order, phylum, section, series, species, strain, subclass, subfamily, subform, subgenus, subkingdom, suborder, subphylum, subsection, subseries, subspecies, subtribe, subvariety, superclass, superfamily, superorder, superphylum, suprageneric_name, tribe, unranked, variety. fields (character) Fields return output data.frame (simply prunes columns ) start Record number start . Default: 0. Use combination limit page results. limit Number records return. Default: 100. Maximum: 1000. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest up to 20 name usages. — name_suggest","text":"list, two elements data (tibble) hierarchy (list data.frame's). 'higherClassificationMap' one fields requested, hierarchy list data.frame's; included, hierarchy empty list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":"repeat-parmeter-inputs","dir":"Reference","previous_headings":"","what":"Repeat parmeter inputs","title":"Suggest up to 20 name usages. — name_suggest","text":"parameters can take many inputs, treated '' (e.g., b c). following take many inputs: rank datasetKey","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suggest up to 20 name usages. — name_suggest","text":"https://www.gbif.org/developer/species#searching","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_suggest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest up to 20 name usages. — name_suggest","text":"","code":"if (FALSE) { # \\dontrun{ name_suggest(q='Puma concolor') name_suggest(q='Puma') name_suggest(q='Puma', rank=\"genus\") name_suggest(q='Puma', rank=\"subspecies\") name_suggest(q='Puma', rank=\"species\") name_suggest(q='Puma', rank=\"infraspecific_name\")  name_suggest(q='Puma', limit=2) name_suggest(q='Puma', fields=c('key','canonicalName')) name_suggest(q='Puma', fields=c('key','canonicalName',   'higherClassificationMap'))  # Some parameters accept many inputs, treated as OR name_suggest(rank = c(\"family\", \"genus\")) name_suggest(datasetKey = c(\"73605f3a-af85-4ade-bbc5-522bfb90d847\",   \"d7c60346-44b6-400d-ba27-8d3fbeffc8a5\"))  # If 'higherClassificationMap' in fields, a list is returned name_suggest(q='Puma', fields=c('key','higherClassificationMap'))  # Pass on curl options name_suggest(q='Puma', limit=200, curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"Lookup details specific names taxonomies GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"","code":"name_usage(   key = NULL,   name = NULL,   data = \"all\",   language = NULL,   datasetKey = NULL,   uuid = NULL,   rank = NULL,   shortname = NULL,   start = 0,   limit = 100,   return = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"key (numeric character) GBIF key taxon name (character) Filters case insensitive, canonical namestring, e.g. 'Puma concolor' data (character) Specify option select data returned. See Description . language (character) Language, default english datasetKey (character) Filters dataset's key (uuid). Must length=1 uuid (character) dataset key rank (character) Taxonomic rank. Filters taxonomic rank one : CLASS, CULTIVAR, CULTIVAR_GROUP, DOMAIN, FAMILY, FORM, GENUS, INFORMAL, INFRAGENERIC_NAME, INFRAORDER, INFRASPECIFIC_NAME, INFRASUBSPECIFIC_NAME, KINGDOM, ORDER, PHYLUM, SECTION, SERIES, SPECIES, STRAIN, SUBCLASS, SUBFAMILY, SUBFORM, SUBGENUS, SUBKINGDOM, SUBORDER, SUBPHYLUM, SUBSECTION, SUBSERIES, SUBSPECIES, SUBTRIBE, SUBVARIETY, SUPERCLASS, SUPERFAMILY, SUPERORDER, SUPERPHYLUM, SUPRAGENERIC_NAME, TRIBE, UNRANKED, VARIETY shortname (character) short name dataset - may anything start Record number start . Default: 0. limit Number records return. Default: 100. return Defunct. components returned; index one(s) want curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"object class gbif, S3 class list, slots metadata (meta) data (data). addition, object attributes listing user supplied arguments type search, , differently occurrence data, always equals 'single' even multiple values parameters given. meta list length four offset, limit, endOfRecords count fields. data tibble (aka data.frame) containing information found taxa.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"service uses fuzzy lookup can put partial names get back things match. See examples . function different name_lookup() function searches names. function encompasses bunch API endpoints, require already taxon key, one endpoint allows name searches (see examples ). Note data=\"verbatim\" working. Options data parameter : '', 'verbatim', 'name', 'parents', 'children', 'related', 'synonyms', 'descriptions','distributions', 'media', 'references', 'speciesProfiles', 'vernacularNames', 'typeSpecimens', 'root', 'iucnRedListCategory' function used vectorized respect data parameter, pass multiple values function internally loops option making separate requests. removed. can still loop many options data parameter, just use lapply family function, loop, etc. See name_issues() information issues issues column.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"repeat-parameter-inputs","dir":"Reference","previous_headings":"","what":"Repeat parameter inputs","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"parameters used accept many inputs, longer : rank name langugae datasetKey","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"https://www.gbif.org/developer/species#nameUsages","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/name_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup details for specific names in all taxonomies in GBIF. — name_usage","text":"","code":"if (FALSE) { # \\dontrun{ # A single name usage name_usage(key=1)  # Name usage for a taxonomic name name_usage(name='Puma', rank=\"GENUS\")  # Name usage for all taxa in a dataset # (set sufficient high limit, but less than 100000) # name_usage(datasetKey = \"9ff7d317-609b-4c08-bd86-3bc404b77c42\",  #  limit = 10000) # All name usages name_usage()  # References for a name usage name_usage(key=2435099, data='references')  # Species profiles, descriptions name_usage(key=3119195, data='speciesProfiles') name_usage(key=3119195, data='descriptions') name_usage(key=2435099, data='children')  # Vernacular names for a name usage name_usage(key=3119195, data='vernacularNames')  # Limit number of results returned name_usage(key=3119195, data='vernacularNames', limit=3)  # Search for names by dataset with datasetKey parameter name_usage(datasetKey=\"d7dddbf4-2cf0-4f39-9b2a-bb099caae36c\")  # Search for a particular language name_usage(key=3119195, language=\"FRENCH\", data='vernacularNames')  # get root usage with a uuid name_usage(data = \"root\", uuid = \"73605f3a-af85-4ade-bbc5-522bfb90d847\")  # search by language name_usage(language = \"spanish\")  # Pass on curl options name_usage(name='Puma concolor', limit=300, curlopts = list(verbose=TRUE))  # look up iucn red list category  name_usage(key = 7707728, data = 'iucnRedListCategory')  } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data about GBIF networks — network","title":"Get data about GBIF networks — network","text":"Get data GBIF networks","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data about GBIF networks — network","text":"","code":"network(   data = \"all\",   uuid = NULL,   query = NULL,   identifier = NULL,   identifierType = NULL,   limit = 100,   start = NULL,   curlopts = list() )  network_constituents(uuid = NULL, limit = 100, start = 0)"},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data about GBIF networks — network","text":"data type data get. One : 'contact', 'endpoint', 'identifier', 'tag', 'machineTag', 'comment', 'constituents', special ''. Default: '' uuid UUID data network provider. must specified data anything ''. 1 can passed query Query nodes. used data=''. Ignored otherwise. identifier value parameter can simple string integer, e.g. identifier=120. parameter seem work right now. identifierType Used combination identifier parameter filter identifiers identifier type. See details. parameter seem work right now. limit Number records return. Default: 100. Maximum: 1000. start Record number start . Default: 0. Use combination limit page results. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data about GBIF networks — network","text":"network() returns list network_constituents() returns data.frame datasets network","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data about GBIF networks — network","text":"identifierType options: DOI description. FTP description. GBIF_NODE Identifies node (e.g: DK Denmark, sp2000 Species 2000). GBIF_PARTICIPANT Participant identifier GBIF IMS Filemaker system. GBIF_PORTAL Indicates identifier originated auto_increment column portal.data_provider portal.data_resource table respectively. HANDLER description. LSID Reference controlled separate system, used example DOI. SOURCE_ID description. UNKNOWN description. URI description. URL description. UUID description. Get various information GBIF networks. network_constituents() convenience function allows get datasets network.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get data about GBIF networks — network","text":"https://www.gbif.org/developer/registry#networks","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data about GBIF networks — network","text":"","code":"if (FALSE) { # \\dontrun{ network() network(uuid='2b7c7b4f-4d4f-40d3-94de-c28b6fa054a6')  network_constituents('2b7c7b4f-4d4f-40d3-94de-c28b6fa054a6')  # curl options network(curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Networks metadata. — networks","title":"Networks metadata. — networks","text":"Networks metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Networks metadata. — networks","text":"","code":"networks(   data = \"all\",   uuid = NULL,   query = NULL,   identifier = NULL,   identifierType = NULL,   limit = 100,   start = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Networks metadata. — networks","text":"data type data get. One : 'contact', 'endpoint', 'identifier', 'tag', 'machineTag', 'comment', 'constituents', special ''. Default: '' uuid UUID data network provider. must specified data anything ''. 1 can passed query Query nodes. used data=''. Ignored otherwise. identifier value parameter can simple string integer, e.g. identifier=120. parameter seem work right now. identifierType Used combination identifier parameter filter identifiers identifier type. See details. parameter seem work right now. limit Number records return. Default: 100. Maximum: 1000. start Record number start . Default: 0. Use combination limit page results. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Networks metadata. — networks","text":"identifierType options: DOI description. FTP description. GBIF_NODE Identifies node (e.g: DK Denmark, sp2000 Species 2000). GBIF_PARTICIPANT Participant identifier GBIF IMS Filemaker system. GBIF_PORTAL Indicates identifier originated auto_increment column portal.data_provider portal.data_resource table respectively. HANDLER description. LSID Reference controlled separate system, used example DOI. SOURCE_ID description. UNKNOWN description. URI description. URL description. UUID description.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/networks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Networks metadata. — networks","text":"https://www.gbif.org/developer/registry#networks","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Networks metadata. — networks","text":"","code":"if (FALSE) { # \\dontrun{ networks() networks(uuid='2b7c7b4f-4d4f-40d3-94de-c28b6fa054a6')  # curl options networks(curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Nodes metadata. — nodes","title":"Nodes metadata. — nodes","text":"Nodes metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nodes metadata. — nodes","text":"","code":"nodes(   data = \"all\",   uuid = NULL,   query = NULL,   identifier = NULL,   identifierType = NULL,   limit = 100,   start = NULL,   isocode = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nodes metadata. — nodes","text":"data type data get. One : 'organization', 'endpoint', 'identifier', 'tag', 'machineTag', 'comment', 'pendingEndorsement', 'country', 'dataset', 'installation', special ''. Default: '' uuid UUID data node provider. must specified data anything ''. query Query nodes. used data='' identifier value parameter can simple string integer, e.g. identifier=120. parameter seem work right now. identifierType Used combination identifier parameter filter identifiers identifier type. See details. parameter seem work right now. limit Number records return. Default: 100. Maximum: 1000. start Record number start . Default: 0. Use combination limit page results. isocode 2 letter country code. used data='country'. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/nodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nodes metadata. — nodes","text":"identifierType options: DOI description. FTP description. GBIF_NODE Identifies node (e.g: DK Denmark, sp2000 Species 2000). GBIF_PARTICIPANT Participant identifier GBIF IMS Filemaker system. GBIF_PORTAL Indicates identifier originated auto_increment column portal.data_provider portal.data_resource table respectively. HANDLER description. LSID Reference controlled separate system, used example DOI. SOURCE_ID description. UNKNOWN description. URI description. URL description. UUID description.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/nodes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Nodes metadata. — nodes","text":"https://www.gbif.org/developer/registry#nodes","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nodes metadata. — nodes","text":"","code":"if (FALSE) { # \\dontrun{ nodes(limit=5) nodes(uuid=\"1193638d-32d1-43f0-a855-8727c94299d8\") nodes(data='identifier', uuid=\"03e816b3-8f58-49ae-bc12-4e18b358d6d9\") nodes(data=c('identifier','organization','comment'),   uuid=\"03e816b3-8f58-49ae-bc12-4e18b358d6d9\")  uuids = c(\"8cb55387-7802-40e8-86d6-d357a583c596\",   \"02c40d2a-1cba-4633-90b7-e36e5e97aba8\",   \"7a17efec-0a6a-424c-b743-f715852c3c1f\",   \"b797ce0f-47e6-4231-b048-6b62ca3b0f55\",   \"1193638d-32d1-43f0-a855-8727c94299d8\",   \"d3499f89-5bc0-4454-8cdb-60bead228a6d\",   \"cdc9736d-5ff7-4ece-9959-3c744360cdb3\",   \"a8b16421-d80b-4ef3-8f22-098b01a89255\",   \"8df8d012-8e64-4c8a-886e-521a3bdfa623\",   \"b35cf8f1-748d-467a-adca-4f9170f20a4e\",   \"03e816b3-8f58-49ae-bc12-4e18b358d6d9\",   \"073d1223-70b1-4433-bb21-dd70afe3053b\",   \"07dfe2f9-5116-4922-9a8a-3e0912276a72\",   \"086f5148-c0a8-469b-84cc-cce5342f9242\",   \"0909d601-bda2-42df-9e63-a6d51847ebce\",   \"0e0181bf-9c78-4676-bdc3-54765e661bb8\",   \"109aea14-c252-4a85-96e2-f5f4d5d088f4\",   \"169eb292-376b-4cc6-8e31-9c2c432de0ad\",   \"1e789bc9-79fc-4e60-a49e-89dfc45a7188\",   \"1f94b3ca-9345-4d65-afe2-4bace93aa0fe\")  res <- lapply(uuids, function(x) nodes(x, data='identifier')$data) res <- res[!sapply(res, NROW)==0] res[1]  # Pass on curl options nodes(limit=20, curlopts=list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of occurrence records. — occ_count","title":"Get number of occurrence records. — occ_count","text":"Get number occurrence records.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of occurrence records. — occ_count","text":"","code":"occ_count(..., occurrenceStatus = \"PRESENT\", curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of occurrence records. — occ_count","text":"... parameters passed occ_search(). occurrenceStatus (character) Default \"PRESENT\". Specify whether search return \"PRESENT\" \"ABSENT\" data. curlopts (list) curl options.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of occurrence records. — occ_count","text":"occurrence count occ_search() query.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get number of occurrence records. — occ_count","text":"occ_count() short convenience wrapper occ_search(limit=0)$meta$count. current version (since rgbif 3.7.6) occ_count() uses different GBIF API endpoint previous versions. change greatly improves usability occ_count(). Legacy parameters georeferenced, type, date, , longer supported guaranteed work correctly. Multiple values type c(\"\",\"b\") give error, \";b\" work.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of occurrence records. — occ_count","text":"","code":"if (FALSE) { # \\dontrun{ # total occurrences mediated by GBIF occ_count() # should be > 2 billion!   # number of plant occurrences occ_count(kingdomKey=name_backbone(\"Plantea\")$usageKey)  occ_count(scientificName = 'Ursus americanus')  occ_count(country=\"DK\") # found in Denmark  occ_count(country=\"DK;US\") # found in Denmark and United States occ_count(publishingCountry=\"US\") # published by the United States # number of repatriated eBird records in India occ_count(repatriated = TRUE,country=\"IN\")    occ_count(taxonKey=212) # number of bird occurrences # between years 1800-1900 occ_count(basisOfRecord=\"PRESERVED_SPECIMEN\", year=\"1800,1900\")  occ_count(recordedBy=\"John Waller\") # recorded by John Waller occ_count(decimalLatitude=0, decimalLongitude=0) # exactly on 0,0  # close to a known iso2 centroid occ_count(distanceFromCentroidInMeters=\"0,2000\")  # close to a known iso2 centroid in Sweden occ_count(distanceFromCentroidInMeters=\"0,2000\",country=\"SE\")   occ_count(hasCoordinate=TRUE) # with coordinates occ_count(protocol = \"DIGIR\") # published using DIGIR format occ_count(mediaType = 'StillImage') # with images  # number of occurrences iucn status \"critically endangered\" occ_count(iucnRedListCategory=\"CR\")  occ_count(verbatimScientificName=\"Calopteryx splendens;Calopteryx virgo\") occ_count( geometry=\"POLYGON((24.70938 48.9221,24.71056 48.92175,24.71107  48.92296,24.71002 48.92318,24.70938 48.9221))\")  # getting a table of counts using the facets interface # occurrence counts by year occ_count(facet=\"year\") occ_count(facet=\"year\",facetLimit=400)  # top scientificNames from Japan occ_count(facet=\"scientificName\",country=\"JP\") # top countries publishing specimen bird records between 1850 and 1880 occ_count(facet=\"scientificName\",taxonKey=212,basisOfRecord=\"PRESERVED_SPECIMEN\" ,year=\"1850,1880\")  # Number of present or absence records of Elephants occ_count(facet=\"occurrenceStatus\",scientificName=\"Elephantidae\")  # top 100 datasets publshing occurrences to GBIF occ_count(facet=\"datasetKey\",facetLimit=100) # top datasets publishing country centroids on GBIF occ_count(facet=\"datasetKey\",distanceFromCentroidInMeters=\"0\")  # common values for coordinateUncertaintyInMeters for museum specimens occ_count(facet=\"coordinateUncertaintyInMeters\",basisOfRecord=\"PRESERVED_SPECIMEN\")  # number of iucn listed bird and insect occurrences in Mexico occ_count(facet=\"iucnRedListCategory\",taxonKey=\"212;216\",country=\"MX\")  # most common latitude values mediated by GBIF occ_count(facet=\"decimalLatitude\")  # top iNaturalist users publishing research-grade obs to GBIF occ_count(facet=\"recordedBy\",datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\") # top 100 iNaturalist users from Ukraine occ_count(facet=\"recordedBy\",datasetKey=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\" ,country=\"UA\",facetLimit=100)  # top institutions publishing specimen occurrences to GBIF occ_count(facet=\"institutionCode\",basisOfRecord=\"PRESERVED_SPECIMEN\")  } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count_.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","title":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","text":"Get quick pre-computed occurrence counts limited number dimensions.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","text":"","code":"occ_count_country(publishingCountry = NULL)  occ_count_pub_country(country = NULL)  occ_count_year(year = NULL)  occ_count_basis_of_record(curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","text":"publishingCountry 2-letter country code (per ISO-3166-1) country occurrence published. country (character) 2-letter country code (ISO-3166-1) occurrence recorded. year 4 digit year. Supports range queries, 'smaller,larger' (e.g., '1990,1991', whereas 1991, 1990' work). curlopts (list) curl options.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","text":"data.frame counts.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","text":"Get quick pre-computed counts limited number dimensions. occ_count_country() return data.frame occurrence counts country. using occ_count_country(publishingCountry=\"DK\") return occurrence contributions Denmark made country. occ_count_pub_country() return data.frame occurrence counts publishing country. Using occ_count_pub_country(country=\"DK\"), return occurrence contributions country made focal country=DK. occ_count_year() return data.frame total occurrences mediated GBIF year. using occ_counts_year(year=\"1800,1900\") return counts range. occ_count_basis_of_record() return data.frame total occurrences mediated GBIF basis record.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_count_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get quick pre-computed occurrence counts of a limited number of dimensions. — occ_count_","text":"","code":"if (FALSE) { # \\dontrun{ # total occurrence counts for all countries and iso2 places occ_count_country()   # the occurrences Mexico has published in other countries  occ_count_country(\"MX\")  # the occurrences Denmark has published in other countries  occ_count_country(\"DK\")  # the occurrences other countries have published in Denmark occ_count_pub_country(\"DK\") # the occurrences other countries have published in Mexico occ_count_pub_country(\"MX\")  # total occurrence counts for each year that an occurrence was  # recorded or collected. occ_count_year() # supports ranges occ_count_year(\"1800,1900\")  # table of occurrence counts by basis of record occ_count_basis_of_record()  } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Legacy alternative to occ_search — occ_data","title":"Legacy alternative to occ_search — occ_data","text":"Legacy alternative occ_search","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Legacy alternative to occ_search — occ_data","text":"","code":"occ_data(   taxonKey = NULL,   scientificName = NULL,   country = NULL,   publishingCountry = NULL,   hasCoordinate = NULL,   typeStatus = NULL,   recordNumber = NULL,   lastInterpreted = NULL,   continent = NULL,   geometry = NULL,   geom_big = \"asis\",   geom_size = 40,   geom_n = 10,   recordedBy = NULL,   recordedByID = NULL,   identifiedByID = NULL,   basisOfRecord = NULL,   datasetKey = NULL,   eventDate = NULL,   catalogNumber = NULL,   year = NULL,   month = NULL,   decimalLatitude = NULL,   decimalLongitude = NULL,   elevation = NULL,   depth = NULL,   institutionCode = NULL,   collectionCode = NULL,   hasGeospatialIssue = NULL,   issue = NULL,   search = NULL,   mediaType = NULL,   subgenusKey = NULL,   repatriated = NULL,   phylumKey = NULL,   kingdomKey = NULL,   classKey = NULL,   orderKey = NULL,   familyKey = NULL,   genusKey = NULL,   speciesKey = NULL,   establishmentMeans = NULL,   degreeOfEstablishment = NULL,   protocol = NULL,   license = NULL,   organismId = NULL,   publishingOrg = NULL,   stateProvince = NULL,   waterBody = NULL,   locality = NULL,   occurrenceStatus = \"PRESENT\",   gadmGid = NULL,   coordinateUncertaintyInMeters = NULL,   verbatimScientificName = NULL,   eventId = NULL,   identifiedBy = NULL,   networkKey = NULL,   verbatimTaxonId = NULL,   occurrenceId = NULL,   organismQuantity = NULL,   organismQuantityType = NULL,   relativeOrganismQuantity = NULL,   iucnRedListCategory = NULL,   lifeStage = NULL,   isInCluster = NULL,   distanceFromCentroidInMeters = NULL,   skip_validate = TRUE,   limit = 500,   start = 0,   curlopts = list(http_version = 2) )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Legacy alternative to occ_search — occ_data","text":"taxonKey (numeric) taxon key GBIF backbone. included synonym taxa included search, search aves taxononKey=212 match birds, matter species. can pass many keys occ_search(taxonKey=c(1,212)). scientificName scientific name GBIF backbone. included synonym taxa included search. country (character) 2-letter country code (ISO-3166-1) occurrence recorded. enumeration_country(). publishingCountry 2-letter country code (per ISO-3166-1) country occurrence recorded. See enumeration_country(). hasCoordinate (logical) Return occurrence records lat/long data (TRUE) records (FALSE, default). typeStatus Type status specimen. One many options. recordNumber Number recorded collector data, different GBIF record number. lastInterpreted Date record last modified GBIF, ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, MM-dd.  Supports range queries, 'smaller,larger' (e.g., '1990,1991', whereas '1991,1990' work). continent source supplied continent. \"africa\" \"antarctica\" \"asia\" \"europe\" \"north_america\" \"oceania\" \"south_america\" Continent inferred populated provided dataset publisher. Applying filter may exclude many relevant records. geometry (character) Searches occurrences inside polygon Well Known Text (WKT) format. WKT shape written either \"POINT\" \"LINESTRING\" \"LINEARRING\" \"POLYGON\" \"MULTIPOLYGON\" Example, \"POLYGON((37.08 46.86,38.06 46.86,38.06 47.28,37.08 47.28, 37.0 46.8))\". See also section WKT . geom_big (character) One\"bbox\" \"asis\" (default). geom_size (integer) integer indicating size cell. Default: 40. geom_n (integer) integer indicating number cells dimension. Default: 10. recordedBy (character) person recorded occurrence. recordedByID (character) Identifier (e.g. ORCID) person recorded occurrence identifiedByID (character) Identifier (e.g. ORCID) person provided taxonomic identification occurrence. basisOfRecord (character) specific nature data record. See . \"FOSSIL_SPECIMEN\" \"HUMAN_OBSERVATION\" \"MATERIAL_CITATION\" \"MATERIAL_SAMPLE\" \"LIVING_SPECIMEN\" \"MACHINE_OBSERVATION\" \"OBSERVATION\" \"PRESERVED_SPECIMEN\" \"OCCURRENCE\" datasetKey (character) occurrence dataset uuid key. can found dataset page url. example, \"7e380070-f762-11e1-a439-00145 eb45e9a\" key Natural History Museum (London) Collection Specimens. eventDate (character) Occurrence date ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, MM-dd. Supports range queries, 'smaller,larger' ('1990,1991', whereas '1991,1990' work). catalogNumber (character) identifier form assigned source within physical collection digital dataset record may unique, fairly unique combination institution collection code. year 4 digit year. year 98 interpreted AD 98. Supports range queries, 'smaller,larger' (e.g., '1990,1991', whereas 1991, 1990' work). month month year, starting 1 January. Supports range queries, 'smaller,larger' (e.g., '1,2', whereas '2,1' work). decimalLatitude Latitude decimals -90 90 based WGS84. Supports range queries, 'smaller,larger' (e.g., '25,30', whereas '30,25' work). decimalLongitude Longitude decimals -180 180 based WGS84. Supports range queries (e.g., '-0.4,-0.2', whereas '-0.2,-0.4' work). elevation Elevation meters sea level. Supports range queries, 'smaller,larger' (e.g., '5,30', whereas '30,5' work). depth Depth meters relative elevation. example 10 meters lake surface given elevation. Supports range queries, 'smaller,larger' (e.g., '5,30', whereas '30,5' work). institutionCode identifier form assigned source identify institution record belongs . collectionCode (character) identifier form assigned source identify physical collection digital dataset uniquely within text institution. hasGeospatialIssue (logical) Includes/excludes occurrence records contain spatial issues (determined record interpretation), .e. hasGeospatialIssue=TRUE returns records spatial issues hasGeospatialIssue=FALSE includes records without spatial issues. absence parameter returns record without spatial issues. issue (character) One many possible issues occurrence record. Issues passed parameter filter results issue. One many options. See definitions. search (character) Query terms. value parameter can simple word phrase. example, search=\"puma\" mediaType (character) Media type \"MovingImage\", \"Sound\", \"StillImage\". subgenusKey (numeric) Subgenus classification key. repatriated (character) Searches records whose publishing country different country record recorded . phylumKey (numeric) Phylum classification key. kingdomKey (numeric) Kingdom classification key. classKey (numeric) Class classification key. orderKey (numeric) Order classification key. familyKey (numeric) Family classification key. genusKey (numeric) Genus classification key. speciesKey (numeric) Species classification key. establishmentMeans (character) provides information whether organism organisms introduced given place time direct indirect activity modern humans. \"Introduced\" \"Native\" \"NativeReintroduced\" \"Vagrant\" \"Uncertain\" \"IntroducedAssistedColonisation\" degreeOfEstablishment (character) Provides information degree Organism survives, reproduces, expands range given place time. One many options. protocol (character) Protocol mechanism used provide occurrence record. One many options. license (character) type license applied dataset record. \"CC0_1_0\" \"CC_BY_4_0\" \"CC_BY_NC_4_0\" organismId (numeric) identifier Organism instance (opposed particular digital record Organism). May globally unique identifier identifier specific data set. publishingOrg (character) publishing organization key (UUID). stateProvince (character) name next smaller administrative region country (state, province, canton, department, region, etc.) Location occurs. waterBody (character) name water body locations occur locality (character) specific description place. occurrenceStatus (character)  Default \"PRESENT\". Specify whether search return \"PRESENT\" \"ABSENT\" data. gadmGid (character) gadm id area occurrences desired . https://gadm.org/. coordinateUncertaintyInMeters number range 0-1,000,000 specifies desired coordinate uncertainty. coordinateUncertainty InMeters=1000 interpreted records exactly 1000m. Supports range queries, 'smaller,larger' (e.g., '1000,10000', whereas '10000,1000' work). verbatimScientificName (character) Scientific name provided source. eventId (character) identifier(s) sampling event. identifiedBy (character)  names people, groups, organizations. networkKey (character) occurrence network key (uuid) assigned Taxon subject. verbatimTaxonId (character) taxon identifier provided GBIF data publisher. occurrenceId (character) occurrence id source. organismQuantity number range specifies desired organism quantity. organismQuantity=5 interpreted records exactly 5. Supports range queries, smaller,larger (e.g., '5,20', whereas '20,5' work). organismQuantityType (character) type quantification system used quantity organisms. example, \"individuals\" \"biomass\". relativeOrganismQuantity (numeric) relativeOrganismQuantity=0.1 interpreted records exactly 0.1 relative measurement quantity organism (number 0-1). Supports range queries, \"smaller,larger\" (e.g., '0.1,0.5', whereas '0.5,0.1' work). iucnRedListCategory (character) IUCN threat status category. \"NE\" (Evaluated) \"DD\" (Data Deficient) \"LC\" (Least Concern) \"NT\" (Near Threatened) \"VU\" (Vulnerable) \"EN\" (Endangered) \"CR\" (Critically Endangered) \"EX\" (Extinct) \"EW\" (Extinct Wild) lifeStage (character) life stage occurrence. One many options. isInCluster (logical) identify potentially related records GBIF. distanceFromCentroidInMeters number range. value \"2000,*\" means least 2km known centroids. value \"0\" mean occurrences exactly known centroids. value \"0,2000\" mean within 2km centroids. Max value 5000. skip_validate (logical) whether skip wellknown::validate_wkt call . passed check_wkt(). Default: TRUE limit Number records return. Default: 500. Note per request maximum 300, since set 500 function, two requests get 500 records (many). Note hard maximum 100,000, calculated limit+start, start=99,000 limit=2000 work start Record number start . Use combination limit page results. Note paging internally , can manually set start parameter curlopts (list)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Legacy alternative to occ_search — occ_data","text":"object class gbif_data, S3 class list, slots metadata (meta) occurrence data (data), attributes listing user supplied arguments whether \"single\" \"many\" search; , supply two values datasetKey parameter searches done, \"many\". meta list length four offset, limit, endOfRecords count fields. data tibble (aka data.frame)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Legacy alternative to occ_search — occ_data","text":"function legacy alternative occ_search(). recommended use occ_data() flexible occ_search(). New search terms added function supported legacy reasons.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Spin up a download request for GBIF occurrence data. — occ_download","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"Spin download request GBIF occurrence data.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"","code":"occ_download(   ...,   body = NULL,   type = \"and\",   format = \"DWCA\",   user = NULL,   pwd = NULL,   email = NULL,   curlopts = list() )  occ_download_prep(   ...,   body = NULL,   type = \"and\",   format = \"DWCA\",   user = NULL,   pwd = NULL,   email = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"... occ_download() occ_download_prep(), one objects class occ_predicate occ_predicate_list, created pred* functions (see download_predicate_dsl). use , use body parameter. body prefer pass payload , use parameter. use , pass anything dots. Accepts either R list, JSON. JSON likely easier, since JSON library jsonlite requires unbox strings auto-converted arrays, bit tedious large queries. optional type (character) One equals (=), (&), (|), lessThan (<), lessThanOrEquals (<=), greaterThan (>), greaterThanOrEquals (>=), , within, (!), like, isNotNull format (character) download format. One 'DWCA' (default), 'SIMPLE_CSV', 'SPECIES_LIST' user (character) User name within GBIF's website. Required. See \"Authentication\" pwd (character) User password within GBIF's website. Required. See \"Authentication\" email (character) Email address receive download notice done email. Required. See \"Authentication\" curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"see downloads overview GBIF downloads methods","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"geometry","dir":"Reference","previous_headings":"","what":"geometry","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"using geometry parameter, make sure well known text (WKT) formatted GBIF expects . expect WKT counter-clockwise winding order. example, following clockwise POLYGON((-19.5 34.1, -25.3 68.1, 35.9 68.1, 27.8 34.1, -19.5 34.1)), whereas expect order: POLYGON((-19.5 34.1, 27.8 34.1, 35.9 68.1, -25.3 68.1, -19.5 34.1)) note coordinate pairs longitude latitude, longitude first, latitude get results supply WKT clockwise winding order. also note occ_search()/occ_data() behave differently respect WKT can supply clockwise WKT functions treat exclusion, get data inside WKT area.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"occ_download_prep: prepares download request, execute . meant use occ_download_queue() occ_download: prepares download request execute ","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"user, pwd, email parameters, can set one three ways: Set .Rprofile file names gbif_user, gbif_pwd, gbif_email Set .Renviron/.bash_profile (similar) file names GBIF_USER, GBIF_PWD, GBIF_EMAIL Simply pass strings parameters function call strongly recommend second option - storing details environment variables widely used way store secrets. See ?Startup help.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"query-length","dir":"Reference","previous_headings":"","what":"Query length","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"GBIF limit 12,000 characters download query. means can pretty long query, point may lead error GBIF's side split query .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"See API docs https://www.gbif.org/developer/occurrence#download info, predicates docs https://www.gbif.org/developer/occurrence#predicates","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spin up a download request for GBIF occurrence data. — occ_download","text":"","code":"if (FALSE) { # \\dontrun{ # occ_download(pred(\"basisOfRecord\", \"LITERATURE\")) # occ_download(pred(\"taxonKey\", 3119195), pred_gt(\"elevation\", 5000)) # occ_download(pred_gt(\"decimalLatitude\", 50)) # occ_download(pred_gte(\"elevation\", 9000)) # occ_download(pred_gte('decimalLatitude\", 65)) # occ_download(pred(\"country\", \"US\")) # occ_download(pred(\"institutionCode\", \"TLMF\")) # occ_download(pred(\"catalogNumber\", 217880)) # occ_download(pred(\"gbifId\", 142317604))   # download format # z <- occ_download(pred_gte(\"decimalLatitude\", 75), #  format = \"SPECIES_LIST\")  # res <- occ_download(pred(\"taxonKey\", 7264332), pred(\"hasCoordinate\", TRUE))  # pass output directly, or later, to occ_download_meta for more information # occ_download(pred_gt('decimalLatitude', 75)) %>% occ_download_meta  # Multiple queries # occ_download(pred_gte(\"decimalLatitude\", 65), #  pred_lte(\"decimalLatitude\", -65), type=\"or\") # gg <- occ_download(pred(\"depth\", 80), pred(\"taxonKey\", 2343454), #  type=\"or\") # x <- occ_download(pred_and(pred_within(\"POLYGON((-14 42, 9 38, -7 26, -14 42))\"), #  pred_gte(\"elevation\", 5000)))  # complex example with many predicates # shows example of how to do date ranges for both year and month # res <- occ_download( #  pred_gt(\"elevation\", 5000), #  pred_in(\"basisOfRecord\", c('HUMAN_OBSERVATION','OBSERVATION','MACHINE_OBSERVATION')), #  pred(\"country\", \"US\"), #  pred(\"hasCoordinate\", TRUE), #  pred(\"hasGeospatialIssue\", FALSE), #  pred_gte(\"year\", 1999), #  pred_lte(\"year\", 2011), #  pred_gte(\"month\", 3), #  pred_lte(\"month\", 8) # )  # Using body parameter - pass in your own complete query ## as JSON query1 <- '{\"creator\":\"sckott\",   \"notification_address\":[\"stuff1@gmail.com\"],   \"predicate\":{\"type\":\"and\",\"predicates\":[     {\"type\":\"equals\",\"key\":\"TAXON_KEY\",\"value\":\"7264332\"},     {\"type\":\"equals\",\"key\":\"HAS_COORDINATE\",\"value\":\"TRUE\"}]}  }' # res <- occ_download(body = query1, curlopts=list(verbose=TRUE))  ## as a list library(jsonlite) query <- list(   creator = unbox(\"sckott\"),   notification_address = \"stuff1@gmail.com\",   predicate = list(     type = unbox(\"and\"),     predicates = list(       list(type = unbox(\"equals\"), key = unbox(\"TAXON_KEY\"),         value = unbox(\"7264332\")),       list(type = unbox(\"equals\"), key = unbox(\"HAS_COORDINATE\"),         value = unbox(\"TRUE\"))     )   ) ) # res <- occ_download(body = query, curlopts = list(verbose = TRUE))  # Prepared query occ_download_prep(pred(\"basisOfRecord\", \"LITERATURE\")) occ_download_prep(pred(\"basisOfRecord\", \"LITERATURE\"), format = \"SIMPLE_CSV\") occ_download_prep(pred(\"basisOfRecord\", \"LITERATURE\"), format = \"SPECIES_LIST\") occ_download_prep(pred_in(\"taxonKey\", c(2977832, 2977901, 2977966, 2977835))) occ_download_prep(pred_within(\"POLYGON((-14 42, 9 38, -7 26, -14 42))\"))  ## a complicated example occ_download_prep(   pred_in(\"basisOfRecord\", c(\"MACHINE_OBSERVATION\", \"HUMAN_OBSERVATION\")),   pred_in(\"taxonKey\", c(2498343, 2481776, 2481890)),   pred_in(\"country\", c(\"GB\", \"IE\")),   pred_or(pred_lte(\"year\", 1989), pred(\"year\", 2000)) )  # x = occ_download( #   pred_in(\"basisOfRecord\", c(\"MACHINE_OBSERVATION\", \"HUMAN_OBSERVATION\")), #   pred_in(\"taxonKey\", c(9206251, 3112648)), #   pred_in(\"country\", c(\"US\", \"MX\")), #   pred_and(pred_gte(\"year\", 1989), pred_lte(\"year\", 1991)) # ) # occ_download_meta(x) # z <- occ_download_get(x) # df <- occ_download_import(z) # str(df) # library(dplyr) # unique(df$basisOfRecord) # unique(df$taxonKey) # unique(df$countryCode) # sort(unique(df$year)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for downloads already in your GBIF account — occ_download_cached","title":"Check for downloads already in your GBIF account — occ_download_cached","text":"Check downloads already GBIF account","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for downloads already in your GBIF account — occ_download_cached","text":"","code":"occ_download_cached(   ...,   body = NULL,   type = \"and\",   format = \"DWCA\",   user = NULL,   pwd = NULL,   email = NULL,   refresh = FALSE,   age = 30,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for downloads already in your GBIF account — occ_download_cached","text":"... occ_download() occ_download_prep(), one objects class occ_predicate occ_predicate_list, created pred* functions (see download_predicate_dsl). use , use body parameter. body prefer pass payload , use parameter. use , pass anything dots. Accepts either R list, JSON. JSON likely easier, since JSON library jsonlite requires unbox strings auto-converted arrays, bit tedious large queries. optional type (character) One equals (=), (&), (|), lessThan (<), lessThanOrEquals (<=), greaterThan (>), greaterThanOrEquals (>=), , within, (!), like, isNotNull format (character) download format. One 'DWCA' (default), 'SIMPLE_CSV', 'SPECIES_LIST' user (character) User name within GBIF's website. Required. See \"Authentication\" pwd (character) User password within GBIF's website. Required. See \"Authentication\" email (character) Email address receive download notice done email. Required. See \"Authentication\" refresh (logical) refresh list downloads. first request R session cache stored GBIF occurrence downloads locally. can refresh list setting refresh=TRUE; R session, done many download requests, refreshing may good idea using function age (integer) number days want new download. default: 30 curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cached.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check for downloads already in your GBIF account — occ_download_cached","text":"see downloads overview GBIF downloads methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cached.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for downloads already in your GBIF account — occ_download_cached","text":"","code":"if (FALSE) { # \\dontrun{ # these are examples from the package maintainer's account; # outcomes will vary by user occ_download_cached(pred_gte(\"elevation\", 12000L)) occ_download_cached(pred(\"catalogNumber\", 217880)) occ_download_cached(pred_gte(\"decimalLatitude\", 65),   pred_lte(\"decimalLatitude\", -65), type=\"or\") occ_download_cached(pred_gte(\"elevation\", 12000L)) occ_download_cached(pred_gte(\"elevation\", 12000L), refresh = TRUE) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel a download creation process. — occ_download_cancel","title":"Cancel a download creation process. — occ_download_cancel","text":"Cancel download creation process.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel a download creation process. — occ_download_cancel","text":"","code":"occ_download_cancel(key, user = NULL, pwd = NULL, curlopts = list())  occ_download_cancel_staged(   user = NULL,   pwd = NULL,   limit = 20,   start = 0,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel a download creation process. — occ_download_cancel","text":"key (character) key generated request, like occ_download. Required. user (character) User name within GBIF's website. Required. See Details. pwd (character) User password within GBIF's website. Required. See Details. curlopts list named curl options passed HttpClient. see curl::curl_options curl options limit Number records return. Default: 20 start Record number start . Default: 0","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cancel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cancel a download creation process. — occ_download_cancel","text":"Note, functions cancel job progress. download already prepared , anything change . occ_download_cancel cancels specific job download key - returns success message occ_download_cancel_staged cancels jobs status RUNNING PREPARING - none found, returns message saying - found, cancelled, returning message saying ","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cancel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cancel a download creation process. — occ_download_cancel","text":"see downloads overview GBIF downloads methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel a download creation process. — occ_download_cancel","text":"","code":"if (FALSE) { # \\dontrun{ # occ_download_cancel(key=\"0003984-140910143529206\") # occ_download_cancel_staged() } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_dataset_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists the downloads activity of a dataset — occ_download_dataset_activity","title":"Lists the downloads activity of a dataset — occ_download_dataset_activity","text":"Lists downloads activity dataset","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_dataset_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists the downloads activity of a dataset — occ_download_dataset_activity","text":"","code":"occ_download_dataset_activity(   dataset,   limit = 20,   start = 0,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_dataset_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lists the downloads activity of a dataset — occ_download_dataset_activity","text":"dataset (character) dataset key limit (integer/numeric) Number records return. Default: 20, Max: 1000 start (integer/numeric) Record number start . Default: 0 curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_dataset_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists the downloads activity of a dataset — occ_download_dataset_activity","text":"list two slots: meta: single row data.frame columns: offset, limit, endofrecords, count results: tibble nested data flattened, many columns download. download.request. prefixes","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_dataset_activity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lists the downloads activity of a dataset — occ_download_dataset_activity","text":"see downloads overview GBIF downloads methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_dataset_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists the downloads activity of a dataset — occ_download_dataset_activity","text":"","code":"if (FALSE) { # \\dontrun{ res <- occ_download_dataset_activity(\"7f2edc10-f762-11e1-a439-00145eb45e9a\") res res$meta res$meta$count  # pagination occ_download_dataset_activity(\"7f2edc10-f762-11e1-a439-00145eb45e9a\", limit = 3000) occ_download_dataset_activity(\"7f2edc10-f762-11e1-a439-00145eb45e9a\", limit = 3, start = 10) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"List datasets for a download — occ_download_datasets","title":"List datasets for a download — occ_download_datasets","text":"List datasets download","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List datasets for a download — occ_download_datasets","text":"","code":"occ_download_datasets(key, limit = 20, start = 0, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List datasets for a download — occ_download_datasets","text":"key key generated request, like occ_download() limit (integer/numeric) Number records return. Default: 20, Max: 1000 start (integer/numeric) Record number start . Default: 0 curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List datasets for a download — occ_download_datasets","text":"list two slots: meta: single row data.frame columns: offset, limit, endofrecords, count results: tibble results, three columns: downloadKey, datasetKey, numberRecords","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_datasets.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List datasets for a download — occ_download_datasets","text":"see downloads overview GBIF downloads methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List datasets for a download — occ_download_datasets","text":"","code":"if (FALSE) { # \\dontrun{ occ_download_datasets(key=\"0003983-140910143529206\") occ_download_datasets(key=\"0003983-140910143529206\", limit = 3) occ_download_datasets(key=\"0003983-140910143529206\", limit = 3, start = 10) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes the fields available in GBIF downloads — occ_download_describe","title":"Describes the fields available in GBIF downloads — occ_download_describe","text":"Describes fields available GBIF downloads","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes the fields available in GBIF downloads — occ_download_describe","text":"","code":"occ_download_describe(x = \"dwca\")"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes the fields available in GBIF downloads — occ_download_describe","text":"x character string (default: \"dwca\"). Accepted values: \"simpleCsv\", \"simpleAvro\", \"simpleParquet\",\"speciesList\".","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_describe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describes the fields available in GBIF downloads — occ_download_describe","text":"list.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_describe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Describes the fields available in GBIF downloads — occ_download_describe","text":"function returns list fields available GBIF downloads. considered experimental GBIF, output might change future.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_describe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describes the fields available in GBIF downloads — occ_download_describe","text":"","code":"if (FALSE) { # \\dontrun{ occ_download_describe(\"dwca\")$verbatimFields occ_download_describe(\"dwca\")$verbatimExtensions occ_download_describe(\"simpleCsv\")$fields } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a download from GBIF. — occ_download_get","title":"Get a download from GBIF. — occ_download_get","text":"Get download GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a download from GBIF. — occ_download_get","text":"","code":"occ_download_get(key, path = \".\", overwrite = FALSE, ...)"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a download from GBIF. — occ_download_get","text":"key key generated request, like occ_download path Path write zip file . Default: \".\", .zip appended end. overwrite overwrite existing path TRUE. ... named curl options passed crul::verb-GET. see curl::curl_options() curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a download from GBIF. — occ_download_get","text":"Downloads zip file directory specify machine. crul::HttpClient() used internally write zip file disk. See crul::writing-options. function downloads file. See occ_download_import open downloaded file R session. speed function course proportional size file download. example, 58 MB file machine took 26 seconds.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_get.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a download from GBIF. — occ_download_get","text":"see downloads overview GBIF downloads methods function used check HTTP response content type, changed enough longer check . run issues function, open issue GitHub repository.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a download from GBIF. — occ_download_get","text":"","code":"if (FALSE) { # \\dontrun{ occ_download_get(\"0000066-140928181241064\") occ_download_get(\"0003983-140910143529206\", overwrite = TRUE) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a downloaded file from GBIF. — occ_download_import","title":"Import a downloaded file from GBIF. — occ_download_import","text":"Import downloaded file GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a downloaded file from GBIF. — occ_download_import","text":"","code":"occ_download_import(   x = NULL,   key = NULL,   path = \".\",   fill = FALSE,   encoding = \"UTF-8\",   ... )  as.download(path = \".\", key = NULL)  # S3 method for class 'character' as.download(path = \".\", key = NULL)  # S3 method for class 'download' as.download(path = \".\", key = NULL)"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a downloaded file from GBIF. — occ_download_import","text":"x output call occ_download_get key key generated request, like occ_download path Path unzip file . Default: \".\" Writes folder matching zip file name fill (logical) (default: FALSE). TRUE case rows unequal length, blank fields implicitly filled. passed fill parameter data.table::fread. encoding (character) encoding read data; passed data.table::fread(). default: \"UTF-8\". allowed options: \"Latin-1\" \"unknown\". see ?data.table::fread docs ... parameters passed data.table::fread(). See fread docs details. fread parameters may particular useful : select (select columns read ; others dropped), nrows (read certain number rows)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a downloaded file from GBIF. — occ_download_import","text":"tibble (data.frame)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a downloaded file from GBIF. — occ_download_import","text":"can provide either x input, key path. use data.table::fread() internally read data.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import a downloaded file from GBIF. — occ_download_import","text":"see downloads overview GBIF downloads methods","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"problems-reading-data","dir":"Reference","previous_headings":"","what":"Problems reading data","title":"Import a downloaded file from GBIF. — occ_download_import","text":"may run errors using occ_download_import(); often due data.table::fread() able parse occurrence.txt file correctly. fill parameter passes data.table::fread() ... allows pass parameters data.table::fread() accepts. Read docs fread help.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"countrycode-result-column-and-namibia","dir":"Reference","previous_headings":"","what":"countryCode result column and Namibia","title":"Import a downloaded file from GBIF. — occ_download_import","text":"country code Namibia \"NA\". Unfortunately R \"NA\" string read R NA/missing. avoid , function read data, convert NA/missing values character string \"NA\". country code truly missing empty string.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a downloaded file from GBIF. — occ_download_import","text":"","code":"if (FALSE) { # \\dontrun{ # First, kick off at least 1 download, then wait for the job to be complete # Then use your download keys res <- occ_download_get(key=\"0000066-140928181241064\", overwrite=TRUE) occ_download_import(res)  occ_download_get(key=\"0000066-140928181241064\", overwrite = TRUE) %>%   occ_download_import  # coerce a file path to the right class to feed to occ_download_import # as.download(\"0000066-140928181241064.zip\") # as.download(key = \"0000066-140928181241064\") # occ_download_import(as.download(\"0000066-140928181241064.zip\"))  # download a dump that has a CSV file # res <- occ_download_get(key = \"0001369-160509122628363\", overwrite=TRUE) # occ_download_import(res) # occ_download_import(key = \"0001369-160509122628363\")  # download and import a species list (in csv format) # x <- occ_download_get(\"0000172-190415153152247\") # occ_download_import(x) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists the downloads created by a user. — occ_download_list","title":"Lists the downloads created by a user. — occ_download_list","text":"Lists downloads created user.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists the downloads created by a user. — occ_download_list","text":"","code":"occ_download_list(   user = NULL,   pwd = NULL,   limit = 20,   start = 0,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lists the downloads created by a user. — occ_download_list","text":"user (character) User name within GBIF's website. Required. See Details. pwd (character) User password within GBIF's website. Required. See Details. limit (integer/numeric) Number records return. Default: 20, Max: 1000 start (integer/numeric) Record number start . Default: 0 curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists the downloads created by a user. — occ_download_list","text":"list two slots: meta: single row data.frame columns: offset, limit, endofrecords, count results: tibble nested data flattened, many columns request. prefix","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lists the downloads created by a user. — occ_download_list","text":"see downloads overview GBIF downloads methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists the downloads created by a user. — occ_download_list","text":"","code":"if (FALSE) { # \\dontrun{ occ_download_list(user=\"sckott\") occ_download_list(user=\"sckott\", limit = 5) occ_download_list(user=\"sckott\", start = 21) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","title":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","text":"Retrieves occurrence download metadata unique key.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","text":"","code":"occ_download_meta(key, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","text":"key key generated request, like occ_download curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","text":"object class occ_download_meta, list slots download key, DOI assigned download, license link, request details sent occ_download() request, metadata size date/time request","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_meta.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","text":"see downloads overview GBIF downloads methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the occurrence download metadata by its unique key. — occ_download_meta","text":"","code":"if (FALSE) { # \\dontrun{ occ_download_meta(key=\"0003983-140910143529206\") occ_download_meta(\"0000066-140928181241064\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":null,"dir":"Reference","previous_headings":"","what":"Download requests in a queue — occ_download_queue","title":"Download requests in a queue — occ_download_queue","text":"Download requests queue","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download requests in a queue — occ_download_queue","text":"","code":"occ_download_queue(..., .list = list(), status_ping = 10)"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download requests in a queue — occ_download_queue","text":"... number occ_download() requests .list number occ_download_prep() requests status_ping (integer) seconds pings checking status download request. generally larger numbers larger requests. default: 10 (.e., 10 seconds). must 10 greater","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download requests in a queue — occ_download_queue","text":"list occ_download class objects, see occ_download_get() fetch data","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download requests in a queue — occ_download_queue","text":"function convenience wrapper around occ_download(), allowing user kick number requests, abiding GBIF rules 3 concurrent requests per user.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download requests in a queue — occ_download_queue","text":"see downloads overview GBIF downloads methods","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"how-it-works","dir":"Reference","previous_headings":"","what":"How it works","title":"Download requests in a queue — occ_download_queue","text":"works using lazy evaluation collect requests queue (use lazy evaluation use .list parameter). kicks first 3 requests. loop, check status requests, request finishes (see job done? ), kick next, . theory, may always strictly 3 running concurrently, function usually provide 3 running concurrently.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"when-is-a-job-done-","dir":"Reference","previous_headings":"","what":"When is a job done?","title":"Download requests in a queue — occ_download_queue","text":"mark job done checking /occurrence/download/ API route occ_download_meta() function. status job \"succeeded\", \"killed\", \"cancelled\", mark job done move jobs queue.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"beware","dir":"Reference","previous_headings":"","what":"Beware","title":"Download requests in a queue — occ_download_queue","text":"function still development. lot complexity problem. rolling fixes improvements future versions package, expect adjust code new versions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_queue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download requests in a queue — occ_download_queue","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) { # dont run in automated example runs, too costly # passing occ_download() requests via ... out <- occ_download_queue(   occ_download(pred('taxonKey', 3119195), pred(\"year\", 1976)),   occ_download(pred('taxonKey', 3119195), pred(\"year\", 2001)),   occ_download(pred('taxonKey', 3119195), pred(\"year\", 2001),     pred_lte(\"month\", 8)),   occ_download(pred('taxonKey', 5229208), pred(\"year\", 2011)),   occ_download(pred('taxonKey', 2480946), pred(\"year\", 2015)),   occ_download(pred(\"country\", \"NZ\"), pred(\"year\", 1999),     pred(\"month\", 3)),   occ_download(pred(\"catalogNumber\", \"Bird.27847588\"),     pred(\"year\", 1998), pred(\"month\", 2)) )  # supports <= 3 requests too out <- occ_download_queue(   occ_download(pred(\"country\", \"NZ\"), pred(\"year\", 1999), pred(\"month\", 3)),   occ_download(pred(\"catalogNumber\", \"Bird.27847588\"), pred(\"year\", 1998),     pred(\"month\", 2)) )  # using pre-prepared requests via .list keys <- c(7905507, 5384395, 8911082) queries <- list() for (i in seq_along(keys)) {   queries[[i]] <- occ_download_prep(     pred(\"taxonKey\", keys[i]),     pred_in(\"basisOfRecord\", c(\"HUMAN_OBSERVATION\",\"OBSERVATION\")),     pred(\"hasCoordinate\", TRUE),     pred(\"hasGeospatialIssue\", FALSE),     pred(\"year\", 1993)   ) } out <- occ_download_queue(.list = queries) out  # another pre-prepared example yrs <- 1930:1934 queries <- list() for (i in seq_along(yrs)) {   queries[[i]] <- occ_download_prep(     pred(\"taxonKey\", 2877951),     pred_in(\"basisOfRecord\", c(\"HUMAN_OBSERVATION\",\"OBSERVATION\")),     pred(\"hasCoordinate\", TRUE),     pred(\"hasGeospatialIssue\", FALSE),     pred(\"year\", yrs[i])   ) } out <- occ_download_queue(.list = queries) out }} # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Download occurrence data using a SQL query — occ_download_sql","title":"Download occurrence data using a SQL query — occ_download_sql","text":"Download occurrence data using SQL query","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download occurrence data using a SQL query — occ_download_sql","text":"","code":"occ_download_sql(   q = NULL,   format = \"SQL_TSV_ZIP\",   user = NULL,   pwd = NULL,   email = NULL,   validate = TRUE,   curlopts = list() )  occ_download_sql_validate(q = NULL, user = NULL, pwd = NULL)  occ_download_sql_prep(   q = NULL,   format = \"SQL_TSV_ZIP\",   user = NULL,   pwd = NULL,   email = NULL,   validate = TRUE,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download occurrence data using a SQL query — occ_download_sql","text":"q sql query format \"SQL_TSV_ZIP\" supported right now user GBIF user name pwd GBIF password email email address validate query validated submission. Default TRUE. curlopts list curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download occurrence data using a SQL query — occ_download_sql","text":"object class 'occ_download_sql'","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download occurrence data using a SQL query — occ_download_sql","text":"experimental feature, implementation may change throughout 2024. feature currently available preview invited users. Contact helpdesk@gbif.org request access. Please see article information: https://docs.ropensci.org/rgbif/articles/gbif_sql_downloads.html","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download occurrence data using a SQL query — occ_download_sql","text":"https://techdocs.gbif.org/en/data-use/api-sql-downloads","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download occurrence data using a SQL query — occ_download_sql","text":"","code":"if (FALSE) { # \\dontrun{ occ_download_sql(\"SELECT gbifid,countryCode FROM occurrence                    WHERE genusKey = 2435098\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_wait.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for an occurrence download to be done — occ_download_wait","title":"Wait for an occurrence download to be done — occ_download_wait","text":"Wait occurrence download done","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_wait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for an occurrence download to be done — occ_download_wait","text":"","code":"occ_download_wait(   x,   status_ping = 5,   curlopts = list(http_version = 2),   quiet = FALSE )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_wait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for an occurrence download to be done — occ_download_wait","text":"x object class occ_download downloadkey status_ping (integer) seconds occ_download_meta() request. default 5, < 3 curlopts (list) curl options, named list, passed occ_download_meta() quiet (logical) suppress messages. default: FALSE","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_wait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for an occurrence download to be done — occ_download_wait","text":"object class occ_download_meta, see occ_download_meta() details","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_wait.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Wait for an occurrence download to be done — occ_download_wait","text":"occ_download_queue() similar, handles many requests ; occ_download_wait handles one request time","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_download_wait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wait for an occurrence download to be done — occ_download_wait","text":"","code":"if (FALSE) { # \\dontrun{ x <- occ_download(   pred(\"taxonKey\", 9206251),   pred_in(\"country\", c(\"US\", \"MX\")),   pred_gte(\"year\", 1971) ) res <- occ_download_wait(x) occ_download_meta(x)  # works also with a downloadkey occ_download_wait(\"0000066-140928181241064\")   } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_facet.html","id":null,"dir":"Reference","previous_headings":"","what":"Facet GBIF occurrences — occ_facet","title":"Facet GBIF occurrences — occ_facet","text":"Facet GBIF occurrences","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_facet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facet GBIF occurrences — occ_facet","text":"","code":"occ_facet(facet, facetMincount = NULL, curlopts = list(), ...)"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_facet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facet GBIF occurrences — occ_facet","text":"facet (character) character vector length 1 greater. Required. facetMincount (numeric) minimum number records included faceting results curlopts list named curl options passed HttpClient. see curl::curl_options curl options ... Facet parameters, paging based facet variable, e.g., country.facetLimit","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_facet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facet GBIF occurrences — occ_facet","text":"list tibbles (data.frame's) facet (element facet parameter).","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_facet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Facet GBIF occurrences — occ_facet","text":"fields can faceted except last \"lastInterpreted\", \"eventDate\", \"geometry\" faceted variable found, silently dropped, returning nothing query","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_facet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facet GBIF occurrences — occ_facet","text":"","code":"if (FALSE) { # \\dontrun{ occ_facet(facet = \"country\")  # facetMincount - minimum number of records to be included #   in the faceting results occ_facet(facet = \"country\", facetMincount = 30000000L) occ_facet(facet = c(\"country\", \"basisOfRecord\"))  # paging with many facets occ_facet(   facet = c(\"country\", \"basisOfRecord\", \"hasCoordinate\"),   country.facetLimit = 3,   basisOfRecord.facetLimit = 6 )  # paging ## limit occ_facet(facet = \"country\", country.facetLimit = 3) ## offset occ_facet(facet = \"country\", country.facetLimit = 3,   country.facetOffset = 3)  # Pass on curl options occ_facet(facet = \"country\", country.facetLimit = 3,   curlopts = list(verbose = TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for GBIF occurrences by occurrence key — occ_get","title":"Get data for GBIF occurrences by occurrence key — occ_get","text":"Get data GBIF occurrences occurrence key","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for GBIF occurrences by occurrence key — occ_get","text":"","code":"occ_get(   key,   fields = \"minimal\",   curlopts = list(),   return = NULL,   verbatim = NULL )  occ_get_verbatim(key, fields = \"minimal\", curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for GBIF occurrences by occurrence key — occ_get","text":"key (numeric/integer) one occurrence keys. required fields (character) Default (\"minimal\") return just taxon name, key, latitude, longitude. '' returns fields. specify field want returned name, e.g. fields = c('name', 'decimalLatitude','altitude'). curlopts list named curl options passed HttpClient. see curl::curl_options curl options return Defunct. components returned now; index one(s) want verbatim Defunct. verbatim records can now retrieved using occ_get_verbatim()","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for GBIF occurrences by occurrence key — occ_get","text":"occ_get list lists. occ_get_verbatim data.frame","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_get.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get data for GBIF occurrences by occurrence key — occ_get","text":"https://www.gbif.org/developer/occurrence#occurrence","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data for GBIF occurrences by occurrence key — occ_get","text":"","code":"if (FALSE) { # \\dontrun{ occ_get(key=855998194)  # many occurrences occ_get(key=c(101010, 240713150, 855998194))  # Verbatim data occ_get_verbatim(key=855998194) occ_get_verbatim(key=855998194, fields='all') occ_get_verbatim(key=855998194,  fields=c('scientificName', 'lastCrawled', 'county')) occ_get_verbatim(key=c(855998194, 620594291)) occ_get_verbatim(key=c(855998194, 620594291), fields='all') occ_get_verbatim(key=c(855998194, 620594291),    fields=c('scientificName', 'decimalLatitude', 'basisOfRecord'))  # curl options, pass in a named list occ_get(key=855998194, curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_issues.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","title":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","text":"Parse examine GBIF occurrence issues dataset.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_issues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","text":"","code":"occ_issues(.data, ..., mutate = NULL)"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_issues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","text":".data Output call occ_search(), occ_data(), occ_download_import(). data occ_download_import just regular data.frame can pass data.frame function, certain columns fail. ... Named parameters get back (e.g. cdround), remove (e.g. -cdround). mutate (character) One : split Split issues new columns. expand Expand issue abbreviated codes descriptive names. downloads datasets, super useful since issues come expanded already. split_expand Split new columns, expand issue names. split split_expand, values cells become y (\"yes\") n (\"\")","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_issues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","text":"See also vignette Cleaning data using GBIF issues Note can also query based issues, e.g., occ_search(taxonKey=1, issue='DEPTH_UNLIKELY'). However, imagine likely want search occurrences based taxonomic name, geographic area, based issues, makes sense pull data , clean needed using function. function affects data element gbif class returned call occ_search(). Maybe future version remove associated records hierarchy media elements removed data element. notice sort columns make easier glimpse important parts data, namely taxonomic name, taxon key, latitude longitude, issues. columns unchanged otherwise.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_issues.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","text":"https://gbif.github.io/gbif-api/apidocs/org/gbif/api/vocabulary/OccurrenceIssue.html","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_issues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse and examine further GBIF occurrence issues on a dataset. — occ_issues","text":"","code":"if (FALSE) { # \\dontrun{ # what do issues mean, can print whole table head(gbif_issues()) # or just occurrence related issues gbif_issues()[which(gbif_issues()$type %in% c(\"occurrence\")),] # or search for matches iss <- c('cdround','cudc','gass84','txmathi') gbif_issues()[ gbif_issues()$code %in% iss, ]  # compare out data to after occ_issues use (out <- occ_search(limit=100)) out %>% occ_issues(cdround)  # occ_data (out <- occ_data(limit=100)) out %>% occ_issues(cdround)  # Parsing output by issue (res <- occ_data(   geometry='POLYGON((30.1 10.1,40 40,20 40,10 20,30.1 10.1))',   limit = 600))  ## or parse issues in various ways ### include only rows with cdround issue gg <- res %>% occ_issues(cdround) NROW(res$data) NROW(gg$data) head(res$data)[,c(1:5)] head(gg$data)[,c(1:5)]  ### remove data rows with certain issue classes res %>% occ_issues(-cdround, -cudc)  ### split issues into separate columns res %>% occ_issues(mutate = \"split\") res %>% occ_issues(-cudc, -mdatunl, mutate = \"split\") res %>% occ_issues(gass84, mutate = \"split\")  ### expand issues to more descriptive names res %>% occ_issues(mutate = \"expand\")  ### split and expand res %>% occ_issues(mutate = \"split_expand\")  ### split, expand, and remove an issue class res %>% occ_issues(-cdround, mutate = \"split_expand\")  ## Or you can use occ_issues without %>% occ_issues(res, -cdround, mutate = \"split_expand\")  # from GBIF downloaded data via occ_download_* functions res <- occ_download_get(key=\"0000066-140928181241064\", overwrite=TRUE) x <- occ_download_import(res) occ_issues(x, -txmathi) occ_issues(x, txmathi) occ_issues(x, gass84) occ_issues(x, zerocd) occ_issues(x, gass84, txmathi) occ_issues(x, mutate = \"split\") occ_issues(x, -gass84, mutate = \"split\") occ_issues(x, mutate = \"expand\") occ_issues(x, mutate = \"split_expand\")  # occ_search/occ_data with many inputs - give slightly different output # format than normal 2482598, 2498387 xyz <- occ_data(taxonKey = c(9362842, 2492483, 2435099), limit = 300) xyz length(xyz) # length 3 names(xyz) # matches taxonKey values passed in occ_issues(xyz, -gass84) occ_issues(xyz, -cdround) occ_issues(xyz, -cdround, -gass84) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for catalog numbers, collection codes, collector names, and institution codes. — occ_metadata","title":"Search for catalog numbers, collection codes, collector names, and institution codes. — occ_metadata","text":"Search catalog numbers, collection codes, collector names, institution codes.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for catalog numbers, collection codes, collector names, and institution codes. — occ_metadata","text":"","code":"occ_metadata(   type = \"catalogNumber\",   q = NULL,   limit = 5,   pretty = TRUE,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for catalog numbers, collection codes, collector names, and institution codes. — occ_metadata","text":"type Type data, one catalogNumber, collectionCode, recordedBy, institutionCode. Unique partial strings work , like 'cat' catalogNumber q Search term limit Number results, default=5 pretty Pretty true (Default) uses cat print data, FALSE gives character strings. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_metadata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for catalog numbers, collection codes, collector names, and institution codes. — occ_metadata","text":"https://www.gbif.org/developer/occurrence#search","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for catalog numbers, collection codes, collector names, and institution codes. — occ_metadata","text":"","code":"if (FALSE) { # \\dontrun{ # catalog number occ_metadata(type = \"catalogNumber\", q=122)  # collection code occ_metadata(type = \"collectionCode\", q=12)  # institution code occ_metadata(type = \"institutionCode\", q='GB')  # recorded by occ_metadata(type = \"recordedBy\", q='scott')  # data as character strings occ_metadata(type = \"catalogNumber\", q=122, pretty=FALSE)  # Change number of results returned occ_metadata(type = \"catalogNumber\", q=122, limit=10)  # Partial unique type strings work too occ_metadata(type = \"cat\", q=122)  # Pass on curl options occ_metadata(type = \"cat\", q=122, curlopts = list(verbose = TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for GBIF occurrences — occ_search","title":"Search for GBIF occurrences — occ_search","text":"Search GBIF occurrences","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for GBIF occurrences — occ_search","text":"","code":"occ_search(   taxonKey = NULL,   scientificName = NULL,   country = NULL,   publishingCountry = NULL,   hasCoordinate = NULL,   typeStatus = NULL,   recordNumber = NULL,   lastInterpreted = NULL,   continent = NULL,   geometry = NULL,   geom_big = \"asis\",   geom_size = 40,   geom_n = 10,   recordedBy = NULL,   recordedByID = NULL,   identifiedByID = NULL,   basisOfRecord = NULL,   datasetKey = NULL,   eventDate = NULL,   catalogNumber = NULL,   year = NULL,   month = NULL,   decimalLatitude = NULL,   decimalLongitude = NULL,   elevation = NULL,   depth = NULL,   institutionCode = NULL,   collectionCode = NULL,   hasGeospatialIssue = NULL,   issue = NULL,   search = NULL,   mediaType = NULL,   subgenusKey = NULL,   repatriated = NULL,   phylumKey = NULL,   kingdomKey = NULL,   classKey = NULL,   orderKey = NULL,   familyKey = NULL,   genusKey = NULL,   speciesKey = NULL,   establishmentMeans = NULL,   degreeOfEstablishment = NULL,   protocol = NULL,   license = NULL,   organismId = NULL,   publishingOrg = NULL,   stateProvince = NULL,   waterBody = NULL,   locality = NULL,   occurrenceStatus = \"PRESENT\",   gadmGid = NULL,   coordinateUncertaintyInMeters = NULL,   verbatimScientificName = NULL,   eventId = NULL,   identifiedBy = NULL,   networkKey = NULL,   verbatimTaxonId = NULL,   occurrenceId = NULL,   organismQuantity = NULL,   organismQuantityType = NULL,   relativeOrganismQuantity = NULL,   iucnRedListCategory = NULL,   lifeStage = NULL,   isInCluster = NULL,   distanceFromCentroidInMeters = NULL,   geoDistance = NULL,   sex = NULL,   dwcaExtension = NULL,   gbifId = NULL,   gbifRegion = NULL,   projectId = NULL,   programme = NULL,   preparations = NULL,   datasetId = NULL,   datasetName = NULL,   publishedByGbifRegion = NULL,   island = NULL,   islandGroup = NULL,   taxonId = NULL,   taxonConceptId = NULL,   taxonomicStatus = NULL,   acceptedTaxonKey = NULL,   collectionKey = NULL,   institutionKey = NULL,   otherCatalogNumbers = NULL,   georeferencedBy = NULL,   installationKey = NULL,   hostingOrganizationKey = NULL,   crawlId = NULL,   modified = NULL,   higherGeography = NULL,   fieldNumber = NULL,   parentEventId = NULL,   samplingProtocol = NULL,   sampleSizeUnit = NULL,   pathway = NULL,   gadmLevel0Gid = NULL,   gadmLevel1Gid = NULL,   gadmLevel2Gid = NULL,   gadmLevel3Gid = NULL,   earliestEonOrLowestEonothem = NULL,   latestEonOrHighestEonothem = NULL,   earliestEraOrLowestErathem = NULL,   latestEraOrHighestErathem = NULL,   earliestPeriodOrLowestSystem = NULL,   latestPeriodOrHighestSystem = NULL,   earliestEpochOrLowestSeries = NULL,   latestEpochOrHighestSeries = NULL,   earliestAgeOrLowestStage = NULL,   latestAgeOrHighestStage = NULL,   lowestBiostratigraphicZone = NULL,   highestBiostratigraphicZone = NULL,   group = NULL,   formation = NULL,   member = NULL,   bed = NULL,   associatedSequences = NULL,   isSequenced = NULL,   startDayOfYear = NULL,   endDayOfYear = NULL,   limit = 500,   start = 0,   fields = \"all\",   return = NULL,   facet = NULL,   facetMincount = NULL,   facetMultiselect = NULL,   skip_validate = TRUE,   curlopts = list(http_version = 2),   ... )"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for GBIF occurrences — occ_search","text":"taxonKey (numeric) taxon key GBIF backbone. included synonym taxa included search, search aves taxononKey=212 match birds, matter species. can pass many keys occ_search(taxonKey=c(1,212)). scientificName scientific name GBIF backbone. included synonym taxa included search. country (character) 2-letter country code (ISO-3166-1) occurrence recorded. enumeration_country(). publishingCountry 2-letter country code (per ISO-3166-1) country occurrence recorded. See enumeration_country(). hasCoordinate (logical) Return occurrence records lat/long data (TRUE) records (FALSE, default). typeStatus Type status specimen. One many options. recordNumber Number recorded collector data, different GBIF record number. lastInterpreted Date record last modified GBIF, ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, MM-dd.  Supports range queries, 'smaller,larger' (e.g., '1990,1991', whereas '1991,1990' work). continent source supplied continent. \"africa\" \"antarctica\" \"asia\" \"europe\" \"north_america\" \"oceania\" \"south_america\" Continent inferred populated provided dataset publisher. Applying filter may exclude many relevant records. geometry (character) Searches occurrences inside polygon Well Known Text (WKT) format. WKT shape written either \"POINT\" \"LINESTRING\" \"LINEARRING\" \"POLYGON\" \"MULTIPOLYGON\" Example, \"POLYGON((37.08 46.86,38.06 46.86,38.06 47.28,37.08 47.28, 37.0 46.8))\". See also section WKT . geom_big (character) One\"bbox\" \"asis\" (default). geom_size (integer) integer indicating size cell. Default: 40. geom_n (integer) integer indicating number cells dimension. Default: 10. recordedBy (character) person recorded occurrence. recordedByID (character) Identifier (e.g. ORCID) person recorded occurrence identifiedByID (character) Identifier (e.g. ORCID) person provided taxonomic identification occurrence. basisOfRecord (character) specific nature data record. See . \"FOSSIL_SPECIMEN\" \"HUMAN_OBSERVATION\" \"MATERIAL_CITATION\" \"MATERIAL_SAMPLE\" \"LIVING_SPECIMEN\" \"MACHINE_OBSERVATION\" \"OBSERVATION\" \"PRESERVED_SPECIMEN\" \"OCCURRENCE\" datasetKey (character) occurrence dataset uuid key. can found dataset page url. example, \"7e380070-f762-11e1-a439-00145 eb45e9a\" key Natural History Museum (London) Collection Specimens. eventDate (character) Occurrence date ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, MM-dd. Supports range queries, 'smaller,larger' ('1990,1991', whereas '1991,1990' work). catalogNumber (character) identifier form assigned source within physical collection digital dataset record may unique, fairly unique combination institution collection code. year 4 digit year. year 98 interpreted AD 98. Supports range queries, 'smaller,larger' (e.g., '1990,1991', whereas 1991, 1990' work). month month year, starting 1 January. Supports range queries, 'smaller,larger' (e.g., '1,2', whereas '2,1' work). decimalLatitude Latitude decimals -90 90 based WGS84. Supports range queries, 'smaller,larger' (e.g., '25,30', whereas '30,25' work). decimalLongitude Longitude decimals -180 180 based WGS84. Supports range queries (e.g., '-0.4,-0.2', whereas '-0.2,-0.4' work). elevation Elevation meters sea level. Supports range queries, 'smaller,larger' (e.g., '5,30', whereas '30,5' work). depth Depth meters relative elevation. example 10 meters lake surface given elevation. Supports range queries, 'smaller,larger' (e.g., '5,30', whereas '30,5' work). institutionCode identifier form assigned source identify institution record belongs . collectionCode (character) identifier form assigned source identify physical collection digital dataset uniquely within text institution. hasGeospatialIssue (logical) Includes/excludes occurrence records contain spatial issues (determined record interpretation), .e. hasGeospatialIssue=TRUE returns records spatial issues hasGeospatialIssue=FALSE includes records without spatial issues. absence parameter returns record without spatial issues. issue (character) One many possible issues occurrence record. Issues passed parameter filter results issue. One many options. See definitions. search (character) Query terms. value parameter can simple word phrase. example, search=\"puma\" mediaType (character) Media type \"MovingImage\", \"Sound\", \"StillImage\". subgenusKey (numeric) Subgenus classification key. repatriated (character) Searches records whose publishing country different country record recorded . phylumKey (numeric) Phylum classification key. kingdomKey (numeric) Kingdom classification key. classKey (numeric) Class classification key. orderKey (numeric) Order classification key. familyKey (numeric) Family classification key. genusKey (numeric) Genus classification key. speciesKey (numeric) Species classification key. establishmentMeans (character) provides information whether organism organisms introduced given place time direct indirect activity modern humans. \"Introduced\" \"Native\" \"NativeReintroduced\" \"Vagrant\" \"Uncertain\" \"IntroducedAssistedColonisation\" degreeOfEstablishment (character) Provides information degree Organism survives, reproduces, expands range given place time. One many options. protocol (character) Protocol mechanism used provide occurrence record. One many options. license (character) type license applied dataset record. \"CC0_1_0\" \"CC_BY_4_0\" \"CC_BY_NC_4_0\" organismId (numeric) identifier Organism instance (opposed particular digital record Organism). May globally unique identifier identifier specific data set. publishingOrg (character) publishing organization key (UUID). stateProvince (character) name next smaller administrative region country (state, province, canton, department, region, etc.) Location occurs. waterBody (character) name water body locations occur locality (character) specific description place. occurrenceStatus (character)  Default \"PRESENT\". Specify whether search return \"PRESENT\" \"ABSENT\" data. gadmGid (character) gadm id area occurrences desired . https://gadm.org/. coordinateUncertaintyInMeters number range 0-1,000,000 specifies desired coordinate uncertainty. coordinateUncertainty InMeters=1000 interpreted records exactly 1000m. Supports range queries, 'smaller,larger' (e.g., '1000,10000', whereas '10000,1000' work). verbatimScientificName (character) Scientific name provided source. eventId (character) identifier(s) sampling event. identifiedBy (character)  names people, groups, organizations. networkKey (character) occurrence network key (uuid) assigned Taxon subject. verbatimTaxonId (character) taxon identifier provided GBIF data publisher. occurrenceId (character) occurrence id source. organismQuantity number range specifies desired organism quantity. organismQuantity=5 interpreted records exactly 5. Supports range queries, smaller,larger (e.g., '5,20', whereas '20,5' work). organismQuantityType (character) type quantification system used quantity organisms. example, \"individuals\" \"biomass\". relativeOrganismQuantity (numeric) relativeOrganismQuantity=0.1 interpreted records exactly 0.1 relative measurement quantity organism (number 0-1). Supports range queries, \"smaller,larger\" (e.g., '0.1,0.5', whereas '0.5,0.1' work). iucnRedListCategory (character) IUCN threat status category. \"NE\" (Evaluated) \"DD\" (Data Deficient) \"LC\" (Least Concern) \"NT\" (Near Threatened) \"VU\" (Vulnerable) \"EN\" (Endangered) \"CR\" (Critically Endangered) \"EX\" (Extinct) \"EW\" (Extinct Wild) lifeStage (character) life stage occurrence. One many options. isInCluster (logical) identify potentially related records GBIF. distanceFromCentroidInMeters number range. value \"2000,*\" means least 2km known centroids. value \"0\" mean occurrences exactly known centroids. value \"0,2000\" mean within 2km centroids. Max value 5000. geoDistance (character) Filters match occurrence records coordinate values within specified distance coordinate. Distance may specified kilometres (km) metres (m). Example : \"90,100,5km\" sex (character) sex biological individual(s) represented occurrence. dwcaExtension (character) known Darwin Core Archive extension RowType. Limits search occurrences extension, although necessarily useful data recorded using extension. gbifId (numeric) unique GBIF key single occurrence. gbifRegion (character) Gbif region based country code. projectId (character) identifier project, often assigned funded programme. programme (character) group activities, often associated specific funding stream, GBIF BID programme. preparations (character) Preparation preservation method specimen. datasetId (character) ID dataset. Parameter may repeated. Example : https://doi.org/10.1594/PANGAEA.315492 datasetName (character) exact name dataset. dataset title. publishedByGbifRegion (character) GBIF region based owning organization's country. island (character) name island near location occurs. islandGroup (character) name island group location occurs. taxonId (character) taxon identifier provided GBIF data publisher. Example : urn:lsid:dyntaxa.se:Taxon:103026 taxonConceptId (character) identifier taxonomic concept record refers - nomenclatural details taxon. Example : 8fa58e08-08de-4ac1-b69c-1235340b7001 taxonomicStatus (character) taxonomic status. Example : SYNONYM acceptedTaxonKey (numeric) taxon key GBIF backbone. synonym taxa included search, search Aves acceptedTaxonKey=212 match occurrences identified birds, known family, genus species bird. collectionKey (character) key (UUID) collection registered Global Registry Scientific Collections. Example : dceb8d52-094c-4c2c-8960-75e0097c6861 institutionKey (character) key (UUID) institution registered Global Registry Scientific Collections. otherCatalogNumbers (character) Previous alternate fully qualified catalog numbers. georeferencedBy (character) Name person, group, organization determined georeference (spatial representation) location. Example : Brad Millen installationKey (character) occurrence installation key (UUID). Example : 17a83780-3060-4851-9d6f-029d5fcb81c9 hostingOrganizationKey (character) key (UUID) publishing organization whose installation (server) hosts original dataset. Example : fbca90e3-8aed-48b1-84e3-369afbd000ce crawlId (numeric) Crawl attempt harvested record. modified (character) recent date-time occurrence changed, according publisher. Can range. Example : 2023-02-20 higherGeography (character) Geographic name less specific information captured locality term. fieldNumber (character) identifier given event field. Often serves link field notes event. parentEventId (character) identifier information associated sampling event. samplingProtocol (character) name , reference , description method protocol used sampling event. Example : malaise trap sampleSizeUnit (character) unit measurement size (time duration, length, area, volume) sample sampling event. Example : hectares pathway (character) process organism came given place given time, defined GBIF Pathway vocabulary. Example : Agriculture gadmLevel0Gid (character) GADM geographic identifier zero level, example AGO. gadmLevel1Gid (character) GADM geographic identifier first level, example AGO.1_1. gadmLevel2Gid (character) GADM geographic identifier second level, example AFG.1.1_1. gadmLevel3Gid (character) GADM geographic identifier third level, example AFG.1.1.1_1. earliestEonOrLowestEonothem (character) geochronologic era term. latestEonOrHighestEonothem (character) geochronologic era term. earliestEraOrLowestErathem (character) geochronologic era term. latestEraOrHighestErathem (character) geochronologic era term. earliestPeriodOrLowestSystem (character) geochronologic era term. latestPeriodOrHighestSystem (character) geochronologic era term. earliestEpochOrLowestSeries (character) geochronologic era term. latestEpochOrHighestSeries (character) geochronologic era term. earliestAgeOrLowestStage (character) geochronologic era term. latestAgeOrHighestStage (character) geochronologic era term. lowestBiostratigraphicZone (character) geochronologic era term. highestBiostratigraphicZone (character) geochronologic era term. group (character) full name lithostratigraphic group material entity collected. formation (character) full name lithostratigraphic formation material entity collected. member (character) full name lithostratigraphic member material entity collected. bed (character) full name lithostratigraphic bed material entity collected. associatedSequences (character) Identifier (publication, global unique identifier, URI) genetic sequence information associated material entity. Example : http://www.ncbi.nlm.nih.gov/nuccore/U34853.1 isSequenced (logical) Indicates whether associatedSequences genetic sequence information exists. startDayOfYear (numeric) earliest integer day year event occurred. endDayOfYear (numeric) latest integer day year event occurred. limit Number records return. Default: 500. Note per request maximum 300, since set 500 function, two requests get 500 records (many). Note hard maximum 100,000, calculated limit+start, start=99,000 limit=2000 work start Record number start . Use combination limit page results. Note paging internally , can manually set start parameter fields (character) Default ('') returns fields. 'minimal' returns just taxon name, key, datasetKey, latitude, longitute. specify field want returned name, e.g. fields = c('name','latitude','elevation'). return Defunct. components (meta, hierarchy, data, media, facets) returned now; index one(s) want. See occ_data() just want data component facet (character) character vector length 1 greater. Required. facetMincount (numeric) minimum number records included faceting results facetMultiselect (logical) Set TRUE still return counts values currently filtered. See examples. Default: FALSE Faceting: fields can faceted except last \"lastInterpreted\", \"eventDate\", \"geometry\" can facet searches alongside searching occurrence data, return , return facets, occurrence data, etc. skip_validate (logical) whether skip wellknown::validate_wkt call . passed check_wkt(). Default: TRUE curlopts list named curl options passed HttpClient. see curl::curl_options curl options ... additional facet parameters","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for GBIF occurrences — occ_search","text":"object class gbif, S3 class list, slots metadata (meta), occurrence data (data), taxonomic hierarchy data (hier), media metadata (media). addition, object attributes listing user supplied arguments whether 'single' 'many' search; , supply two values datasetKey parameter searches done, 'many'. meta list length four offset, limit, endOfRecords count fields. data tibble (aka data.frame). hier list data.frames unique set taxa found, data.frame taxonomic classification. media list media objects, element holds set metadata media object.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search for GBIF occurrences — occ_search","text":"Maximum number records can get function 100,000. See https://www.gbif.org/developer/occurrence","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"multiple-values-passed-to-a-parameter","dir":"Reference","previous_headings":"","what":"Multiple values passed to a parameter","title":"Search for GBIF occurrences — occ_search","text":"parameters can pass multiple values vector, value produces different request (multiple different requests = c(\"\",\"b\")). parameters allow multiple values passed request (multiple request = \";b\") semicolon separated string (e.g., ';b'); given single request parameter repeated value given (e.g., foo=&foo=b parameter foo). See article Multiple Values.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"hierarchies","dir":"Reference","previous_headings":"","what":"Hierarchies","title":"Search for GBIF occurrences — occ_search","text":"Hierarchies returned occurrence object. option return API. However, within occ_search function can select whether return just hierarchies, just data, data hierarchies metadata, just metadata. hierarchies just return one .","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"curl-debugging","dir":"Reference","previous_headings":"","what":"curl debugging","title":"Search for GBIF occurrences — occ_search","text":"can pass parameters defined function call GBIF API control things call using curlopts. See example passes verbose function get details http call.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"wkt","dir":"Reference","previous_headings":"","what":"WKT","title":"Search for GBIF occurrences — occ_search","text":"Examples valid WKT objects: 'POLYGON((-19.5 34.1, 27.8 34.1, 35.9 68.1, -25.3 68.1, -19.5 34.1))' 'MULTIPOLYGON(((-123 38,-116 38,-116 43,-123 43,-123 38)),((-97 41,-93 41,-93 45,-97 45,-97 41)))' 'POINT(-120 40)' 'LINESTRING(3 4,10 50,20 25)' Note GBIF expects counter-clockwise winding order WKT. can supply clockwise WKT, GBIF treats exclusion, get data inside WKT area. occ_download() behaves differently simply get data back clockwise WKT.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"long-wkt","dir":"Reference","previous_headings":"","what":"Long WKT","title":"Search for GBIF occurrences — occ_search","text":"Options handling long WKT strings: Note long WKT strings specially handled using occ_search occ_data. three options long WKT strings (> 1500 characters), set one three via parameter geom_big: asis - default setting. means anything internally. , just pass WKT string just done package. axe - option deprecated since rgbif v3.8.0. Might return error, since GBIF's polygon interpretation changed. method uses sf::st_make_grid sf::st_intersection, two parameters cellsize n. can tweak parameters tweaking geom_size geom_n. geom_size seems useful toggling number WKT strings get back. See wkt_parse manually break make WKT bounding box larger WKT string, break larger WKT string many smaller ones. bbox - option checks whether WKT string longer 1500 characters, create bounding box WKT, GBIF search bounding box, prune resulting data occurrences original WKT string. big caveat however. create bounding box WKT, limit parameter determines subset records get, prune resulting data WKT, number records get less set limit parameter. However, set limit high enough get records back found bounding box, get records available within WKT.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"counts","dir":"Reference","previous_headings":"","what":"Counts","title":"Search for GBIF occurrences — occ_search","text":"slight difference way records counted vs. results occ_count. equivalent outcomes, function use hasCoordinate=TRUE, hasGeospatialIssue=FALSE outcome using occ_count isGeoreferenced=TRUE","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for GBIF occurrences — occ_search","text":"https://www.gbif.org/developer/occurrence#search","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occ_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for GBIF occurrences — occ_search","text":"","code":"if (FALSE) { # \\dontrun{ # Search by species name, using \\code{\\link{name_backbone}} first to get key (key <- name_suggest(q='Helianthus annuus', rank='species')$data$key[1]) occ_search(taxonKey=key, limit=2)  # Return 20 results, this is the default by the way occ_search(taxonKey=key, limit=20)  # Get just metadata occ_search(taxonKey=key, limit=0)$meta  # Instead of getting a taxon key first, you can search for a name directly ## However, note that using this approach (with \\code{scientificName=\"...\"}) ## you are getting synonyms too. The results for using \\code{scientifcName} and ## \\code{taxonKey} parameters are the same in this case, but I wouldn't be surprised if for some ## names they return different results occ_search(scientificName = 'Ursus americanus') key <- name_backbone(name = 'Ursus americanus', rank='species')$usageKey occ_search(taxonKey = key)  # Search by dataset key occ_search(datasetKey='7b5d6a48-f762-11e1-a439-00145eb45e9a', limit=20)$data  # Search by catalog number occ_search(catalogNumber=\"49366\", limit=20) ## separate requests: use a vector of strings occ_search(catalogNumber=c(\"49366\",\"Bird.27847588\"), limit=10) ## one request, many instances of same parameter: use semi-colon sep. string occ_search(catalogNumber=\"49366;Bird.27847588\", limit=10)  # Get all data, not just lat/long and name occ_search(taxonKey=key, fields='all', limit=20)  # Or get specific fields. Note that this isn't done on GBIF's side of things. This # is done in R, but before you get the return object, so other fields are garbage # collected occ_search(taxonKey=key, fields=c('name','basisOfRecord','protocol'), limit=20)  # Use paging parameters (limit and start) to page. Note the different results # for the two queries below. occ_search(datasetKey='7b5d6a48-f762-11e1-a439-00145eb45e9a',start=10,limit=5)$data occ_search(datasetKey='7b5d6a48-f762-11e1-a439-00145eb45e9a',start=20,limit=5)$data  # Many dataset keys ## separate requests: use a vector of strings occ_search(datasetKey=c(\"50c9509d-22c7-4a22-a47d-8c48425ef4a7\",    \"7b5d6a48-f762-11e1-a439-00145eb45e9a\"), limit=20) ## one request, many instances of same parameter: use semi-colon sep. string v=\"50c9509d-22c7-4a22-a47d-8c48425ef4a7;7b5d6a48-f762-11e1-a439-00145eb45e9a\" occ_search(datasetKey = v, limit=20)  # Occurrence data: lat/long data, and associated metadata with occurrences ## The `data` slot has a data.frame of all data together ## for easy manipulation occ_search(taxonKey=key, limit=20)$data  # Taxonomic hierarchy data ## In the `hier` slot occ_search(taxonKey=key, limit=10)$hier  # Search by recorder occ_search(recordedBy=\"smith\", limit=20)  # Many collector names occ_search(recordedBy=c(\"smith\",\"BJ Stacey\"), limit=20)  # recordedByID occ_search(recordedByID=\"https://orcid.org/0000-0003-1691-239X\", limit=20)  # identifiedByID occ_search(identifiedByID=\"https://orcid.org/0000-0003-4710-2648\", limit=20)  # Pass in curl options for extra fun occ_search(taxonKey=2433407, limit=20, curlopts=list(verbose=TRUE))$hier occ_search(taxonKey=2433407, limit=20,   curlopts = list(     noprogress = FALSE,     progressfunction = function(down, up) {       cat(sprintf(\"up: %d | down %d\\n\", up, down))       return(TRUE)     }   ) )$hier # occ_search(taxonKey=2433407, limit=20, #   curlopts = list(timeout_ms = 1))  # Search for many species splist <- c('Cyanocitta stelleri', 'Junco hyemalis', 'Aix sponsa') keys <- sapply(splist, function(x) name_suggest(x)$data$key[1], USE.NAMES=FALSE) ## separate requests: use a vector of strings occ_search(taxonKey = keys, limit=5) ## one request, many instances of same parameter: use semi-colon sep. string occ_search(taxonKey = paste0(keys, collapse = \";\"), limit=5)  # Search using a synonym name #  Note that you'll see a message printing out that the accepted name will be used occ_search(scientificName = 'Pulsatilla patens', fields = c('name','scientificName'), limit=5)  # Search on latitidue and longitude occ_search(decimalLatitude=48, decimalLongitude=10)  # Search on a bounding box ## in well known text format ### polygon occ_search(geometry='POLYGON((30.1 10.1,40 40,20 40,10 20,30.1 10.1))', limit=20) ### multipolygon wkt <- 'MULTIPOLYGON(((-123 38,-116 38,-116 43,-123 43,-123 38)),    ((-97 41,-93 41,-93 45,-97 45,-97 41)))' occ_search(geometry = gsub(\"\\n\\\\s+\", \"\", wkt), limit = 20)  ## taxonKey + WKT key <- name_suggest(q='Aesculus hippocastanum')$data$key[1] occ_search(taxonKey=key, geometry='POLYGON((30.1 10.1,40 40,20 40,10 20,30.1 10.1))',    limit=20) ## or using bounding box, converted to WKT internally occ_search(geometry=c(-125.0,38.4,-121.8,40.9), limit=20)  # Search on a long WKT string - too long for a GBIF search API request ## We internally convert your WKT string to a bounding box ##  then do the query ##  then clip the results down to just those in the original polygon ##  - Alternatively, you can set the parameter `geom_big=\"bbox\"` ##  - An additional alternative is to use the GBIF download API, see ?downloads wkt <- \"POLYGON((-9.178796777343678 53.22769021556159, -12.167078027343678 51.56540789297837, -12.958093652343678 49.78333685689162,-11.024499902343678 49.21251756301334, -12.079187402343678 46.68179685941719,-15.067468652343678 45.83103608186854, -15.770593652343678 43.58271629699817,-15.067468652343678 41.57676278827219, -11.815515527343678 40.44938999172728,-12.958093652343678 37.72112962230871, -11.639734277343678 36.52987439429357,-8.299890527343678 34.96062625095747, -8.739343652343678 32.62357394385735,-5.223718652343678 30.90497915232165, 1.1044063476563224 31.80562077746643,1.1044063476563224 30.754036557416256, 6.905187597656322 32.02942785462211,5.147375097656322 32.99292810780193, 9.629796972656322 34.164474406524725,10.860265722656322 32.91918014319603, 14.551671972656322 33.72700959356651,13.409093847656322 34.888564192275204, 16.748937597656322 35.104560368110114,19.561437597656322 34.81643887792552, 18.594640722656322 36.38849705969625,22.989171972656322 37.162874858929854, 19.825109472656322 39.50651757842751,13.760656347656322 38.89353140585116, 14.112218847656322 42.36091601976124,10.596593847656322 41.11488736647705, 9.366125097656322 43.70991402658437,5.059484472656322 42.62015372417812, 2.3348750976563224 45.21526500321446,-0.7412967773436776 46.80225692528942, 6.114171972656322 47.102229890207894,8.047765722656322 45.52399303437107, 12.881750097656322 48.22681126957933,9.190343847656322 48.693079457106684, 8.750890722656322 50.68283120621287,5.059484472656322 50.40356146487845, 4.268468847656322 52.377558897655156,1.4559688476563224 53.28027243658647, 0.8407344726563224 51.62000971578333,0.5770625976563224 49.32721423860726, -2.5869999023436776 49.49875947592088,-2.4991092773436776 51.18135535408638, -2.0596561523436776 52.53822562473851,-4.696374902343678 51.67454591918756, -5.311609277343678 50.009802108095776,-6.629968652343678 48.75106196817059, -7.684656152343678 50.12263634382465,-6.190515527343678 51.83776110910459, -5.047937402343678 54.267098895684235,-6.893640527343678 53.69860705549198, -8.915124902343678 54.77719740243195,-12.079187402343678 54.52294465763567, -13.573328027343678 53.437631551347174, -11.288171777343678 53.48995552517918, -9.178796777343678 53.22769021556159))\" wkt <- gsub(\"\\n\", \" \", wkt)  #### Default option with large WKT string fails # res <- occ_search(geometry = wkt)  #### if WKT too long, with 'geom_big=bbox': makes into bounding box res <- occ_search(geometry = wkt, geom_big = \"bbox\")$data  # Search on country occ_search(country='US', fields=c('name','country'), limit=20) occ_search(country='FR', fields=c('name','country'), limit=20) occ_search(country='DE', fields=c('name','country'), limit=20) ### separate requests: use a vector of strings occ_search(country=c('US','DE'), limit=20) ### one request, many instances of same parameter: use semi-colon sep. string occ_search(country = 'US;DE', limit=20)  # Get only occurrences with lat/long data occ_search(taxonKey=key, hasCoordinate=TRUE, limit=20)  # Get only occurrences that were recorded as living specimens occ_search(taxonKey=key, basisOfRecord=\"LIVING_SPECIMEN\", hasCoordinate=TRUE, limit=20) ## multiple values in a vector = a separate request for each value occ_search(taxonKey=key,   basisOfRecord=c(\"LIVING_SPECIMEN\", \"HUMAN_OBSERVATION\"), limit=20) ## mutiple values in a single string, \";\" separated = one request including all values occ_search(taxonKey=key,   basisOfRecord=\"LIVING_SPECIMEN;HUMAN_OBSERVATION\", limit=20)  # Get occurrences for a particular eventDate occ_search(taxonKey=key, eventDate=\"2013\", limit=20) occ_search(taxonKey=key, year=\"2013\", limit=20) occ_search(taxonKey=key, month=\"6\", limit=20)  # Get occurrences based on depth key <- name_backbone(name='Salmo salar', kingdom='animals')$speciesKey occ_search(taxonKey=key, depth=\"5\", limit=20)  # Get occurrences based on elevation key <- name_backbone(name='Puma concolor', kingdom='animals')$speciesKey occ_search(taxonKey=key, elevation=50, hasCoordinate=TRUE, limit=20)  # Get occurrences based on institutionCode occ_search(institutionCode=\"TLMF\", limit=20) ### separate requests: use a vector of strings occ_search(institutionCode=c(\"TLMF\",\"ArtDatabanken\"), limit=20) ### one request, many instances of same parameter: use semi-colon sep. string occ_search(institutionCode = \"TLMF;ArtDatabanken\", limit=20)  # Get occurrences based on collectionCode occ_search(collectionCode=\"Floristic Databases MV - Higher Plants\", limit=20) occ_search(collectionCode=c(\"Floristic Databases MV - Higher Plants\",\"Artport\"))  # Get only those occurrences with spatial issues occ_search(taxonKey=key, hasGeospatialIssue=TRUE, limit=20)  # Search using a query string occ_search(search = \"kingfisher\", limit=20)  # search on repatriated - doesn't work right now # occ_search(repatriated = \"\")  # search on phylumKey occ_search(phylumKey = 7707728, limit = 5)  # search on kingdomKey occ_search(kingdomKey = 1, limit = 5)  # search on classKey occ_search(classKey = 216, limit = 5)  # search on orderKey occ_search(orderKey = 7192402, limit = 5)  # search on familyKey occ_search(familyKey = 3925, limit = 5)  # search on genusKey occ_search(genusKey = 1935496, limit = 5)  # search on establishmentMeans occ_search(establishmentMeans = \"INVASIVE\", limit = 5) occ_search(establishmentMeans = \"NATIVE\", limit = 5) occ_search(establishmentMeans = \"UNCERTAIN\", limit = 5)  # search on protocol occ_search(protocol = \"DIGIR\", limit = 5)  # search on license occ_search(license = \"CC_BY_4_0\", limit = 5)  # search on organismId occ_search(organismId = \"100\", limit = 5)  # search on publishingOrg occ_search(publishingOrg = \"28eb1a3f-1c15-4a95-931a-4af90ecb574d\", limit = 5)  # search on stateProvince occ_search(stateProvince = \"California\", limit = 5)  # search on waterBody occ_search(waterBody = \"AMAZONAS BASIN, RIO JURUA\", limit = 5)  # search on locality res <- occ_search(locality = c(\"Trondheim\", \"Hovekilen\"), limit = 5) res$Trondheim$data res$Hovekilen$data    # Range queries ## See Detail for parameters that support range queries occ_search(depth='50,100') # this is a range depth, with lower/upper limits in character string occ_search(depth=c(50,100)) # this is not a range search, but does two searches for each depth  ## Range search with year occ_search(year='1999,2000', limit=20)  ## Range search with latitude occ_search(decimalLatitude='29.59,29.6')  ## Range search with distanceFromCentroidInMeters  occ_search(distanceFromCentroidInMeters = \"2000,*\") # at least 2km from centroids occ_search(distanceFromCentroidInMeters = \"0,2000\") # close to centroids within 2km  occ_search(distanceFromCentroidInMeters = 0) # exactly on centroids  # Search by specimen type status ## Look for possible values of the typeStatus parameter looking at the typestatus dataset occ_search(typeStatus = 'allotype', fields = c('name','typeStatus'))  # Search by specimen record number ## This is the record number of the person/group that submitted the data, not GBIF's numbers ## You can see that many different groups have record number 1, so not super helpful occ_search(recordNumber = 1, fields = c('name','recordNumber','recordedBy'))  # Search by last time interpreted: Date the record was last modified in GBIF ## The lastInterpreted parameter accepts ISO 8601 format dates, including ## yyyy, yyyy-MM, yyyy-MM-dd, or MM-dd. Range queries are accepted for lastInterpreted occ_search(lastInterpreted = '2014-04-02', fields = c('name','lastInterpreted'))  # Search by continent ## One of africa, antarctica, asia, europe, north_america, oceania, or south_america occ_search(continent = 'south_america')$meta occ_search(continent = 'africa')$meta occ_search(continent = 'oceania')$meta occ_search(continent = 'antarctica')$meta  # Search for occurrences with images occ_search(mediaType = 'StillImage')$media occ_search(mediaType = 'MovingImage')$media occ_search(mediaType = 'Sound')$media  # Query based on issues - see Details for options ## one issue occ_search(taxonKey=1, issue='DEPTH_UNLIKELY', fields =    c('name','key','decimalLatitude','decimalLongitude','depth')) ## two issues occ_search(taxonKey=1, issue=c('DEPTH_UNLIKELY','COORDINATE_ROUNDED')) # Show all records in the Arizona State Lichen Collection that cant be matched to the GBIF # backbone properly: occ_search(datasetKey='84c0e1a0-f762-11e1-a439-00145eb45e9a',    issue=c('TAXON_MATCH_NONE','TAXON_MATCH_HIGHERRANK'))  # Parsing output by issue (res <- occ_search(geometry='POLYGON((30.1 10.1,40 40,20 40,10 20,30.1 10.1))', limit = 50)) ## what do issues mean, can print whole table, or search for matches head(gbif_issues()) gbif_issues()[ gbif_issues()$code %in% c('cdround','cudc','gass84','txmathi'), ] ## or parse issues in various ways ### remove data rows with certain issue classes library('magrittr') res %>% occ_issues(gass84) ### split issues into separate columns res %>% occ_issues(mutate = \"split\") ### expand issues to more descriptive names res %>% occ_issues(mutate = \"expand\") ### split and expand res %>% occ_issues(mutate = \"split_expand\") ### split, expand, and remove an issue class res %>% occ_issues(-cudc, mutate = \"split_expand\")  # If you try multiple values for two different parameters you are wacked on the hand # occ_search(taxonKey=c(2482598,2492010), recordedBy=c(\"smith\",\"BJ Stacey\"))  # Get a lot of data, here 1500 records for Helianthus annuus # out <- occ_search(taxonKey=key, limit=1500) # nrow(out$data)  # If you pass in an invalid polygon you get hopefully informative errors  ### the WKT string is fine, but GBIF says bad polygon wkt <- 'POLYGON((-178.59375 64.83258989321493,-165.9375 59.24622380205539, -147.3046875 59.065977905449806,-130.78125 51.04484764446178,-125.859375 36.70806354647625, -112.1484375 23.367471303759686,-105.1171875 16.093320185359257,-86.8359375 9.23767076398516, -82.96875 2.9485268155066175,-82.6171875 -14.812060061226388,-74.8828125 -18.849111862023985, -77.34375 -47.661687803329166,-84.375 -49.975955187343295,174.7265625 -50.649460483096114, 179.296875 -42.19189902447192,-176.8359375 -35.634976650677295,176.8359375 -31.835565983656227, 163.4765625 -6.528187613695323,152.578125 1.894796132058301,135.703125 4.702353722559447, 127.96875 15.077427674847987,127.96875 23.689804541429606,139.921875 32.06861069132688, 149.4140625 42.65416193033991,159.2578125 48.3160811030533,168.3984375 57.019804336633165, 178.2421875 59.95776046458139,-179.6484375 61.16708631440347,-178.59375 64.83258989321493))'  # occ_search(geometry = gsub(\"\\n\", '', wkt))  ### unable to parse due to last number pair needing two numbers, not one # wkt <- 'POLYGON((-178.5 64.8,-165.9 59.2,-147.3 59.0,-130.7 51.0,-125.8))' # occ_search(geometry = wkt)  ### unable to parse due to unclosed string # wkt <- 'POLYGON((-178.5 64.8,-165.9 59.2,-147.3 59.0,-130.7 51.0))' # occ_search(geometry = wkt) ### another of the same # wkt <- 'POLYGON((-178.5 64.8,-165.9 59.2,-147.3 59.0,-130.7 51.0,-125.8 36.7))' # occ_search(geometry = wkt)  ### returns no results # wkt <- 'LINESTRING(3 4,10 50,20 25)' # occ_search(geometry = wkt)  ### Apparently a point is allowed, but errors # wkt <- 'POINT(45 -122)' # occ_search(geometry = wkt)  ## Faceting x <- occ_search(facet = \"country\", limit = 0) x$facets x <- occ_search(facet = \"establishmentMeans\", limit = 10) x$facets x$data x <- occ_search(facet = c(\"country\", \"basisOfRecord\"), limit = 10) x$data x$facets x$facets$country x$facets$basisOfRecord x$facets$basisOfRecord$count x <- occ_search(facet = \"country\", facetMincount = 30000000L, limit = 10) x$facets x$data # paging per each faceted variable (x <- occ_search(   facet = c(\"country\", \"basisOfRecord\", \"hasCoordinate\"),   country.facetLimit = 3,   basisOfRecord.facetLimit = 6,   limit = 0 )) x$facets   # You can set limit=0 to get number of results found occ_search(datasetKey = '7b5d6a48-f762-11e1-a439-00145eb45e9a', limit = 0)$meta occ_search(scientificName = 'Ursus americanus', limit = 0)$meta occ_search(scientificName = 'Ursus americanus', limit = 0)$meta } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_spellcheck-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Spell check search term for occurrence searches — occ_spellcheck","title":"Spell check search term for occurrence searches — occ_spellcheck","text":"Spell check search term occurrence searches","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occ_spellcheck-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spell check search term for occurrence searches — occ_spellcheck","text":"","code":"occ_spellcheck(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/occ_spellcheck-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spell check search term for occurrence searches — occ_spellcheck","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencecount.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts taxon concept records matching a range of filters. — occurrencecount","title":"Counts taxon concept records matching a range of filters. — occurrencecount","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencecount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts taxon concept records matching a range of filters. — occurrencecount","text":"","code":"occurrencecount(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencedensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns summary counts of occurrence records by one-degree cell for a single taxon, country, dataset, data publisher or data network. — occurrencedensity","title":"Returns summary counts of occurrence records by one-degree cell for a single taxon, country, dataset, data publisher or data network. — occurrencedensity","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencedensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns summary counts of occurrence records by one-degree cell for a single taxon, country, dataset, data publisher or data network. — occurrencedensity","text":"","code":"occurrencedensity()"},{"path":"https://docs.ropensci.org/rgbif/reference/occurrenceget.html","id":null,"dir":"Reference","previous_headings":"","what":"Get individual records for a given occurrence record. — occurrenceget","title":"Get individual records for a given occurrence record. — occurrenceget","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrenceget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get individual records for a given occurrence record. — occurrenceget","text":"","code":"occurrenceget(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrencelist searches for taxon concept records matching a range of filters. — occurrencelist","title":"Occurrencelist searches for taxon concept records matching a range of filters. — occurrencelist","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrencelist searches for taxon concept records matching a range of filters. — occurrencelist","text":"","code":"occurrencelist(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencelist_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrencelist_all carries out an occurrencelist query for a single name and all its name variants according to GBIF's name matching. — occurrencelist_all","title":"Occurrencelist_all carries out an occurrencelist query for a single name and all its name variants according to GBIF's name matching. — occurrencelist_all","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencelist_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrencelist_all carries out an occurrencelist query for a single name and all its name variants according to GBIF's name matching. — occurrencelist_all","text":"","code":"occurrencelist_all(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencelist_many.html","id":null,"dir":"Reference","previous_headings":"","what":"occurrencelist_many is the same as occurrencelist, but takes in a vector of species names. — occurrencelist_many","title":"occurrencelist_many is the same as occurrencelist, but takes in a vector of species names. — occurrencelist_many","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/occurrencelist_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"occurrencelist_many is the same as occurrencelist, but takes in a vector of species names. — occurrencelist_many","text":"","code":"occurrencelist_many(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/organizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Organizations metadata. — organizations","title":"Organizations metadata. — organizations","text":"Organizations metadata.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/organizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organizations metadata. — organizations","text":"","code":"organizations(   data = \"all\",   country = NULL,   uuid = NULL,   query = NULL,   limit = 100,   start = NULL,   curlopts = list() )"},{"path":"https://docs.ropensci.org/rgbif/reference/organizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organizations metadata. — organizations","text":"data (character) type data get. One : 'organization', 'contact', 'endpoint', 'identifier', 'tag', 'machineTag', 'comment', 'hostedDataset', 'ownedDataset', 'deleted', 'pending', 'nonPublishing', special ''. Default: '' country (character) Filters country. uuid (character) UUID data node provider. must specified data anything '', 'deleted', 'pending', 'nonPublishing'. query (character) Query nodes. used data='' limit Number records return. Default: 100. Maximum: 1000. start Record number start . Default: 0. Use combination limit page results. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/organizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organizations metadata. — organizations","text":"list length two, consisting data.frame meta uuid NULL, data can either list data.frame depending requested type data.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/organizations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Organizations metadata. — organizations","text":"https://www.gbif.org/developer/registry#organizations","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/organizations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organizations metadata. — organizations","text":"","code":"if (FALSE) { # \\dontrun{ organizations(limit=5) organizations(query=\"france\", limit=5) organizations(country = \"SPAIN\") organizations(uuid=\"4b4b2111-ee51-45f5-bf5e-f535f4a1c9dc\") organizations(data='contact', uuid=\"4b4b2111-ee51-45f5-bf5e-f535f4a1c9dc\") organizations(data='pending') organizations(data=c('contact','endpoint'),   uuid=\"4b4b2111-ee51-45f5-bf5e-f535f4a1c9dc\")  # Pass on curl options organizations(query=\"spain\", curlopts = list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse taxon names using the GBIF name parser. — parsenames","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"Parse taxon names using GBIF name parser.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"","code":"parsenames(scientificname, curlopts = list())"},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"scientificname character vector scientific names. curlopts list named curl options passed HttpClient. see curl::curl_options curl options","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"data.frame containing fields extracted parsed taxon names. Fields returned union fields extracted species names scientificname.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"https://www.gbif.org/developer/species#parser","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"John Baumgartner (johnbb@student.unimelb.edu.au)","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/parsenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse taxon names using the GBIF name parser. — parsenames","text":"","code":"if (FALSE) { # \\dontrun{ parsenames(scientificname='x Agropogon littoralis') parsenames(c('Arrhenatherum elatius var. elatius',              'Secale cereale subsp. cereale', 'Secale cereale ssp. cereale',              'Vanessa atalanta (Linnaeus, 1758)')) parsenames(\"Ajuga pyramidata\") parsenames(\"Ajuga pyramidata x reptans\")  # Pass on curl options # res <- parsenames(c('Arrhenatherum elatius var. elatius', #          'Secale cereale subsp. cereale', 'Secale cereale ssp. cereale', #          'Vanessa atalanta (Linnaeus, 1758)'), curlopts=list(verbose=TRUE)) } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/rgbif/reference/providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data providers and their unique keys. — providers","title":"Get data providers and their unique keys. — providers","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data providers and their unique keys. — providers","text":"","code":"providers(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data resources and their unique keys. — resources","title":"Get data resources and their unique keys. — resources","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data resources and their unique keys. — resources","text":"","code":"resources(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/rgb_country_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Look up 2 character ISO country codes — rgb_country_codes","title":"Look up 2 character ISO country codes — rgb_country_codes","text":"Look 2 character ISO country codes","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgb_country_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look up 2 character ISO country codes — rgb_country_codes","text":"","code":"rgb_country_codes(country_name, fuzzy = FALSE, ...)"},{"path":"https://docs.ropensci.org/rgbif/reference/rgb_country_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look up 2 character ISO country codes — rgb_country_codes","text":"country_name Name country look fuzzy TRUE, uses agrep fuzzy search names. ... arguments passed agrep grep","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgb_country_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look up 2 character ISO country codes — rgb_country_codes","text":"","code":"if (FALSE) { # \\dontrun{ rgb_country_codes(country_name=\"United\") } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/rgbif-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in rgbif — rgbif-defunct","title":"Defunct functions in rgbif — rgbif-defunct","text":"density_spplist(): service longer provided densitylist(): service longer provided gbifdata(): service longer provided gbifmap_dens(): service longer provided gbifmap_list(): service longer provided occurrencedensity(): service longer provided providers(): service longer provided resources(): service longer provided taxoncount(): service longer provided taxonget(): service longer provided taxonsearch(): service longer provided stylegeojson(): moving functionality spocc package, removed soon togeojson(): moving functionality spocc package, removed soon gist(): moving functionality spocc package, removed soon occ_spellcheck(): GBIF removed spellCheck parameter API","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgbif-defunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defunct functions in rgbif — rgbif-defunct","text":"functions removed. See https://github.com/ropensci/rgbif poke around code want find old functions previous versions package","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgbif-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to the Global Biodiversity Information Facility API. — rgbif-package","title":"Interface to the Global Biodiversity Information Facility API. — rgbif-package","text":"rgbif: programmatic interface Web Service methods provided Global Biodiversity Information Facility.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgbif-package.html","id":"about","dir":"Reference","previous_headings":"","what":"About","title":"Interface to the Global Biodiversity Information Facility API. — rgbif-package","text":"package gives access data GBIF https://www.gbif.org/ via API.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgbif-package.html","id":"documentation-for-the-gbif-api","dir":"Reference","previous_headings":"","what":"Documentation for the GBIF API","title":"Interface to the Global Biodiversity Information Facility API. — rgbif-package","text":"summary https://www.gbif.org/developer/summary - Summary GBIF API registry https://www.gbif.org/developer/registry - Metadata datasets, contributing organizations species names https://www.gbif.org/developer/species - Species names metadata occurrences https://www.gbif.org/developer/occurrence - Occurrences maps https://www.gbif.org/developer/maps - Maps - APIs implemented rgbif, meant integration web based maps.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/rgbif-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interface to the Global Biodiversity Information Facility API. — rgbif-package","text":"Scott Chamberlain Karthik Ram Dan Mcglinn Vijay Barve John Waller","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/stylegeojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Style a data.frame prior to converting to geojson. — stylegeojson","title":"Style a data.frame prior to converting to geojson. — stylegeojson","text":"function defunct.  See package spocc similar functionality.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/stylegeojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style a data.frame prior to converting to geojson. — stylegeojson","text":"","code":"stylegeojson(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/suggestfields.html","id":null,"dir":"Reference","previous_headings":"","what":"Fields available in gbif_suggest function — suggestfields","title":"Fields available in gbif_suggest function — suggestfields","text":"Fields available gbif_suggest function","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/suggestfields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fields available in gbif_suggest function — suggestfields","text":"","code":"suggestfields()"},{"path":"https://docs.ropensci.org/rgbif/reference/taxoncount.html","id":null,"dir":"Reference","previous_headings":"","what":"Search by taxon to retrieve number of records in GBIF. — taxoncount","title":"Search by taxon to retrieve number of records in GBIF. — taxoncount","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/taxoncount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search by taxon to retrieve number of records in GBIF. — taxoncount","text":"","code":"taxoncount(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/taxonget.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic information on a specific taxon or taxa in GBIF by their taxon concept keys. — taxonget","title":"Get taxonomic information on a specific taxon or taxa in GBIF by their taxon concept keys. — taxonget","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/taxonget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic information on a specific taxon or taxa in GBIF by their taxon concept keys. — taxonget","text":"","code":"taxonget(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/taxonsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for taxa in GBIF. — taxonsearch","title":"Search for taxa in GBIF. — taxonsearch","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/taxonsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for taxa in GBIF. — taxonsearch","text":"","code":"taxonsearch(...)"},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/reference/taxrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the possible values to be used for (taxonomic) rank arguments in GBIF API methods. — taxrank","title":"Get the possible values to be used for (taxonomic) rank arguments in GBIF API methods. — taxrank","text":"Get possible values used (taxonomic) rank arguments GBIF API methods.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/taxrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the possible values to be used for (taxonomic) rank arguments in GBIF API methods. — taxrank","text":"","code":"taxrank()"},{"path":"https://docs.ropensci.org/rgbif/reference/taxrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the possible values to be used for (taxonomic) rank arguments in GBIF API methods. — taxrank","text":"","code":"if (FALSE) { # \\dontrun{ taxrank() } # }"},{"path":"https://docs.ropensci.org/rgbif/reference/togeojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial data files to GeoJSON from various formats. — togeojson","title":"Convert spatial data files to GeoJSON from various formats. — togeojson","text":"function defunct.  See package togeojson similar functionality.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/togeojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial data files to GeoJSON from various formats. — togeojson","text":"","code":"togeojson(...)"},{"path":"https://docs.ropensci.org/rgbif/reference/wkt_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"parse wkt into smaller bits — wkt_parse","title":"parse wkt into smaller bits — wkt_parse","text":"parse wkt smaller bits","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/wkt_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse wkt into smaller bits — wkt_parse","text":"","code":"wkt_parse(wkt, geom_big = \"bbox\", geom_size = 40, geom_n = 10)"},{"path":"https://docs.ropensci.org/rgbif/reference/wkt_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse wkt into smaller bits — wkt_parse","text":"wkt (character) WKT string. Required. geom_big (character) \"bbox\" works since rgbif 3.8.0. geom_size (integer) integer indicating size cell. Default: 40. geom_n (integer) integer indicating number cells dimension. Default: 10.","code":""},{"path":"https://docs.ropensci.org/rgbif/reference/wkt_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parse wkt into smaller bits — wkt_parse","text":"","code":"wkt <- \"POLYGON((13.26349675655365 52.53991761181831,18.36115300655365 54.11445544219924, 21.87677800655365 53.80418956368524,24.68927800655365 54.217364774722455,28.20490300655365 54.320018299365124,30.49005925655365 52.85948216284084,34.70880925655365 52.753220564427814, 35.93927800655365 50.46131871049754,39.63068425655365 49.55761261299145,40.86115300655365 46.381388009130845,34.00568425655365 45.279102926537,33.30255925655365 48.636868465271846, 30.13849675655365 49.78513301801265,28.38068425655365 47.2236377039631,29.78693425655365 44.6572866068524,27.67755925655365 42.62220075124676,23.10724675655365 43.77542058000212, 24.51349675655365 47.10412345120368,26.79865300655365 49.55761261299145,23.98615300655365 52.00209943876426,23.63459050655365 49.44345313705238,19.41584050655365 47.580567827212114, 19.59162175655365 44.90682206053508,20.11896550655365 42.36297154876359,22.93146550655365 40.651849782081555,25.56818425655365 39.98171166226459,29.61115300655365 40.78507856230178, 32.95099675655365 40.38459278067577,32.95099675655365 37.37491910393631,26.27130925655365 33.65619609886799,22.05255925655365 36.814081996401605,18.71271550655365 36.1072176729021, 18.53693425655365 39.16878677351903,15.37287175655365 38.346355762190846,15.19709050655365 41.578843777436326,12.56037175655365 41.050735748143424,12.56037175655365 44.02872991212046, 15.19709050655365 45.52594200494078,16.42755925655365 48.05271546733352,17.48224675655365 48.86865641518059,10.62677800655365 47.817178329053135,9.57209050655365 44.154980365192, 8.16584050655365 40.51835445724746,6.05646550655365 36.53210972067291,0.9588092565536499 31.583640057148145,-5.54509699344635 35.68001485298146,-6.77556574344635 40.51835445724746, -9.41228449344635 38.346355762190846,-12.40056574344635 35.10683619158607,-15.74040949344635 38.07010978950028,-14.68572199344635 41.31532459432774,-11.69744074344635 43.64836179231387, -8.88494074344635 42.88035509418534,-4.31462824344635 43.52103366008421,-8.35759699344635 47.2236377039631,-8.18181574344635 50.12441989397795,-5.01775324344635 49.55761261299145, -2.73259699344635 46.25998980446569,-1.67790949344635 44.154980365192,-1.32634699344635 39.30493590580802,2.18927800655365 41.44721797271696,4.47443425655365 43.26556960420879, 2.18927800655365 46.7439668697322,1.83771550655365 50.3492841273576,6.93537175655365 49.671505849335254,5.00177800655365 52.32557322466785,7.81427800655365 51.67627099802223, 7.81427800655365 54.5245591562317,10.97834050655365 51.89375191441792,10.97834050655365 55.43241335888528,13.26349675655365 52.53991761181831))\" wkt <- gsub(\"\\n\", \" \", wkt)  if (requireNamespace(\"sf\", quietly=TRUE)) { # to a bounding box in wkt format wkt_parse(wkt, geom_big = \"bbox\")  } #> [1] \"POLYGON((-15.7404094934464 31.5836400571481,40.8611530065536 31.5836400571481,40.8611530065536 55.4324133588853,-15.7404094934464 55.4324133588853,-15.7404094934464 31.5836400571481))\""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-381","dir":"Changelog","previous_headings":"","what":"rgbif 3.8.1","title":"rgbif 3.8.1","text":"CRAN release: 2024-09-27","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-8-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.8.1","text":"New function occ_download_sql() downloading occurrence data using SQL queries. (#752)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-8-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.8.1","text":"occ_download_cached() bug fixed. (#748)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-8-1","dir":"Changelog","previous_headings":"BUG FIXES","what":"DOCUMENTATION","title":"rgbif 3.8.1","text":"New article GBIF SQL Downloads","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-380","dir":"Changelog","previous_headings":"","what":"rgbif 3.8.0","title":"rgbif 3.8.0","text":"CRAN release: 2024-05-23","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-8-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.8.0","text":"Added many missing occ_search() terms. (#698) New function occ_download_describe() getting information download formats. (#721)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-8-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.8.0","text":"Added constituentKey name_lookup(). (#729) Added support gbifId downloads (#711)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-8-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.8.0","text":"check_inputs()bug fixed. (#706)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-8-0","dir":"Changelog","previous_headings":"BUG FIXES","what":"DOCUMENTATION","title":"rgbif 3.8.0","text":"New article Effectively using occ_search Guidance reversing WKT winding order. (#724)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"deprecated-3-8-0","dir":"Changelog","previous_headings":"BUG FIXES","what":"DEPRECATED","title":"rgbif 3.8.0","text":"gbif_citation() datasetKey methods longer supported (#716) “axe” feature occ_data() longer supported. (#718) occ_data() soft deprecated supported legacy reasons , longer add new features.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-379","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.9","title":"rgbif 3.7.9","text":"CRAN release: 2024-01-11","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.9","text":"many additions accessing dataset metadata. dataset_export() downloads results dataset_search(). New functions getting dataset metadata datasetkey (uuid) : dataset_get(), dataset_process(), dataset_networks(), dataset_constituents(), dataset_comment(), dataset_contact(), dataset_endpoint(), dataset_identifier(), dataset_machinetag(), dataset_tag(), dataset_metrics(). New function getting obscure dataset metadata, machineTags: dataset(). New functions listing dataset metadata : dataset_noendpoint(), dataset_duplicate(). dataset_doi() gets dataset metadata dataset’s doi.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.9","text":"Error message improvements occ_count(). (#686)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-7-9","dir":"Changelog","previous_headings":"","what":"Documentation","title":"rgbif 3.7.9","text":"New article Getting Dataset Metadata GBIF","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"deprecated-3-7-9","dir":"Changelog","previous_headings":"","what":"DEPRECATED","title":"rgbif 3.7.9","text":"longer static data files rgbif. data better fetched fresh appropriate endpoints. (#690) (#688) datasets() soft deprecated, since interface overloaded confusing. See functional replacements .","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-378","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.8","title":"rgbif 3.7.8","text":"CRAN release: 2023-09-11 rgbif new logo. (#679)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.8","text":"map_fetch() now returns base map magick::magick-image. allows creation high quality images GBIF maps API. (#675) occ_download() terms added key lookup. (#661) (#589) pred_default() occ_download() pred function allows users easily filter commonly unwanted occurrence records. (#611)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.8","text":"Stream error fixed (“HTTP/2 stream 15 closed cleanly end underlying stream”). Now map_fetch(), occ_data(), occ_search(), occ_download_wait() curlopts = list(http_version=2), fixes error. might need default setting whole package. (#656) name_suggest() now gives warning prevents setting limit > 100, since GBIF API max. (#657)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-7-8","dir":"Changelog","previous_headings":"","what":"Documentation","title":"rgbif 3.7.8","text":"New article Creating maps occurrences, explains use map_fetch().","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"deprecated-3-7-8","dir":"Changelog","previous_headings":"","what":"DEPRECATED","title":"rgbif 3.7.8","text":"occ_issues() now deprecated, since difficult maintain, widely used. (#651)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-377","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.7","title":"rgbif 3.7.7","text":"CRAN release: 2023-04-03","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-7","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.7","text":"Fixes test causing errors CRAN.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-376","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.6","title":"rgbif 3.7.6","text":"CRAN release: 2023-03-23","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"breaking-change-3-7-6","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGE","title":"rgbif 3.7.6","text":"occ_count() parameter type now deprecated longer work correctly. Please see occ_count_country(), occ_count_pub_country(), occ_count_year(), occ_count_basis_of_record() replacements. (#622)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"deprecated-3-7-6","dir":"Changelog","previous_headings":"","what":"DEPRECATED","title":"rgbif 3.7.6","text":"occ_count() parameters georeferenced, type, date, , longer supported guaranteed work correctly. (#622) occ_facet() count_facet() now deprecated use occ_count(facet=\"x\") instead.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.6","text":"lit_search() now supports searching GBIF literature API. (#591) occ_count() now supports almost occ_search() queries. (#622) occ_count() now supports facets interface occ_count(facet=\"x\"). (#622) organizations() (aka publishers) now supports use getting lists publishers country. (#606) occ_download() occ_search() now support downloading getting occurrences certain distance known country/area centroids via parameter distanceFromCentroidInMeters. (#594)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.6","text":"occ_search() now supports multi-valued parameters. (#617) Removed dependencies randgeo conditionz. (#624) (#625)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-7-6","dir":"Changelog","previous_headings":"","what":"Documentation","title":"rgbif 3.7.6","text":"New article explaining occ_count() changes new features Getting Occurrence Counts GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-375","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.5","title":"rgbif 3.7.5","text":"CRAN release: 2023-01-05","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.5","text":"name_backbone_checklist() now accepts strict=TRUE, meaning non-fuzzy matches returned. (#565) name_backbone_checklist() now accepts default values high taxonomy, kingdom, phylum, family, ect. (#515) name_backbone_checklist() now returns column is_alternative verbose=TRUE, lets user know name originally considered alternative choice name matcher. (#515)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-7-5","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"rgbif 3.7.5","text":"Updated README inviting new users (#574) Added data quality section article Getting Occurrence Data GBIF. (#575)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-5","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.5","text":"removed sp rgeos dependencies. (#578)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-374","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.4","title":"rgbif 3.7.4","text":"CRAN release: 2022-12-06","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.4","text":"name_usage now ability fetch iucn red list categories using data=iucnRedListCategory. (#547)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-7-4","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"rgbif 3.7.4","text":"name_backbone_checklist updated definition verbose argument. (#564) “many choices” warning added article Working Taxonomic Names. (#536)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-7-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.7.4","text":"dataset_gridded bug fixed inputting one non-gridded dataset. (#546)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.4","text":"New CRAN checks badge URL. (#555) Update min vcr requirement (>= 1.2.0). (#559) Updated r-lib actions v2 (#566)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-373","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.3","title":"rgbif 3.7.3","text":"CRAN release: 2022-09-03","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.3","text":"Added missing search parameters occ_data() occ_search() (#530) Added missing occ_download() terms key lookup (#541) Support identifying “gridded datasets” experimental API using dataset_gridded() (#516) Look datasets GBIF network network_constituents() (#527) Added support using GBIF experimental reverse geocoding API gbif_geocode() (#521)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"deprecated-3-7-3","dir":"Changelog","previous_headings":"","what":"DEPRECATED","title":"rgbif 3.7.3","text":"networks() deprecated called network() instead. (#527) parsenames() deprecated called name_parse() better alignment name_* functions. (#504)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-7-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.7.3","text":"occ_search fixed bug related networkKey column names (#524)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-372","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.2","title":"rgbif 3.7.2","text":"CRAN release: 2022-04-11","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.2","text":"Removing wellknown dependency switching wk (#512)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-7-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.7.2","text":"name_backbone_checklist() : bug fix related two square brackets url (#509)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-371","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.1","title":"rgbif 3.7.1","text":"CRAN release: 2022-03-16","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-7-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.7.1","text":"name_backbone_checklist() : bug fixes (#501) (#505)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-370","dir":"Changelog","previous_headings":"","what":"rgbif 3.7.0","title":"rgbif 3.7.0","text":"CRAN release: 2022-02-08 new rgbif maintainer: John Waller.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.7.0","text":"derived_dataset() : New function register cleaned modified dataset GBIF citation. (#467) name_backbone_checklist() : New function takes list, vector, data.frame scientific names asynchronously matches backbone. (#475) pred_isnull() : New predicate function includes NULL values column download. (#489) occ_download.print() : Now prints much information including DOI citation. (#494)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"deprecated-3-7-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED","title":"rgbif 3.7.0","text":"gbif_citation.gbif() : longer considered best practice generate citation occ_search() occ_data(). recommend occ_download() derived_dataset() instead. (#494)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-7-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.7.0","text":"occ_download_wait() occ_download_meta() : now accept class character download key directly. keys need class “occ_download”. (#487) name_backbone() : now returns new columns “verbatim_name”, “verbatim_genus” ect. user supplied. makes easier user track matched. verbose argument also un-retired. verbose=TRUE, results returned single data.frame. (#475) gbif_citation() : now accept download key directly. occ_download_get() : throw error data already present overwrite=FALSE, just give warning return already present dataset. allows users run occ_download_get(key) %>% occ_download_import() multiple times without re-downloading file overwrite=TRUE. download_predicate_dsl() : “publishingOrg” now added download key. (#496) key_lkup now includes GBIF-style uppercase keys well. pred(\"TAXON_KEY\",212) pred(\"taxonKey\",212) work.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"documentation-3-7-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"rgbif 3.7.0","text":"Wrote new articles highlighting new features encouraging use occ_download() occ_search(). New articles: Citing GBIF Mediated Data Set GBIF Username Password Getting Occurrence Data GBIF Downloading Long Species List Working Taxonomic Names","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-7-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.7.0","text":"occ_download_import() : fixed bug related select argument. (#479) map_fetch() : fixed bug related sp::CRS (#497)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-360","dir":"Changelog","previous_headings":"","what":"rgbif 3.6.0","title":"rgbif 3.6.0","text":"CRAN release: 2021-06-02","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"downloads-3-6-0","dir":"Changelog","previous_headings":"","what":"Downloads","title":"rgbif 3.6.0","text":"typo download predicate functions fixed - mulitpoint -> multipoint (#460) thanks @damianooldoni catching added three new predicate keys: stateProvince (#458), gadm (#462), occurrenceStatus (#465)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.6.0","text":"add two new occurrence issues: FOOTPRINT_SRS_INVALID FOOTPRINT_WKT_INVALID (#454) occ_download_import() docs: information data.table::fread parameters particular ones useful sort data read issues (#461)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.6.0","text":"fix occ_download_get(): downloaded files used certain content type response header checked , changed least even successful responses, step removed (#464) fix occ_download_import(): country code Namibia NA - turning R missing value NA - now fixed (#463)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-352","dir":"Changelog","previous_headings":"","what":"rgbif 3.5.2","title":"rgbif 3.5.2","text":"CRAN release: 2021-01-27","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"download-predicates-3-5-2","dir":"Changelog","previous_headings":"","what":"Download predicates","title":"rgbif 3.5.2","text":"occurrence download predicate builder checks, better help users, give name key fails upon failure instead just string ‘key’ (#450) occurrence download predicates: new key coordinateUncertaintyInMeters added, e.g. usage: pred_lt(\"coordinateUncertaintyInMeters\",10000) (#449) pred_and() pred_or() slight change: now required one predicate passed functions doesn’t make sense predicate one predicate (#452) fix use pred_not(pred_notnull()) (#452)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-5-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.5.2","text":"add new occurrence issue (TAXON_MATCH_AGGREGATE) new name issue (BACKBONE_MATCH_AGGREGATE) (#453)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-5-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.5.2","text":"remove geoaxe references man-roxygen template doc files - using pkg anymore pkg cran archived (#448)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-350","dir":"Changelog","previous_headings":"","what":"rgbif 3.5.0","title":"rgbif 3.5.0","text":"CRAN release: 2021-01-13","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.5.0","text":"remove package wicket - use package wellknown instead - user facing changes related (#447) remove package geoaxe (archived CRAN soon) - use package sf instead (#447)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.5.0","text":"fix download predicate function pred_not(): constructing query correctly, fixed now. user facing change well: now expects predicate passed, single predicate GBIF predicate accepts one predicate (#446)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-342","dir":"Changelog","previous_headings":"","what":"rgbif 3.4.2","title":"rgbif 3.4.2","text":"CRAN release: 2021-01-06","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-4-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.4.2","text":"Add new occurrence issue DIFFERENT_OWNER_INSTITUTION (#444) re-record test fixtures","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-4-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.4.2","text":"fix bug occ_search() (#443)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.4","text":"Documentation: clarify occ_search() occ_data() parameters accept many values ; addition, clarify parameters accept multiple values HTTP request, accept multiple values apply separate HTTP requests. See also ?many-values manual file (#369) gbif_issues() gains 9 new occurrence issues (#435) occ_search() occ_data(), basisOfRecord parameter now supports multiple values, one request different requests, depending input format (see “Multiple values passed parameter” section ?occ_search) (#437) remove vignettes cran avoid cran checks - still available docs site (#438) occ_download_get(): GBIF slightly altered download behavior - now explicitly follow redirects get download (#439) print.occ_download_meta (used run occ_download_meta()) printing NA number results found results ready yet - now prints 0 instead NA (#440)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.4","text":"count_facet() fixes: fixed internal fxn count_facet parsing results, dropping values facets; added assertions check parameter types input user fxn; changed keys basisofrecord can passed together (#436)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.3","text":"added two new occurrence issues gbif_issues(): GEOREFERENCED_DATE_INVALID GEOREFERENCED_DATE_UNLIKELY (#430)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.3","text":"fixed error occ_data() caused GBIF adding new field data output /occurrence/search/: gadm. cleaned internals occ_data() drop gadm, fields complex take time parse (use occ_search() want data fields) (#427) gbif_names() fix: ending invalid URLs GBIF species pages taxon keys leading spaces somehow. now leading trailing spaces taxon keys removed making URLs (#429)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.2","text":"gbif_issues() changes: three new occurrence issues added; one name issue removed ’s deprecated (#423) gbif_citation() rights field empty unless pulling downloaded file; now fill license key; also fix occurrence key passed function (#424) establishmentMeans now supported occ_download/pred (#420)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.2","text":"fix occ_download_get(): response content-type header changed recently, fixed (#422)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.1","text":"finally delete code originally extracted plyr::rbind.fill - use data.table::rbindlist cases (#417) fix failing test cran dataset_search() (#418) fix xd refs note cran (non-file package anchored links) curl pkg function (#419)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.1","text":"occ_download_cancel_staged() fix: broken cause indexing column table [,\"key\"] (#416)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"breaking-change-3-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGE","title":"rgbif 3.0","text":"Many functions (occ_search, occ_get, name_usage, name_lookup, name_suggest, name_backbone, dataset_search) return parameter toggle returned function call. simplify rgbif maintenance, ’ve deprecated return parameter. ’ve left functions, longer anything, raising warning used. means function calls functions now always return data structure, making easier reason user, well us developers trying make sure package works expected variety conditions. using return parameter, function call , now index output need. breaking change, thus major version bump (#413)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 3.0","text":"new function occ_download_cached(), takes input occ_download(), instead starting query, checks ’ve recently made request (configureable settings “recent” means). can save time ’re occurrence download requests may done recent past (#308)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 3.0","text":"configured package able use two different base urls, api.gbif-uat.org api.gbif.org. used latter previously, now can configure rgbif use former, mostly testing purposes (#398) occ_download_import() gains encoding parameter passed data.table::fread make clear encoding can configured (even though via ...) (#414)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 3.0","text":"fix tibble construction (#412)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-23","dir":"Changelog","previous_headings":"","what":"rgbif 2.3","title":"rgbif 2.3","text":"CRAN release: 2020-05-28","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-2-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 2.3","text":"max records can return /occurrence/search route now 100,000 (used occ_data() occ_search()). updated docs throughout accordingly (#405) improved docs occ_download_queue() determine job done. see new section “job done?” (#409) print methods print.occ_download_prep print.occ_download improved. previously well-known text strings printed entirety. now handled print many characters; also applies download predicate string ’s long (#407) occ_download_get() now supports using progress bar passing httr::progress() (#402) occ_data() occ_search() gain two new parameters: recordedByID identifiedByID (#403)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-2-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 2.3","text":"fix occ_download_queue: empty occ_download_meta() lead problems; now removing NULL’s list occ_download_meta() outputs work (#408) fix occ_download_queue: accounting job status “cancelled” (#409) occ_download_import() fix: fill parameter set TRUE default, changed FALSE. improved docs fxn passing parameters data.table::fread (#404)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-2-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 2.2","text":"add section Download status ?downloads manual file listing different download status states download can mean (#390) fix gbif_issues/gbif_issues_lookup: added four missing occurrence issues package (COORDINATE_PRECISION_INVALID, COORDINATE_UNCERTAINTY_METERS_INVALID, INDIVIDUAL_COUNT_INVALID, INTERPRETATION_ERROR) (#400) real tests now occ_download() via vcr (#396)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-2-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 2.2","text":"fix name_lookup(): attempting rearrange columns results found, leading error (#399)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"defunct-2-1","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"rgbif 2.1","text":"spellCheck parameter removed occurrence routes; thus, occ_spellcheck() function now defunct - parameter spellCheck removed occ_data() occ_search() (#397)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-2-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 2.1","text":"docs fix occ_data(): remove ... parameter definition wasn’t used function (#394)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-2-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 2.1","text":"download predicate fxns fix: “within” wasnt handled properly (#393) thanks @damianooldoni","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 2.0","text":"download query user interface occ_download() changed breaking fashion (thus major version bump). installation, see ?download_predicate_dsl. Much complex queries now possible occ_download(). TL;DR: now construct queries functions like pred(\"taxonKey\", 3119195) rather passing strings like taxonKey = 3119195, pred_gt(\"elevation\", 5000) instead \"elevation > 5000\" (#362) gains new function occ_download_wait() re-run occ_download_meta() download ready - kinda like occ_download_queue() single download (#389) occ_download_dataset_activity() gains pagination parameters limit start paginate results (#382) gbif_citation() now works output occ_data() addition existing inputs accepts (#392)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 2.0","text":"typo fix geometry section occ_download() manual file (#387) vignettes fixes (#391)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 2.0","text":"gbif_citation() tests needed preserve body bytes vcr (#384) fix occ_count() count_facet(): isGeoreferenced/georeferenced variable needed booleans converted lowercase sent GBIF (#385) (#386)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-140","dir":"Changelog","previous_headings":"","what":"rgbif 1.4.0","title":"rgbif 1.4.0","text":"CRAN release: 2019-10-30","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 1.4.0","text":"gains new function mvt_fetch() fetching Map Vector Tiles (MVT). mvt used option map_fetch(), returned raw bytes option. mvt_fetch() now leverage protolite package, parses MVT files, give back sf object (#373) thanks @jeroen protolite work make work associated , map_fetch() loses format = \".mvt\" option; thus now returns RasterLayer occ_issues() name_issues() reworked. now use underlying internal logic, occ_issues pulling metadata specfic occurrence issues name_issues pulling metadata specific name issues. name_issues used data.frame name issues, can now used similarly occ_issues; can pass output name_usage() name_issues filter/parse name results associated name issues. Associated , new function gbif_issues_lookup can used lookup either occurrence name issues full name code (#363) (#364)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-1-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 1.4.0","text":"fix examples tests WKT wrong winding order (#361) parsing GBIF issues output name_usage() wasn’t working (#328) (#363) (#364) name_lookup() gains additional parameters issue filtering name results name issues (#335) (#363) (#364) fixed definitions x, y, z parameters map_fetch() manual file (#375) added examples gbif_citation() manual file accessing many citations (#379) fixed test occ_download_queue() (#365) name_* function outpus changed, aware ’re using functions","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 1.4.0","text":"fixed issue map_fetch(): srs EPSG:3857, extent set incorrectly set raster::extent(-180, 180, -85.1, 85.1). Now extent raster::extent(-20037508, 20037508, -20037508, 20037508 (#366) (#367) thanks @dmcglinn reporting @mdsumner fixing! fix Windows platforms gbif_citation() occ_download_get objects. weren’t correctly creating path file windows (#359) fix print.gbif_data (#370) (#371) occ_download() erroring useless error users try use fxn parameter input types occ_search/occ_data; happens now useful error message (#381) fix occ_download(): type = \"\" used, weren’t creating JSON correctly, fixed now (#362)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-130","dir":"Changelog","previous_headings":"","what":"rgbif 1.3.0","title":"rgbif 1.3.0","text":"CRAN release: 2019-05-08","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 1.3.0","text":"occ_download() occ_download_prep() gain new parameter format specifying type download. options DWCA (default), SIMPLE_CSV, SPECIES_LIST. SIMPLE_CSV SPECIES_LIST csv formats, DWCA darwin core format (#352) now throughout package can pass NA addition NULL missing parameter - removed sent GBIF (#351)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 1.3.0","text":"replace tibble::as_data_frame/tibble::data_frame tibble::as_tibble (#350) key gbifID output occ_data/occ_search/occ_get changed character class (strings) match GBIF encodes (#349) fix test fixtures use preserve exact bytes cran checks debian clang devel don’t fail (#355)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 1.3.0","text":"fix occ_download: fail useful message user pass queries character class (#347) fix occ_download: fail useful message now user/pwd/email found given (#348)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-120","dir":"Changelog","previous_headings":"","what":"rgbif 1.2.0","title":"rgbif 1.2.0","text":"CRAN release: 2019-02-26","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 1.2.0","text":"pkgdown documentation site (#336) (#337) work done @peterdesmet package gains hex logo (#331) (#332) thanks @peterdesmet big change elevation() function: Google Maps API requires form payment front, ’ve decided move away service. elevation() now uses Geonames service https://www.geonames.org/; require register get username, free service. Geonames different data models elevation can chosen elevation_model parameter (#344) (#345) biggish change occ_data()/occ_search() output: data.frame data slot now always first column occurrence key (key), second column now scientific name (scientificName). previously used name column still exists data.frame, break user code, simply duplicate scientificName column. future version package name column dropped (#329)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 1.2.0","text":"README gains full list code contributors folks involved github issues (#339) (#343) thanks @peterdesmet update pkg citation, include authors (#338) added occ_search()/occ_data()/occ_download() documentation WKT (well-known text) respect winding order. GBIF requires counter-clockwise winding order; submit clockwise winding order WKT occ_search() occ_data() get data back WKT treated exclusion, returns data outside shape instead within ; submit clockwise winding order WKT occ_download() get data back (#340)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 1.2.0","text":"fix bug occ_download(), failing certain cases bad code internal function catch_err() (#333) occ_download() returning user name email ’s print method (#334) occ_issues() failing occ_data() occ_search() input type=\"many\" (.e., > 1 thing passed ) (#341)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-110","dir":"Changelog","previous_headings":"","what":"rgbif 1.1.0","title":"rgbif 1.1.0","text":"CRAN release: 2018-10-19","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 1.1.0","text":"tests make HTTP requests now cached via vcr package require internet connection (#306) (#327) added name usage issues (similar occurrence issues) data. part fixes name_usage() problem, work coming allow users use name issues data like allow occurrence issues occ_issues() (#324)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 1.1.0","text":"map_fetch() changes following changes GBIF maps API: new parameters taxonKey, datasetkey, country, publishingOrg, publishingCountry removed parameters search id; note changes queries work function (#319) added note map_fetch() docs style parameter necessarily use style give . sure (#302) fixed messaging occ_download_queue() report accurate number jobs processed; just saying “kicking first 3 requests” even 1 2 (#312)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 1.1.0","text":"fix occ_get() verbatim=TRUE (#318) elevation() function now fails better. API key invalid function give informative message; now (#322)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-102","dir":"Changelog","previous_headings":"","what":"rgbif 1.0.2","title":"rgbif 1.0.2","text":"CRAN release: 2018-07-06","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-1-0-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 1.0.2","text":"significant change occ_download_queue(): sleep time successive calls check status download requests now 10 seconds greater. shouldn’t slow use occ_download_queue() much requests take 10 seconds prepared (#313) add tests download queue method (#315) explicitly @importFrom fxns used lazyeval package avoid check note (#316) remove reshape2 maps packages Suggests (#317)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 1.0.2","text":"fix bug name_usage(): screwing parsing issues column single taxon keys passed (#314)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-100","dir":"Changelog","previous_headings":"","what":"rgbif 1.0.0","title":"rgbif 1.0.0","text":"CRAN release: 2018-07-03","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 1.0.0","text":"occ_issues() now works download data arbitrary data.frame’s (#193) New downloads queueing tools: gains functions occ_download_prep() preparing download request without executing , occ_download_queue() kicking many download jobs respecting GBIF’s downloads rate limits. See also internal R6 classes dealing queuing: DownReq, GifQueue. See ?occ_download_queue get started (#266) (#305) (#311) New function map_fetch() working GBIF maps API https://www.gbif.org/developer/maps. See ?map_fetch get started (#238) (#269) (#284) thanks @JanLauGe work name_lookup() gains origin parameter (#288) (#293) thanks @peterdesmet @damianooldoni name_lookup() name_usage() gain internal paging - just occ_search()/occ_data() (#291) (see also #281) thanks @damianooldoni new import lazyeval, new suggests png raster occ_search()/occ_data() gain parameter skip_validate (boolean) skip stkip WKT validation wicket package","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 1.0.0","text":"removed warnings parameters removed previous versions package (#189) add citation file (#189) updated name_usage() check params now allow 1 value: name, language, datasetKey, rank (#287) occ_count() loses nubKey, catalogNumber, hostCountry parameters longer accepted GBIF","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 1.0.0","text":"fixed bug name_usage(), screwing something internally (#286) fixed bug occ_data(): curl options weren’t passed (#297) fixed geometry usage occ_search()/occ_data() - skipping wicket validation constructing WKT hand bounding box (bounding box given) - validation wicket isn’t GBIF wants (#303) add fill parameter occ_download_import() pass fill data.table::fread, set fill=TRUE default. (#292) better failure occ_download() (#300) fix bug occ_download() single taxonKey passed failing (#283) name_usage() ignoring datasetKey uuid parameters (#290)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"defunct-and-deprecated-1-0-0","dir":"Changelog","previous_headings":"","what":"DEFUNCT AND DEPRECATED","title":"rgbif 1.0.0","text":"gbifmap() removed, see package mapr similar functionality map_fetch() package use GBIF map API (#298)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-099","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.9","title":"rgbif 0.9.9","text":"CRAN release: 2017-11-12","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.9","text":"Gains new functions occ_download_datasets occ_download_dataset_activity list datasets download, list downloads activity dataset (#275) (#276) Gains new vignette covering working GBIF downloads rgbif (#262)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.9","text":"Guidance added docs downloads functions length request body (#263) Changed authentication details (user name, password, email) downloads allow options: pass arguments, store R options, store environment variables (#187) gbif_citation() function gains S3 method passing output occ_download_meta() . addition, downloads gbif_citation() now returns citation entire download (including) DOI, addition citations dataset (#274) thanks @dnoesgaard","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.9","text":"Fix documentation bug occ_count(): georeferenced misleading description value FALSE (#265) Fixed bug gbifmap() - failing cases - better error handlingn now (#271) thanks @TomaszSuchan Fixed occ_download_cancel_staged(): wasn’t passing authentication parameters correctly (#280)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-098","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.8","title":"rgbif 0.9.8","text":"CRAN release: 2017-04-18","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.8","text":"GBIF API supports passing many instances parameter parameters routes. Previously didn’t support feature, now . See ?many-values manual file details. added docs individual functions support , added additional tests (#200) (#260) (#261) ’ve removed V8 dependency replaced C++ based WKT parser package wicket. still use rgeos WKT parsing. rgbif functions use wicket: gbif_bbox2wkt, gbif_wkt2bbox, check_wkt (#243) httr replaced crul HTTP reqeusts. part change, ... parameter replaced functions curlopts expects list. functions require ... parameter facet inputs, ... retained addition curltops parameter. result change whereas past parameters defined function also ... parameter essentially silently ignore undefined parameter, functions ... removed misspelled undefined parameter cause error message (#256)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.8","text":"moved markdown docs (#258) namespacing calls base R pkgs instead importing ","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.8","text":"Fixed problem occ_download_import() allow import csv type download addition darwin core archive. additional change occ_download_get add format attribute stating format (#246) fix occ_download_import adding fill=TRUE data.table::fread call (#257)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-097","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.7","title":"rgbif 0.9.7","text":"CRAN release: 2017-01-21","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.7","text":"occ_dowload gains new parameter body allow users pass JSON list query instead passing statements .... See examples ?occ_dowload.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-7","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.7","text":"Now using tibble compact data.frame output occ_download_import instead bespoke internal solution (#240) Moved GBIF API requests use https instead http (#244) Improved print method occ_download_meta","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.7","text":"Fix occ_download structure query correctly type=within geometry used structure slightly different using geometry (#242) Fixed occ_download allow queries many values parameter, e.g., taxonKey=2475470,2480946 queried correctly now essentially taxonKey=2475470 taxonKey=2480946 (#245)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-096","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.6","title":"rgbif 0.9.6","text":"CRAN release: 2016-12-06","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.6","text":"Fixed bug parsenames() caused slots list NULL (#237) Fixed failing tests: occ_facet() tests failing due changes GBIF API (#239) Fixes gbif_oai_get_records() slight changes oai dependency pkg (#236)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-095","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.5","title":"rgbif 0.9.5","text":"CRAN release: 2016-10-06","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.5","text":"occ_search() now faceted search. feature occ_data() function focuses getting occurrence data quickly, get facet data. means new slot available output object occ_search(), namely facets. Note rgbif faceted search species search route (name_lookup()) registry search route (dataset_search()) quite . (#215) new function (occ_facet()) facilitate retrieving facet data, occurrence data retrieved. (#215) (#229) suite new parameters added occ_search() occ_data() following addition GBIF search API: subgenusKey, repatriated, phylumKey, kingdomKey, classKey, orderKey, familyKey, genusKey, establishmentMeans, protocol, license, organismId, publishingOrg, stateProvince, waterBody, locality (#216) (#224) New parameter spellCheck added occ_search() occ_data() TRUE spell checks anything passed search parameter (q parameter GBIF API; full text search) (#227) New function occ_spellcheck spell check search terms, returns TRUE spelling problems, list info suggestions . occ_search() occ_data() now ability support queries limit=0, one possible fail previously, second, makes can faceted searches (See ) wait occurrence records returned. (#222) MULTIPOLYGON well known text features now supported GBIF API. Previously, query geometry one polygon (POLYGON), now can. (#222)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-5","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.5","text":"Improved docs occ_count(), especially set allowed parameter options GBIF count API supports occ_count() gains new parameter typeStatus indicate specimen type status. results found, data slot now returns NULL instead character string","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.5","text":"Fixes gbif_photos(): 1) Mapbox URLs JS CSS assets date, API key needed. 2) RStudio, table view outputting errors due serving files localhost:<port> instead simply opening file; fixed now checking platform using simple open file command appropriate OS. (#228) (#235)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-094","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.4","title":"rgbif 0.9.4","text":"CRAN release: 2016-06-29","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.4","text":"Now using tibble package output data.frame (#204) New vignette Taxonomic Names discussing common names problems users may run , strategies dealing taxonomic names using GBIF (#208) (#209)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.4","text":"Replaced () inherits(), longer importing methods() (#219) Improved docs registry functions. options listed data parameter, now (#210) Fixed documentation error gbifmap() man file (#212) thanks @rossmounce","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.4","text":"Fixed bug internal parser within occ_download(), strings parse parsed correctly spaces weren’t right place, robust now, added tests (#217). Came https://discuss.ropensci.org/t/rgbif-using-geometry--occ-download/395 parameter type silently ignored number registry functions. fixed . (#211)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-093","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.3","title":"rgbif 0.9.3","text":"CRAN release: 2016-03-29","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.3","text":"occ_data() occ_search() gain ability flexibly deal inputs geometry parameter. Previously, long WKT strings passed occ_search() occ_data() fail URIs can long. Another option use download API (see ?downloads). version adds ability choose long WKT strings via geom_big parameter: asis (previous version), bbox detects WKT sting likely long, creates bounding box WKT string data retrieved, clips result original WKT string; axe uses geoaxe package chop input WKT polygon many, toggles new parameters geom_size geom_n. (#197) (#199) part change, >1 geometry value passed, geom_big=\"axe\", named elements output get names geom1, geom2, geom3, etc. instead input WKT strings - WKT strings can long, make awkward named access elements. original WKT strings can still accessed via attr(result, \"args\")$geometry","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.3","text":"code tidying throughout package","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.3","text":"Fix parsing bug name_usage() function, see commit e88cf01cc11cb238d44222346eaeff001c0c637e Fix tests use new testthat fxn names, e.g., expect_gt() instead expect_more_than() Fix occ_download() parse error correctly empty body passed GBIF (#202)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-092","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.2","title":"rgbif 0.9.2","text":"CRAN release: 2016-02-02","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.2","text":"New function occ_data() - primary purpose perform faster data requests. Whereas occ_search() gives lots data, including taxonomic hierarchies media records, occ_data() gives occurrence data. (#190)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.2","text":"Replaced XML xml2 (#192) Speed ups following functions due use data.table::rbindlist() fast list data.frame coercion: name_lookup(), name_backbone(), name_suggest(), name_usage(), parsenames() (#191) Changes httr usage comply changes httr >= v1.1.0: now setting encoding explicitly UTF-8 parsing data manually, using internal function function(x) content(x, \"text\", encoding = \"UTF-8\") (#195)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.2","text":"Fix internal function move_col() fail fields don’t exist. failing sometimes latitude longitude columns returned. (#196)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-090","dir":"Changelog","previous_headings":"","what":"rgbif 0.9.0","title":"rgbif 0.9.0","text":"CRAN release: 2015-11-25","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.9.0","text":"New set functions (gbif_oai_*()) working GBIF registry OAI-PMH service. Now importing oai package make working GBIF’s OAI-PMH service easier (#183) Added code conduct (#180) Now sending user-agent header requests package GBIF’s servers indicating version rgbif ’s ropensci package. Looks like r-curl/0.9.4 httr/1.0.0 rOpenSci(rgbif/0.9.0), whatever versions package ’re using. also pass user-agent string header X-USER-AGENT case useragent header gets stripped somewhere along line (#185) New function gbif_citation() helps get citations datasets eith using occurrence search API via occ_search() downloads API via occ_downlad() (#178) (#179)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.9.0","text":"Using importFrom instead import cases now. Parameter collectorName changed recordedBy (#184)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.9.0","text":"Fix occ_download_meta() print method handle 1 predicate results (#186) Fix occ_issues() work return=data return=occ_search() output (#188)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-089","dir":"Changelog","previous_headings":"","what":"rgbif 0.8.9","title":"rgbif 0.8.9","text":"CRAN release: 2015-10-07","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-8-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.8.9","text":"Updated terraformer.js javascript code included package along update codebase (#156) email parameter now NULL default function occ_download(), provided set options, function fails. (#173) Additional explanation added ?downloads help file. Added internal checks elevation() check coordinates impossible (e.g., latitude > 90), complete (e.g., lat given, long given), points 0,0 (just warns, doesn’t stop). (#176) thanks @luisDVA General code tidying across package","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-8-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.8.9","text":"route changed getting images taxon within /species route, fix function name_usage() (#174) Fix occ_search() remove block code synonym checking. block code used parameter scientificName passed, checked name given synonym; yes, used accepted name according GBIF backbone taxonomy; , proceeded name given user. removed block code GBIF API now essentially behind scenes server side. See https://github.com/gbif/gbif-api examples. (#175)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-088","dir":"Changelog","previous_headings":"","what":"rgbif 0.8.8","title":"rgbif 0.8.8","text":"CRAN release: 2015-07-24","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-8-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.8.8","text":"Additional tests added gbif_photos() gbif_names() (#170)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-8-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.8.8","text":"Fixed tests passing CRAN.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-086","dir":"Changelog","previous_headings":"","what":"rgbif 0.8.6","title":"rgbif 0.8.6","text":"CRAN release: 2015-07-03","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-8-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.8.6","text":"New set functions names occ_download*() working GBIF download API. service using GBIF website, via API. See ?downloads. (#154) (#167)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"minor-improvements-0-8-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rgbif 0.8.6","text":"Explicitly import non-base R pkg functions, importing utils, methods, stats (#166)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-8-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.8.6","text":"Fixed problem httr v1 empty list allowed pass query parameter GET (#163)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-084","dir":"Changelog","previous_headings":"","what":"rgbif 0.8.4","title":"rgbif 0.8.4","text":"CRAN release: 2015-06-08","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-8-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.8.4","text":"New functions /enumerations GBIF API route: enumeration() enumeration_country(). Many parts GBIF API make use enumerations, .e. controlled vocabularies specific topics - available via functions. (#152)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-8-4","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.8.4","text":"elevation() now requires API key (#148) V8 package Import now, used WKT read/create use Javascript library Terraformer (http://terraformer.io/). Replaces packages sp rgeos, longer imported (#155) Changed occ_search() parameter spatialIssues hasGeospatialIssues (#151) Added note docs difference /search /count services, work. (#150) Added tests habitat parameter name_lookup() (#149) Dropped plyr Imports (#159) Dropped stringr Imports (#160) Dropped maps grid packages Imports (#161)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-8-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.8.4","text":"Looping records limit start parameters cases resulting duplicate records returned. Problem fixed. (#157)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-080","dir":"Changelog","previous_headings":"","what":"rgbif 0.8.0","title":"rgbif 0.8.0","text":"CRAN release: 2015-03-09","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.8.0","text":"example moved \\dontrun (#139) README fixes html (#141) Fixed documentation occ_search() give correct values default max limit start parameters (#145) Changed internal GET helper function properly pass error message (#144) Replaced assertthat::assert_that() stopifnot() one less dependency (#134) Fixed occ_search() allow ability query publishingCountry, , parameters desired (#137)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.8.0","text":"Fixed bug internal GET() helper function just pass NULL query parameter list length 0 passed, since caused requests fail cases. Fix name_lookup() force logical entry certain parameters - fix correct logical param passed, GBIF API went default parameter (#135) Fixed bug name_backbone() due change namelkupparser() helper function - fixes parsing verbose output (#136) Fixed broken URLs occ_search() documentation (#140)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-077","dir":"Changelog","previous_headings":"","what":"rgbif 0.7.7","title":"rgbif 0.7.7","text":"CRAN release: 2014-11-07","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-7-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.7.7","text":"New function occ_issues() subset data occ_search() based GBIF issues. (#) (#122) Related last bullet, GBIF issues now returned default occ_search() results, intentionally moved beginning column order data obvious. (#102) occ_search() now returns data fields default. default setting fields parameter - can changed. See ?occ_search New function gbif_names() view highlighted terms name results call name_lookup(). (#114) New functions: occ_issues_lookup() lookup GBIF issues based code name full issue name, gbif_issues() print entire issues table.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-7-7","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.7.7","text":"Completely replaced RCurl httr Completely replaced RJSONIO jsonlite. see slight performance JSON parsing jsonlite. Default number records occ_search() now 500; 25. (#113) Vignette old version GBIF API removed. New vignette cleaning data via GBIF issues added. (#132) Functions working old GBIF API removed, now defunct. (#116) Now better parsing functions (organizations(), datasets(), networks(), nodes(), installations()) data.frames possible. (#117) Added help warn users searching ranges latitude longitude occ_search() (#123) callopts parameter changed ... throughout functions. Now pass options httr named lists functions. (#130) Beware GBIF data becoming Darwin Core compliant - many parameters throughout package changed sentence_case camelCase. dataset_search() dataset_suggest() gain new parameter publishingOrg Default limit parameter changed 100 dataset functions: dataset_search(), dataset_suggest(), datasets(). Default limit parameter changed 100 registry functions: installations(), networks(), organizations, nodes(). Parameter changes networks(): name, code, modifiedsince, startindex, maxresults gone; new parameters query, identifier, identifierType, limit, start Parameter changes nodes(): new parameters identifier, identifierType, limit, start","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-7-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.7.7","text":"occ_search() failed sometimes species found. Fixed. (#112) Added better handling server errors pass user. (#115) (#118) Fixed incorrect parsing cases occ_search() (#119) Fixed bad parsing output name_lookup() (#120) Fixed single map option gbif_photos() caused map data. (#121) Fixed parameter names name_() functions according changes GBIF API spec, fixed documentation align GBIF API changes, added note maximum limit. (#124) (#127) (#129) Thanks @willgearty ! Fixed internals occ_search() user can pass multiple values issue parameter. (#107) Fixed URL tutorial ropensci website (#105) Thanks @fxi !","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-070","dir":"Changelog","previous_headings":"","what":"rgbif 0.7.0","title":"rgbif 0.7.0","text":"CRAN release: 2014-07-31","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.7.0","text":"occ_search() now dplyr like summary output return=''. See ?occ_search examples. can still easily access data, indexing meta, hierarchy, data, media via e.g., $data, ['data'], [['data']]. (#95) Media now returned GBIF API. Thus, occ_search(), now return media slot output list default. New function gbif_photos() view media files (photos wild museum specimens). Two options available, ='map' creates single map presents image user clicks point, ='table' table one row image, presenting image interactive map single point. (#88) Two new packages imported: sp whisker","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.7.0","text":"GBIF updated API, now v1. URL endpoints rgbif changed accordingly. (#92) GBIF switched using 2-letter country codes. Take note. (#90) GBIF switched parameters camelCase under_score style - changed accordingly rgbif. Using package custom version plyr::compact() instead importing plyr. name_lookup() removed facet_only parameter doesn’t anything - use limit=0 instead. , added two new slots output: hierarchy names (common/vernacular names) (#96). output can determined user via return parameter. name_suggest(), field higherClassificationMap selected returned via fields parameter, list returned data frame, list hierarchies separately. higherClassificationMap selected, data frame returned. occ_search() gains new parameters mediatype issue (#93), detailed list possible options issue parameter. Gains new examples searching images, examples calls throw errors. Updated vignette.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.7.0","text":"Added better error message check_wkt(). facet_only parameter removed dataset_search() function doesn’t anything - use limit=0 instead. Fixed examples didn’t work correctly.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-6-3","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.6.3","text":"Added functions gbif_bbox2wkt() gbif_wkt2bbox() convert bounding box wkt wkt object bounding box, respectively. Copied spocc package. Prefixes fxn names avoid conflicts. Now spitting informative error messages WKT strings passed properly formed, either rgeos::readWKT returned response GBIF.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-062","dir":"Changelog","previous_headings":"","what":"rgbif 0.6.2","title":"rgbif 0.6.2","text":"CRAN release: 2014-04-24","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-6-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.6.2","text":"gbifmap() throwing error looking two variables latitude longitude, changed decimalLatitude decimalLongitude, respectively, functions package. Fixed. (#81) occ_get() updated include changes GBIF API endpoint. fix included fixing parser verbatim results, see rgbif::gbifparser_verbatim. (#83) Fixed bugs elevation() - expecting column names latitude longitude, whereas inputs rgbif functions changed decimalLatitude decimalLongitude. Fixed bug count_facet() introduced b/c GBIF longer accepts hostCountry nubKey parameters.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-6-2","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.6.2","text":"gist(), stylegeojson(), togeojson() functions now listed deprecated. functionality moved spocc package (http://cran.r-project.org/web/packages/spocc/index.html). functions removed package future version. (#82) Added quick sanity test gbifmap(). Added tests occ_get() verbatim=TRUE, gives back different data verbatim=FALSE.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-060","dir":"Changelog","previous_headings":"","what":"rgbif 0.6.0","title":"rgbif 0.6.0","text":"CRAN release: 2014-04-17","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.6.0","text":"number variables changed names better follow Darwin Core standard. latitude now decimalLatitude. longitude now decimalLongitude. clazz now class. Code package changed accomodate changes. date now eventDate. georeferenced now hasCoordinate. Beware changes code using rgbif - find replace easy. Changed altitude parameter occ_search() elevation - elevation whole time. occ_count() function parameter changes: nubKey parameter changed taxonKey. New parameter protocol. Parameter catalogNumber gone. Parameter hostCountry gone. parameters still function definition, called throw useful warning telling correct parameter names. (#76) Fixed bug name_lookup() function labeling facet outputs incorrectly. (#77)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.6.0","text":"Better checking parsing response data GBIF: Across functions, now check response content type application/json, parse JSON using RJSONIO::fromJSON (instead httr ). Across functions, now return potential character class columns character class (instead factor), passing stringsAsFactors = FALSE data.frame() calls. Now using assertthat package various places give better error messages wrong input passed function. Four parameters name changes occ_search() function. parameters still function definition, called throw useful warning telling correct parameter names. (#75) Updated docs name_usage, name_backbone, name_lookup, name_suggest functions. sourceId parameter name_usage() function doesn’t work error message thrown used.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.6.0","text":"New function check_wkt() check well known text string right format. (#68) New dataset typestatus look possible specimen typeStatus values. See #74 information. GBIF added new parameters use occ_search() function. scientificName: search species name (instead taxonKey). continent: search continent. lastInterpreted: search last time GBIF modified record. recordNumber: search data collector’s specimen record number - different GBIF record number. typeStatus: search specimen type status. (#74) Note given new parameters many options available implicit faceted search can pass many values vector multiple searches like parameterName = c(x, y, z). parameters : taxonKey, scientificName, datasetKey, catalogNumber, collectorName, geometry, country, recordNumber, search, institutionCode, collectionCode, decimalLatitude, decimalLongitude, depth, year, typeStatus, lastInterpreted, continent. isn’t faceted search server side - just looping different values parameter GBIF API. Range queries new feature GBIF API. parameters occ_search() now support range queries: decimalLatitude,decimalLongitude,depth,elevation,eventDate,lastInterpreted,month, year. range query example depth=50,100 ask occurrences depth recorded 50 100 meters. Note syntax depth=c(50,100) perform two separate searches, one depth=50 one depth=100. (#71)","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-050","dir":"Changelog","previous_headings":"","what":"rgbif 0.5.0","title":"rgbif 0.5.0","text":"CRAN release: 2014-02-16","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.5.0","text":"Changed name country_codes() function gbif_country_codes() avoid conflicts packages. Replaced sapply() vapply() throughout package robust can faster. Added startup message package. gbifmap() now plots map ggplot2::coord_fixed(ratio=1) don’t get wonky maps. occ_count() now accepts call query publishingCountry single parameter (country), list occurrence counts publishing country. occ_get() occ_search() lose parameter minimal, place gains parameter fields, can request fields=‘minimal’ get just name, taxon key, lat long. set ‘’ get fields, selection fields want passing vector field names.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.5.0","text":"Updated base url GIBF parser function parsenames() isocodes dataset now documentation.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.5.0","text":"New function count_facet() facetted count search, GBIF doesn’t allow faceted searches count API. New function elevation() get elevation data data.frame lat/long points, list lat/long points. function uses Google Elevation API (https://developers.google.com/maps/documentation/elevation/). New function installations() get metadata installations.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.4.1","text":"Improved handling limit parameter occ_search() correct number occurrences returned. Fixed various tests broken.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-4-1","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.4.1","text":"Added missing limit argument datasets() function man file, also function gains start callopts parameters.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-040","dir":"Changelog","previous_headings":"","what":"rgbif 0.4.0","title":"rgbif 0.4.0","text":"CRAN release: 2013-11-20","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.4.0","text":"Data object isocodes gains new column gbif_names, GBIF specific names countries. Added deprecation messages throughout package functions arguments deprecated. tests moved tests/testthat inst/tests. Vignettes now vignettes/ directory.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.4.0","text":"New function dataset_suggest(), quick autocomplete service returns 20 datasets. New function name_backbone() looks names GBIF backbone taxonomy. New function name_suggest(), quick autocomplete service returns 20 name usages. New function occ_metadata() search dataset metadata. New function parsenames() parses taxonomic names returns components.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-3-9","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.3.9","text":"Added back functions, .Rd files, old version rgbif interacts old GBIF API. Updated vignette work new GBIF API fxns.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-3-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.3.9","text":"Added functions interact new GBIF API, notably: country_codes(), dataset_metrics(), dataset_search(), datasets(), name_lookup(), gbifmap(), gist(), name_lookup(), name_usage(), networks(), nodes(), occ_count(), occ_get(), occ_search(), organizations(), stylegeojson(), togeojson(). See README crosswalk old functions new ones.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-3-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.3.9","text":"test files moved inst/tests/ tests/testthat/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.3.2","text":"Removed georeferencedonly parameter - deprecated GBIF API","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-030","dir":"Changelog","previous_headings":"","what":"rgbif 0.3.0","title":"rgbif 0.3.0","text":"CRAN release: 2013-07-19","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.3.0","text":"Added S3 objects: Output calls occurrencelist() occurrence list_many() now class gbiflist, output calls densitylist() now class gbifdens. Slight changes gbifmaps() function. url parameter functions moved function base GBIF API url doesn’t need specified user. Vignette added.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.3.0","text":"Added function country_codes() look 2 character ISO country codes use searches. Added function occurrencelist_many() handle searches many species. Added functions togeojson() stylegeosjon() convert data.frame lat/long columns geojson file format, add styling data.frames using togeojson() . occurrencelist() occurrencelist_many() gain argument fixnames, lets user change species names output data.frame according variety scenarios. taxonsearch() gains argument accepted_status accept names status accepted. addition, function significant changes, examples, improve performance.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-020","dir":"Changelog","previous_headings":"","what":"rgbif 0.2.0","title":"rgbif 0.2.0","text":"CRAN release: 2013-03-01","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.2.0","text":"Improved code style, simplified code functions.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.2.0","text":"occurrencelist() now handles scientific notation maxresults given form. occurencelist() now can retrieve number records; previously max 1000 records.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rgbif 0.2.0","text":"Demo “List” returning incorrect taxon names - corrected now. Removed unused parameter ‘latlongdf’ occurencelist().","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"rgbif-015","dir":"Changelog","previous_headings":"","what":"rgbif 0.1.5","title":"rgbif 0.1.5","text":"CRAN release: 2012-12-04","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"improvements-0-1-5","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"rgbif 0.1.5","text":"Changed functions use RCurl instead httr httr presenting problems. Two function, capwords gbifxmlToDataFrame, added documentation internal functions.","code":""},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.1.5","text":"Added function density_spplist get species list data.frame species counts degree cell. Added function densitylist access records showing density occurrence records GBIF Network one-degree cell. Added function gbifmap make simple map visualize GBIF data. Added function occurrencecount count taxon concept records matching range filters. DEPRECATED gbifdatause removed, just function return data sharing agreement GBIF.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rgbif/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rgbif 0.1.0","text":"released CRAN","code":""}]
